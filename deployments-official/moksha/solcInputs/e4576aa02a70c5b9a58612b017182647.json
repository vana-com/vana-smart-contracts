{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n *\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\n * function only accessible if `msg.data.length == 0`.\n *\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\n * recovery.\n */\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /**\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\n     * invoke functions on this contract on behalf of other accounts.\n     *\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\n     */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder_) {\n        _trustedForwarder = trustedForwarder_;\n    }\n\n    /**\n     * @dev Returns the address of the trusted forwarder.\n     */\n    function trustedForwarder() public view virtual returns (address) {\n        return _trustedForwarder;\n    }\n\n    /**\n     * @dev Indicates whether any particular address is the trusted forwarder.\n     */\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder();\n    }\n\n    /**\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgSender() internal view virtual override returns (address) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    /**\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return msg.data[:calldataLength - contextSuffixLength];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    /**\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\n     */\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\n        return 20;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/Checkpoints.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\n\n/**\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n */\nlibrary Checkpoints {\n    /**\n     * @dev A value was attempted to be inserted on a past checkpoint.\n     */\n    error CheckpointUnorderedInsertion();\n\n    struct Trace224 {\n        Checkpoint224[] _checkpoints;\n    }\n\n    struct Checkpoint224 {\n        uint32 _key;\n        uint224 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\n     * library.\n     */\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace224 storage self) internal view returns (uint224) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace224 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            if (last._key > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint224({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint224({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\n     * exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint224[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint224 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace208 {\n        Checkpoint208[] _checkpoints;\n    }\n\n    struct Checkpoint208 {\n        uint48 _key;\n        uint208 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\n     * library.\n     */\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace208 storage self) internal view returns (uint208) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace208 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            if (last._key > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint208({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint208({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\n     * exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint208[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint208 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace160 {\n        Checkpoint160[] _checkpoints;\n    }\n\n    struct Checkpoint160 {\n        uint96 _key;\n        uint160 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\n     * library.\n     */\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace160 storage self) internal view returns (uint160) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace160 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            if (last._key > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint160({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint160({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\n     * exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint160[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint160 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/mocks/root/DLPRootImplementationV2Mock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.24;\n\nimport {DLPRootImplementation} from \"../../root/DLPRootImplementation.sol\";\n\ncontract DLPRootImplementationV2Mock is DLPRootImplementation {\n    /**\n     * @notice Upgrade the contract\n     * This function is required by OpenZeppelin's UUPSUpgradeable\n     *\n     * @param newImplementation                  new implementation\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    /**\n     * return the version of the contract\n     */\n    function version() external pure virtual override returns (uint256) {\n        return 2;\n    }\n\n    /**\n     * @notice Tests the contract upgradeability\n     */\n    function test() external pure returns (string memory) {\n        return \"test\";\n    }\n}\n"
    },
    "contracts/root/DLPRootImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"./interfaces/DLPRootStorageV1.sol\";\n\ncontract DLPRootImplementation is\n    UUPSUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    ERC2771ContextUpgradeable,\n    DLPRootStorageV1\n{\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Checkpoints for Checkpoints.Trace208;\n\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    bytes32 public constant DLP_ROOT_METRICS_ROLE = keccak256(\"DLP_ROOT_METRICS_ROLE\");\n\n    uint256 public constant NEW_MULTIPLIER_EPOCH = 3;\n\n    // Key events for DLP lifecycle and operations\n    event DlpRegistered(\n        uint256 indexed dlpId,\n        address indexed dlpAddress,\n        address ownerAddress,\n        address treasuryAddress,\n        uint256 stakersPercentage,\n        string name,\n        string iconUrl,\n        string website,\n        string metadata\n    );\n\n    event DlpUpdated(\n        uint256 indexed dlpId,\n        address indexed dlpAddress,\n        address ownerAddress,\n        address treasuryAddress,\n        uint256 stakersPercentage,\n        string name,\n        string iconUrl,\n        string website,\n        string metadata\n    );\n\n    event DlpStatusUpdated(uint256 indexed dlpId, DlpStatus newStatus);\n    event DlpVerificationUpdated(uint256 indexed dlpId, bool verified);\n    event EpochCreated(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount);\n    event EpochOverridden(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount);\n    event MinDlpStakersPercentageUpdated(uint256 newMinDlpStakersPercentage);\n    event MaxDlpStakersPercentageUpdated(uint256 newMaxDlpStakersPercentage);\n    event MinStakeAmountUpdated(uint256 newMinStakeAmount);\n    event DlpEligibilityThresholdUpdated(uint256 newDlpEligibilityThreshold);\n    event DlpSubEligibilityThresholdUpdated(uint256 newDlpSubEligibilityThreshold);\n    event EpochDlpsLimitUpdated(uint256 newEpochDlpsLimit);\n    event StakeWithdrawalDelayUpdated(uint256 newStakeWithdrawalDelay);\n    event RewardClaimDelayUpdated(uint256 newRewardClaimDelay);\n    event EpochSizeUpdated(uint256 newEpochSize);\n    event EpochRewardAmountUpdated(uint256 newEpochRewardAmount);\n    event MinDlpRegistrationStakeUpdated(uint256 newMinDlpRegistrationStake);\n    event StakeCreated(uint256 stakeId, address indexed staker, uint256 indexed dlpId, uint256 amount);\n    event StakeClosed(uint256 indexed stakeId);\n    event StakeWithdrawn(uint256 indexed stakeId);\n    event EpochDlpScoreSaved(uint256 indexed epochId, uint256 indexed dlpId, uint256 totalStakesScore);\n    event StakeRewardClaimed(uint256 indexed stakeId, uint256 indexed epochId, uint256 amount, bool isFinal);\n    event DlpRewardClaimed(\n        uint256 indexed dlpId,\n        uint256 indexed epochId,\n        uint256 rewardAmount,\n        uint256 stakersRewardAmount\n    );\n\n    // Custom errors\n    error InvalidParam();\n    error InvalidStakeAmount();\n    error StakeAlreadyWithdrawn();\n    error StakeNotClosed();\n    error StakeAlreadyClosed();\n    error StakeWithdrawalTooEarly();\n    error InvalidDlpId();\n    error InvalidDlpStatus();\n    error InvalidAddress();\n    error InvalidName();\n    error NotDlpOwner();\n    error NotStakeOwner();\n    error NothingToClaim();\n    error InvalidStakersPercentage();\n    error DlpAddressCannotBeChanged();\n    error TransferFailed();\n    error EpochNotEnded();\n    error EpochDlpScoreAlreadySaved();\n    error EpochRewardsAlreadyDistributed();\n\n    modifier onlyDlpOwner(uint256 dlpId) {\n        if (_dlps[dlpId].ownerAddress != msg.sender) {\n            revert NotDlpOwner();\n        }\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() ERC2771ContextUpgradeable(address(0)) {\n        _disableInitializers();\n    }\n\n    function initialize(address ownerAddress, uint256 daySizeInBlocks) external initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n        __ReentrancyGuard_init();\n        __Pausable_init();\n\n        daySize = daySizeInBlocks;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    function _msgSender()\n        internal\n        view\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\n        returns (address sender)\n    {\n        return ERC2771ContextUpgradeable._msgSender();\n    }\n\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\n        return ERC2771ContextUpgradeable._msgData();\n    }\n\n    function _contextSuffixLength()\n        internal\n        view\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\n        returns (uint256)\n    {\n        return ERC2771ContextUpgradeable._contextSuffixLength();\n    }\n\n    function _checkRole(bytes32 role) internal view override {\n        _checkRole(role, msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the trusted forwarder.\n     */\n    function trustedForwarder() public view virtual override returns (address) {\n        return _trustedForwarder;\n    }\n\n    function version() external pure virtual override returns (uint256) {\n        return 1;\n    }\n\n    function stakeWithdrawalDelay() public view returns (uint256) {\n        return _stakeWithdrawalDelayCheckpoints.latest();\n    }\n\n    function rewardClaimDelay() public view returns (uint256) {\n        return _rewardClaimDelayCheckpoints.latest();\n    }\n\n    /**\n     * @notice Gets DLP information including current stake and status\n     */\n    function dlps(uint256 dlpId) public view override returns (DlpInfo memory) {\n        Dlp storage dlp = _dlps[dlpId];\n        Epoch storage epoch = _epochs[epochsCount];\n\n        uint stakersPercentageEpoch = dlp.registrationBlockNumber > epoch.startBlock\n            ? dlp.stakersPercentageCheckpoints.at(0)._value\n            : dlp.stakersPercentageCheckpoints.upperLookup(uint48(epoch.startBlock));\n\n        uint256[] memory epochIds = new uint256[](dlp.epochIdsCount);\n        for (uint256 i = 1; i <= dlp.epochIdsCount; ) {\n            epochIds[i - 1] = dlp.epochIds[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return\n            DlpInfo({\n                id: dlp.id,\n                dlpAddress: dlp.dlpAddress,\n                ownerAddress: dlp.ownerAddress,\n                treasuryAddress: dlp.treasuryAddress,\n                stakersPercentage: dlp.stakersPercentageCheckpoints.latest(),\n                stakersPercentageEpoch: stakersPercentageEpoch,\n                name: dlp.name,\n                iconUrl: dlp.iconUrl,\n                website: dlp.website,\n                metadata: dlp.metadata,\n                status: dlp.status,\n                registrationBlockNumber: dlp.registrationBlockNumber,\n                stakeAmount: _dlpComputedStakeAmount(dlpId),\n                epochIds: epochIds,\n                isVerified: dlp.isVerified\n            });\n    }\n\n    function dlpsByAddress(address dlpAddress) external view override returns (DlpInfo memory) {\n        return dlps(dlpIds[dlpAddress]);\n    }\n\n    function dlpsByName(string calldata dlpName) external view override returns (DlpInfo memory) {\n        return dlps(dlpNameToId[dlpName]);\n    }\n\n    function eligibleDlpsListValues() external view override returns (uint256[] memory) {\n        return _eligibleDlpsList.values();\n    }\n\n    function eligibleDlpsListCount() external view override returns (uint256) {\n        return _eligibleDlpsList.length();\n    }\n\n    function eligibleDlpsListAt(uint256 index) external view override returns (uint256) {\n        return _eligibleDlpsList.at(index);\n    }\n\n    function stakes(uint256 stakeId) external view override returns (StakeInfo memory) {\n        Stake storage stake = _stakes[stakeId];\n\n        return\n            StakeInfo({\n                id: stakeId,\n                stakerAddress: stake.stakerAddress,\n                dlpId: stake.dlpId,\n                amount: stake.amount,\n                startBlock: stake.startBlock,\n                withdrawn: stake.withdrawn,\n                endBlock: stake.endBlock,\n                lastClaimedEpochId: _dlps[stake.dlpId].epochIds[stake.lastClaimedIndexEpochId]\n            });\n    }\n\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view override returns (uint256) {\n        return _stakes[stakeId].claimedAmounts[epochId];\n    }\n\n    function epochs(uint256 epochId) external view override returns (EpochInfo memory) {\n        return\n            EpochInfo({\n                startBlock: _epochs[epochId].startBlock,\n                endBlock: _epochs[epochId].endBlock,\n                rewardAmount: _epochs[epochId].rewardAmount,\n                isFinalised: _epochs[epochId].isFinalised,\n                dlpIds: _epochs[epochId].dlpIds.values()\n            });\n    }\n\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view override returns (DlpEpochInfo memory) {\n        Epoch storage epoch = _epochs[epochId];\n        EpochDlp memory epochDlp = epoch.dlps[dlpId];\n\n        Dlp storage dlp = _dlps[dlpId];\n\n        uint256 stakersPercentageEpoch = dlp.registrationBlockNumber > epoch.startBlock\n            ? dlp.stakersPercentageCheckpoints.at(0)._value\n            : dlp.stakersPercentageCheckpoints.upperLookup(uint48(epoch.startBlock));\n\n        return\n            DlpEpochInfo({\n                stakeAmount: _dlpComputedStakeAmountByBlock(dlpId, uint48(epoch.endBlock)),\n                isTopDlp: epoch.dlpIds.contains(dlpId),\n                rewardAmount: epochDlp.rewardAmount,\n                stakersPercentage: stakersPercentageEpoch,\n                totalStakesScore: epochDlp.totalStakesScore,\n                rewardClaimed: epochDlp.rewardClaimed,\n                stakersRewardAmount: epochDlp.stakersRewardAmount\n            });\n    }\n\n    function stakersListCount() external view returns (uint256) {\n        return _stakersList.length();\n    }\n    function stakersListAt(uint256 index) external view returns (address) {\n        return _stakersList.at(index);\n    }\n\n    function stakerDlpsListCount(address staker) external view override returns (uint256) {\n        return _stakers[staker].dlpIds.length();\n    }\n\n    function stakerDlpsListAt(address staker, uint256 index) external view override returns (uint256) {\n        return _stakers[staker].dlpIds.at(index);\n    }\n\n    function stakerDlpsListValues(address staker) external view override returns (uint256[] memory) {\n        return _stakers[staker].dlpIds.values();\n    }\n\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256) {\n        return _stakers[stakerAddress].stakeIds.length();\n    }\n\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256) {\n        return _stakers[stakerAddress].stakeIds.at(index);\n    }\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory) {\n        return _stakers[stakerAddress].stakeIds.values();\n    }\n\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256) {\n        return _stakers[stakerAddress].totalStakeAmount;\n    }\n\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256) {\n        return _stakers[stakerAddress].dlpStakeAmounts[dlpId];\n    }\n\n    /**\n     * @notice Calculates claimable rewards for a stake\n     * @dev Takes into account stake duration, score, and reward distribution\n     * @dev This method is not marked as view because is using a method that modifies state\n     * to call it as a view, please using static call\n     */\n    function calculateStakeClaimableAmount(uint256 stakeId) external override returns (uint256) {\n        if (epochsCount == 0) {\n            return 0;\n        }\n        return _calculateStakeRewardUntilEpoch(stakeId, epochsCount - 1, false);\n    }\n\n    /**\n     * @notice Estimates reward percentages for given DLPs\n     * @dev Calculates based on ratings and current epoch parameters\n     */\n    function estimatedDlpRewardPercentages(\n        uint256[] memory dlpIds\n    ) external view override returns (DlpRewardApy[] memory) {\n        return dlpRootMetrics.estimatedDlpRewardPercentagesDefault(dlpIds);\n    }\n\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view override returns (uint256) {\n        return _dlpComputedStakeAmountByBlock(dlpId, uint48(_epochs[epochId].endBlock));\n    }\n\n    /**\n     * @notice Gets top DLP IDs by rating (performanceRating + stakeRating)\n     * @dev Uses insertion sort to maintain ordered list\n     */\n    function topDlpIds(uint256 numberOfDlps) external view override returns (uint256[] memory) {\n        return dlpRootMetrics.topDlpIdsDefaultPercentages(epochsCount, numberOfDlps, _eligibleDlpsList.values());\n    }\n\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\n        _unpause();\n    }\n\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external override onlyRole(MAINTAINER_ROLE) {\n        if (newMinStakeAmount > minDlpRegistrationStake) {\n            revert InvalidParam();\n        }\n\n        minStakeAmount = newMinStakeAmount;\n        emit MinStakeAmountUpdated(newMinStakeAmount);\n    }\n\n    function updateMinDlpStakersPercentage(\n        uint256 newMinDlpStakersPercentage\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        if (newMinDlpStakersPercentage < 1e16 || newMinDlpStakersPercentage > maxDlpStakersPercentage) {\n            revert InvalidParam();\n        }\n\n        minDlpStakersPercentage = newMinDlpStakersPercentage;\n        emit MinDlpStakersPercentageUpdated(newMinDlpStakersPercentage);\n    }\n\n    function updateMaxDlpStakersPercentage(\n        uint256 newMaxDlpStakersPercentage\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        if (newMaxDlpStakersPercentage > 100e18 || newMaxDlpStakersPercentage < minDlpStakersPercentage) {\n            revert InvalidParam();\n        }\n\n        maxDlpStakersPercentage = newMaxDlpStakersPercentage;\n        emit MaxDlpStakersPercentageUpdated(newMaxDlpStakersPercentage);\n    }\n\n    function updateMinDlpRegistrationStake(\n        uint256 newMinDlpRegistrationStake\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        if (minStakeAmount > newMinDlpRegistrationStake || newMinDlpRegistrationStake > dlpSubEligibilityThreshold) {\n            revert InvalidParam();\n        }\n        minDlpRegistrationStake = newMinDlpRegistrationStake;\n        emit MinDlpRegistrationStakeUpdated(newMinDlpRegistrationStake);\n    }\n\n    /**\n     * @notice Updates eligibility threshold and adjusts DLP statuses\n     */\n    function updateDlpEligibilityThreshold(\n        uint256 newDlpEligibilityThreshold\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        if (dlpSubEligibilityThreshold > newDlpEligibilityThreshold) {\n            revert InvalidParam();\n        }\n\n        dlpEligibilityThreshold = newDlpEligibilityThreshold;\n\n        emit DlpEligibilityThresholdUpdated(newDlpEligibilityThreshold);\n    }\n\n    /**\n     * @notice Updates sub-eligibility threshold and adjusts DLP statuses\n     */\n    function updateDlpSubEligibilityThreshold(\n        uint256 newDlpSubEligibilityThreshold\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        if (\n            minDlpRegistrationStake > newDlpSubEligibilityThreshold ||\n            newDlpSubEligibilityThreshold > dlpEligibilityThreshold\n        ) {\n            revert InvalidParam();\n        }\n\n        dlpSubEligibilityThreshold = newDlpSubEligibilityThreshold;\n\n        emit DlpSubEligibilityThresholdUpdated(newDlpSubEligibilityThreshold);\n    }\n\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external override onlyRole(MAINTAINER_ROLE) {\n        epochDlpsLimit = newEpochDlpsLimit;\n        emit EpochDlpsLimitUpdated(newEpochDlpsLimit);\n    }\n\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external override onlyRole(MAINTAINER_ROLE) {\n        _checkpointPush(_stakeWithdrawalDelayCheckpoints, newStakeWithdrawalDelay);\n        emit StakeWithdrawalDelayUpdated(newStakeWithdrawalDelay);\n    }\n\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external override onlyRole(MAINTAINER_ROLE) {\n        _checkpointPush(_rewardClaimDelayCheckpoints, newRewardClaimDelay);\n        emit RewardClaimDelayUpdated(newRewardClaimDelay);\n    }\n\n    function updateEpochSize(uint256 newEpochSize) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        epochSize = newEpochSize;\n        emit EpochSizeUpdated(newEpochSize);\n    }\n\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        epochRewardAmount = newEpochRewardAmount;\n        emit EpochRewardAmountUpdated(newEpochRewardAmount);\n    }\n\n    function updateTrustedForwarder(address trustedForwarderAddress) external onlyRole(MAINTAINER_ROLE) {\n        _trustedForwarder = trustedForwarderAddress;\n    }\n\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external override onlyRole(MAINTAINER_ROLE) {\n        dlpRootMetrics = IDLPRootMetrics(newDlpRootMetricsAddress);\n    }\n\n    function updateDlpRootRewardsTreasury(\n        address newDlpRootRewardsTreasuryAddress\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        dlpRootRewardsTreasury = IDLPRootTreasury(newDlpRootRewardsTreasuryAddress);\n    }\n\n    function updateDlpRootStakesTreasury(\n        address newDlpRootStakesTreasuryAddress\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        dlpRootStakesTreasury = IDLPRootTreasury(newDlpRootStakesTreasuryAddress);\n    }\n\n    function overrideEpoch(\n        uint256 epochId,\n        uint256 startBlock,\n        uint256 endBlock,\n        uint256 rewardAmount\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        Epoch storage epoch = _epochs[epochId];\n        epoch.startBlock = startBlock;\n        epoch.endBlock = endBlock;\n        epoch.rewardAmount = rewardAmount;\n\n        emit EpochOverridden(epochId, startBlock, endBlock, rewardAmount);\n    }\n\n    function distributeEpochRewards(\n        uint256 epochId,\n        EpochDlpReward[] memory epochDlpRewards\n    ) external override onlyRole(DLP_ROOT_METRICS_ROLE) {\n        Epoch storage epoch = _epochs[epochId];\n\n        epoch.isFinalised = true;\n\n        uint256 index;\n        uint256 dlpId;\n        EpochDlp storage epochDlp;\n        Dlp storage dlp;\n\n        uint256 epochDlpsCount = epochDlpRewards.length;\n\n        // Distribute rewards\n        for (index = 0; index < epochDlpsCount; ) {\n            dlpId = epochDlpRewards[index].dlpId;\n\n            epoch.dlpIds.add(dlpId);\n            dlp = _dlps[dlpId];\n            dlp.epochIds[++dlp.epochIdsCount] = epochId;\n\n            epochDlp = epoch.dlps[dlpId];\n            epochDlp.rewardAmount = epochDlpRewards[index].rewardAmount;\n            epochDlp.stakersRewardAmount = epochDlpRewards[index].stakersRewardAmount;\n\n            bool success = dlpRootRewardsTreasury.transferVana(\n                dlp.treasuryAddress,\n                epochDlpRewards[index].rewardAmount\n            );\n\n            if (success) {\n                epochDlp.rewardClaimed = true;\n\n                emit DlpRewardClaimed(\n                    dlpId,\n                    epochId,\n                    epochDlpRewards[index].rewardAmount,\n                    epochDlpRewards[index].stakersRewardAmount\n                );\n            } else {\n                //just skip this DLP; it will be fixed manually\n            }\n\n            unchecked {\n                ++index;\n            }\n        }\n    }\n\n    /**\n     * @notice Updates stake scores for DLPs in past epochs\n     */\n    function saveEpochDlpsTotalStakesScore(\n        EpochDlpsTotalStakesScore[] memory stakeScore\n    ) external override onlyRole(MANAGER_ROLE) {\n        for (uint256 i = 0; i < stakeScore.length; ) {\n            Epoch storage epoch = _epochs[stakeScore[i].epochId];\n            EpochDlp storage epochDlp = epoch.dlps[stakeScore[i].dlpId];\n\n            if (_dlps[stakeScore[i].dlpId].dlpAddress == address(0)) {\n                revert InvalidDlpId();\n            }\n\n            if (epoch.endBlock > block.number || epoch.startBlock == 0) {\n                revert EpochNotEnded();\n            }\n\n            if (epochDlp.totalStakesScore != 0) {\n                revert EpochDlpScoreAlreadySaved();\n            }\n\n            epochDlp.totalStakesScore = stakeScore[i].totalStakesScore;\n\n            emit EpochDlpScoreSaved(stakeScore[i].epochId, stakeScore[i].dlpId, stakeScore[i].totalStakesScore);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Overrides stake scores for DLPs in past epochs\n     */\n    function overrideEpochDlpsTotalStakesScore(\n        EpochDlpsTotalStakesScore memory stakeScore\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        Epoch storage epoch = _epochs[stakeScore.epochId];\n        if (_dlps[stakeScore.dlpId].dlpAddress == address(0)) {\n            revert InvalidDlpId();\n        }\n\n        if (epoch.endBlock > block.number || epoch.startBlock == 0) {\n            revert EpochNotEnded();\n        }\n\n        epoch.dlps[stakeScore.dlpId].totalStakesScore = stakeScore.totalStakesScore;\n\n        emit EpochDlpScoreSaved(stakeScore.epochId, stakeScore.dlpId, stakeScore.totalStakesScore);\n    }\n\n    /**\n     * @notice Registers a new DLP with initial stake\n     */\n    function registerDlp(\n        DlpRegistration calldata registrationInfo\n    ) external payable override whenNotPaused nonReentrant {\n        _createEpochsUntilBlockNumber(block.number);\n        _registerDlp(registrationInfo);\n    }\n\n    function updateDlpVerification(uint256 dlpId, bool isVerified) external override onlyRole(MAINTAINER_ROLE) {\n        _dlps[dlpId].isVerified = isVerified;\n\n        emit DlpVerificationUpdated(dlpId, isVerified);\n\n        if (_dlpComputedStakeAmount(dlpId) >= dlpEligibilityThreshold) {\n            if (isVerified) {\n                _eligibleDlpsList.add(dlpId);\n                _dlps[dlpId].status = DlpStatus.Eligible;\n                emit DlpStatusUpdated(dlpId, DlpStatus.Eligible);\n            } else {\n                _eligibleDlpsList.remove(dlpId);\n                _dlps[dlpId].status = DlpStatus.Registered;\n                emit DlpStatusUpdated(dlpId, DlpStatus.Registered);\n            }\n        }\n    }\n\n    /**\n     * @notice Updates DLP information\n     * @dev Only DLP owner can update\n     */\n    function updateDlp(\n        uint256 dlpId,\n        DlpRegistration calldata dlpUpdateInfo\n    ) external override whenNotPaused nonReentrant onlyDlpOwner(dlpId) {\n        _createEpochsUntilBlockNumber(block.number);\n\n        if (dlpUpdateInfo.ownerAddress == address(0) || dlpUpdateInfo.treasuryAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (\n            dlpUpdateInfo.stakersPercentage < minDlpStakersPercentage ||\n            dlpUpdateInfo.stakersPercentage > maxDlpStakersPercentage\n        ) {\n            revert InvalidStakersPercentage();\n        }\n\n        Dlp storage dlp = _dlps[dlpId];\n\n        //this validation will be removed in the future\n        if (dlp.dlpAddress != dlpUpdateInfo.dlpAddress) {\n            revert DlpAddressCannotBeChanged();\n        }\n\n        dlp.ownerAddress = dlpUpdateInfo.ownerAddress;\n        dlp.treasuryAddress = dlpUpdateInfo.treasuryAddress;\n        if (dlp.stakersPercentageCheckpoints.latest() != dlpUpdateInfo.stakersPercentage) {\n            _checkpointPush(dlp.stakersPercentageCheckpoints, dlpUpdateInfo.stakersPercentage);\n        }\n        dlp.name = dlpUpdateInfo.name;\n        dlp.iconUrl = dlpUpdateInfo.iconUrl;\n        dlp.website = dlpUpdateInfo.website;\n        dlp.metadata = dlpUpdateInfo.metadata;\n\n        dlpIds[dlpUpdateInfo.dlpAddress] = dlpId;\n\n        emit DlpUpdated(\n            dlpId,\n            dlpUpdateInfo.dlpAddress,\n            dlpUpdateInfo.ownerAddress,\n            dlpUpdateInfo.treasuryAddress,\n            dlpUpdateInfo.stakersPercentage,\n            dlpUpdateInfo.name,\n            dlpUpdateInfo.iconUrl,\n            dlpUpdateInfo.website,\n            dlpUpdateInfo.metadata\n        );\n    }\n\n    /**\n     * @notice Deregisters a DLP\n     * @dev Only owner can deregister, must be in valid status\n     */\n    function deregisterDlp(uint256 dlpId) external override whenNotPaused nonReentrant onlyDlpOwner(dlpId) {\n        _createEpochsUntilBlockNumber(block.number);\n\n        Dlp storage dlp = _dlps[dlpId];\n\n        if (dlp.status == DlpStatus.None || dlp.status == DlpStatus.Deregistered) {\n            revert InvalidDlpStatus();\n        }\n\n        dlp.status = DlpStatus.Deregistered;\n        _eligibleDlpsList.remove(dlpId);\n\n        emit DlpStatusUpdated(dlpId, DlpStatus.Deregistered);\n    }\n\n    /**\n     * @notice Creates epochs up to current block\n     */\n    function createEpochs() external override nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(block.number);\n    }\n\n    /**\n     * @notice Creates epochs up to specified block\n     */\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external override nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(blockNumber < block.number ? blockNumber : block.number);\n    }\n\n    /**\n     * @notice Creates a new stake for a DLP\n     */\n    function createStake(uint256 dlpId) external payable override nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(block.number);\n        _createStake(_msgSender(), dlpId, msg.value);\n    }\n\n    /**\n     * @notice Closes multiple stakes\n     */\n    function closeStakes(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(block.number);\n        for (uint256 i = 0; i < stakeIds.length; ) {\n            _closeStake(_msgSender(), stakeIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Withdraws multiple closed stakes\n     */\n    function withdrawStakes(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(block.number);\n        for (uint256 i = 0; i < stakeIds.length; ) {\n            _withdrawStake(_msgSender(), stakeIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Claims rewards for multiple stakes\n     */\n    function claimStakesReward(uint256[] memory stakeIds) external nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(block.number);\n\n        if (epochsCount == 0) {\n            revert NothingToClaim();\n        }\n\n        for (uint256 i = 0; i < stakeIds.length; ) {\n            _claimStakeRewardUntilEpoch(stakeIds[i], epochsCount - 1);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Claims rewards for a stake up to specified epoch\n     */\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(block.number);\n        if (epochsCount == 0) {\n            revert InvalidParam();\n        }\n        uint256 maxEpoch = lastEpochToClaim < epochsCount - 1 ? lastEpochToClaim : epochsCount - 1;\n        _claimStakeRewardUntilEpoch(stakeId, maxEpoch);\n    }\n\n    /**\n     * @notice Calculates stake score based on amount and duration\n     */\n    function calculateStakeScore(\n        uint256 stakeAmount,\n        uint256 stakeStartBlock,\n        uint256 blockNumber\n    ) public view returns (uint256) {\n        uint256 daysStaked = (blockNumber - stakeStartBlock) / daySize;\n        // changed the multiplier formula but we want to keep the same behavior for stakes before epoch3\n        if (stakeStartBlock <= _epochs[NEW_MULTIPLIER_EPOCH - 1].endBlock) {\n            daysStaked += epochSize / daySize - 1;\n        }\n        return (stakeAmount * dlpRootMetrics.getMultiplier(daysStaked)) / 10000;\n    }\n\n    /**\n     * @notice Creates a new stake for a DLP\n     * @dev Validates stake amount and DLP status before creating\n     */\n    function _createStake(address stakerAddress, uint256 dlpId, uint256 amount) internal {\n        if (stakerAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (amount < minStakeAmount) {\n            revert InvalidStakeAmount();\n        }\n\n        Dlp storage dlp = _dlps[dlpId];\n\n        if (dlp.status == DlpStatus.None || dlp.status == DlpStatus.Deregistered) {\n            revert InvalidDlpStatus();\n        }\n\n        Stake storage stake = _stakes[++stakesCount];\n        stake.amount = amount;\n        stake.startBlock = block.number;\n        stake.stakerAddress = stakerAddress;\n        stake.dlpId = dlpId;\n        stake.lastClaimedIndexEpochId = dlp.epochIdsCount;\n\n        Staker storage staker = _stakers[stakerAddress];\n        staker.dlpIds.add(dlpId);\n        staker.dlpStakeAmounts[dlpId] += amount;\n        staker.stakeIds.add(stakesCount);\n        staker.totalStakeAmount += amount;\n\n        _stakersList.add(stakerAddress);\n        _checkpointAdd(dlp.stakeAmountCheckpoints, amount);\n\n        if (epochsCount >= NEW_MULTIPLIER_EPOCH) {\n            // we know that amount > calculateStakeScore(amount, block.number, _epochs[epochsCount].endBlock\n            // because the multiplier during the current epoch is less than 10000\n            dlpRootMetrics.updateEpochDlpStakeAmountAdjustment(\n                epochsCount,\n                dlpId,\n                amount - calculateStakeScore(amount, block.number, _epochs[epochsCount].endBlock),\n                true\n            );\n        }\n\n        (bool success, ) = payable(address(dlpRootStakesTreasury)).call{value: msg.value}(\"\");\n\n        if (!success) {\n            revert TransferFailed();\n        }\n\n        emit StakeCreated(stakesCount, stakerAddress, dlpId, amount);\n\n        // Check if DLP becomes eligible\n        if (\n            dlp.isVerified &&\n            (dlp.status == DlpStatus.Registered || dlp.status == DlpStatus.SubEligible) &&\n            _dlpComputedStakeAmount(dlpId) >= dlpEligibilityThreshold\n        ) {\n            _eligibleDlpsList.add(dlpId);\n            dlp.status = DlpStatus.Eligible;\n            emit DlpStatusUpdated(dlpId, DlpStatus.Eligible);\n        }\n    }\n\n    /**\n     * @notice Closes a stake and updates DLP status if needed\n     */\n    function _closeStake(address stakerAddress, uint256 stakeId) internal {\n        Stake storage stake = _stakes[stakeId];\n\n        if (stake.stakerAddress != stakerAddress) {\n            revert NotStakeOwner();\n        }\n\n        if (stake.endBlock != 0) {\n            revert StakeAlreadyClosed();\n        }\n\n        Staker storage staker = _stakers[stakerAddress];\n        staker.dlpStakeAmounts[stake.dlpId] -= stake.amount;\n        staker.totalStakeAmount -= stake.amount;\n\n        Dlp storage dlp = _dlps[stake.dlpId];\n        _checkpointAdd(dlp.unstakeAmountCheckpoints, stake.amount);\n        stake.endBlock = block.number;\n\n        //we need to subtract the epoch dlp stake amount adjustment if the stake was created and closed in the current epoch\n        if (epochsCount >= NEW_MULTIPLIER_EPOCH && stake.startBlock > _epochs[epochsCount].startBlock) {\n            dlpRootMetrics.updateEpochDlpStakeAmountAdjustment(\n                epochsCount,\n                stake.dlpId,\n                stake.amount - calculateStakeScore(stake.amount, stake.startBlock, _epochs[epochsCount].endBlock),\n                false\n            );\n        }\n\n        uint256 dlpStake = _dlpComputedStakeAmount(stake.dlpId);\n\n        // Update DLP status based on remaining stake\n        if (\n            dlpStake < dlpSubEligibilityThreshold &&\n            (dlp.status == DlpStatus.SubEligible || dlp.status == DlpStatus.Eligible)\n        ) {\n            dlp.status = DlpStatus.Registered;\n            _eligibleDlpsList.remove(stake.dlpId);\n\n            emit DlpStatusUpdated(stake.dlpId, DlpStatus.Registered);\n        } else if (dlpStake < dlpEligibilityThreshold && dlp.status == DlpStatus.Eligible) {\n            dlp.status = DlpStatus.SubEligible;\n\n            emit DlpStatusUpdated(stake.dlpId, DlpStatus.SubEligible);\n        }\n\n        emit StakeClosed(stakeId);\n    }\n\n    /**\n     * @notice Withdraws a closed stake after delay period\n     */\n    function _withdrawStake(address stakerAddress, uint256 stakeId) internal {\n        Stake storage stake = _stakes[stakeId];\n\n        if (stake.stakerAddress != stakerAddress) {\n            revert NotStakeOwner();\n        }\n\n        if (stake.withdrawn) {\n            revert StakeAlreadyWithdrawn();\n        }\n\n        if (stake.endBlock == 0) {\n            revert StakeNotClosed();\n        }\n\n        if (stake.endBlock + stakeWithdrawalDelay() > block.number) {\n            revert StakeWithdrawalTooEarly();\n        }\n\n        stake.withdrawn = true;\n\n        bool success = dlpRootStakesTreasury.transferVana(payable(stake.stakerAddress), stake.amount);\n        if (!success) {\n            revert TransferFailed();\n        }\n\n        emit StakeWithdrawn(stakeId);\n    }\n\n    /**\n     * @notice Internal function to register a new DLP\n     */\n    function _registerDlp(DlpRegistration calldata registrationInfo) internal {\n        if (registrationInfo.ownerAddress == address(0) || registrationInfo.treasuryAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (dlpIds[registrationInfo.dlpAddress] != 0) {\n            revert InvalidDlpStatus();\n        }\n\n        if (dlpNameToId[registrationInfo.name] != 0 || bytes(registrationInfo.name).length == 0) {\n            revert InvalidName();\n        }\n\n        if (\n            registrationInfo.stakersPercentage < minDlpStakersPercentage ||\n            registrationInfo.stakersPercentage > maxDlpStakersPercentage\n        ) {\n            revert InvalidStakersPercentage();\n        }\n\n        if (msg.value < minDlpRegistrationStake) {\n            revert InvalidStakeAmount();\n        }\n\n        uint256 dlpId = ++dlpsCount;\n        Dlp storage dlp = _dlps[dlpId];\n\n        dlp.id = dlpId;\n        dlp.dlpAddress = registrationInfo.dlpAddress;\n        dlp.ownerAddress = registrationInfo.ownerAddress;\n        dlp.treasuryAddress = registrationInfo.treasuryAddress;\n        _checkpointPush(dlp.stakersPercentageCheckpoints, registrationInfo.stakersPercentage);\n        dlp.name = registrationInfo.name;\n        dlp.iconUrl = registrationInfo.iconUrl;\n        dlp.website = registrationInfo.website;\n        dlp.metadata = registrationInfo.metadata;\n        dlp.registrationBlockNumber = block.number;\n        dlp.status = DlpStatus.Registered;\n\n        dlpIds[registrationInfo.dlpAddress] = dlpId;\n\n        dlpNameToId[registrationInfo.name] = dlpId;\n\n        emit DlpRegistered(\n            dlpId,\n            registrationInfo.dlpAddress,\n            registrationInfo.ownerAddress,\n            registrationInfo.treasuryAddress,\n            registrationInfo.stakersPercentage,\n            registrationInfo.name,\n            registrationInfo.iconUrl,\n            registrationInfo.website,\n            registrationInfo.metadata\n        );\n\n        emit DlpStatusUpdated(dlpId, DlpStatus.Registered);\n        _createStake(registrationInfo.ownerAddress, dlpId, msg.value);\n    }\n\n    /**\n     * @notice Claims reward for a stake up to specified epoch\n     * @dev Calculates and distributes rewards based on stake score\n     */\n    function _claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) internal {\n        uint256 totalRewardAmount = _calculateStakeRewardUntilEpoch(stakeId, lastEpochToClaim, true);\n\n        if (totalRewardAmount == 0) {\n            revert NothingToClaim();\n        }\n\n        Stake storage stake = _stakes[stakeId];\n\n        bool success = dlpRootRewardsTreasury.transferVana(payable(stake.stakerAddress), totalRewardAmount);\n        if (!success) {\n            revert TransferFailed();\n        }\n    }\n\n    /**\n     * @notice Calculates reward for a stake up to specified epoch\n     */\n    function _calculateStakeRewardUntilEpoch(\n        uint256 stakeId,\n        uint256 lastEpochToClaim,\n        bool isClaim\n    ) internal returns (uint256) {\n        Stake storage stake = _stakes[stakeId];\n        Dlp storage dlp = _dlps[stake.dlpId];\n\n        uint256 totalRewardAmount;\n        uint256 epochToClaimIndex = stake.lastClaimedIndexEpochId + 1;\n        uint256 epochToClaim = dlp.epochIds[epochToClaimIndex];\n\n        while (epochToClaim > 0 && epochToClaim <= lastEpochToClaim) {\n            totalRewardAmount += _calculateStakeRewardByEpoch(stakeId, epochToClaim, isClaim);\n\n            epochToClaim = dlp.epochIds[++epochToClaimIndex];\n        }\n\n        return totalRewardAmount;\n    }\n\n    /**\n     * @notice Calculates reward for a stake up to specified epoch\n     */\n    function _calculateStakeRewardByEpoch(uint256 stakeId, uint256 epochId, bool isClaim) internal returns (uint256) {\n        Stake storage stake = _stakes[stakeId];\n        uint256 epochToClaimIndex = stake.lastClaimedIndexEpochId + 1;\n        uint256 rewardClaimDelayTmp = rewardClaimDelay();\n\n        Epoch storage epoch = _epochs[epochId];\n        EpochDlp storage epochDlp = epoch.dlps[stake.dlpId];\n\n        if (epochId == 0 || epochDlp.totalStakesScore == 0 || (stake.endBlock > 0 && epoch.endBlock > stake.endBlock)) {\n            return 0;\n        }\n\n        uint256 stakeScore = calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock);\n\n        uint256 rewardAmount = (epochDlp.stakersRewardAmount * stakeScore) / epochDlp.totalStakesScore;\n\n        uint256 numberOfBlocks = block.number - epoch.endBlock;\n\n        bool fullRewardAmount = true;\n\n        if (rewardClaimDelayTmp > 0 && numberOfBlocks < rewardClaimDelayTmp) {\n            rewardAmount = (rewardAmount * numberOfBlocks) / rewardClaimDelayTmp;\n            fullRewardAmount = false;\n        }\n\n        if (stake.claimedAmounts[epochId] >= rewardAmount) {\n            return 0;\n        }\n\n        uint256 claimableAmount = rewardAmount - stake.claimedAmounts[epochId];\n        if (isClaim) {\n            stake.claimedAmounts[epochId] = rewardAmount;\n            emit StakeRewardClaimed(stakeId, epochId, rewardAmount, fullRewardAmount);\n\n            if (fullRewardAmount) {\n                stake.lastClaimedIndexEpochId = epochToClaimIndex;\n            }\n        }\n\n        return claimableAmount;\n    }\n\n    /**\n     * @notice Helper function to add value to checkpoint\n     */\n    function _checkpointAdd(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\n        return store.push(uint48(block.number), store.latest() + uint208(delta));\n    }\n\n    /**\n     * @notice Helper function to set checkpoint value\n     */\n    function _checkpointPush(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\n        return store.push(uint48(block.number), uint208(delta));\n    }\n\n    /**\n     * @notice Get DLP stake amount at specific block\n     */\n    function _dlpComputedStakeAmountByBlock(uint256 dlpId, uint48 checkBlock) internal view returns (uint256) {\n        return\n            _dlps[dlpId].stakeAmountCheckpoints.upperLookup(checkBlock) -\n            _dlps[dlpId].unstakeAmountCheckpoints.upperLookup(checkBlock);\n    }\n\n    /**\n     * @notice Get current DLP stake amount\n     */\n    function _dlpComputedStakeAmount(uint256 dlpId) internal view returns (uint256) {\n        return _dlps[dlpId].stakeAmountCheckpoints.latest() - _dlps[dlpId].unstakeAmountCheckpoints.latest();\n    }\n\n    /**\n     * @notice Creates and finalizes epochs up to target block\n     */\n    function _createEpochsUntilBlockNumber(uint256 blockNumber) internal {\n        Epoch storage lastEpoch = _epochs[epochsCount];\n\n        if (lastEpoch.endBlock > block.number) {\n            return;\n        }\n\n        while (lastEpoch.endBlock < blockNumber) {\n            Epoch storage newEpoch = _epochs[++epochsCount];\n            newEpoch.startBlock = lastEpoch.endBlock + 1;\n            newEpoch.endBlock = newEpoch.startBlock + epochSize - 1;\n            newEpoch.rewardAmount = epochRewardAmount;\n\n            emit EpochCreated(epochsCount, newEpoch.startBlock, newEpoch.endBlock, newEpoch.rewardAmount);\n            lastEpoch = newEpoch;\n        }\n    }\n}\n"
    },
    "contracts/root/interfaces/DLPRootStorageV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"./IDLPRoot.sol\";\n\n/**\n * @notice For future upgrades, do not change DLPRootStorageV1. Create a new\n * contract which implements DLPRootStorageV1\n */\nabstract contract DLPRootStorageV1 is IDLPRoot {\n    address internal _trustedForwarder;\n    uint256 internal eligibleDlpsLimit; // not used anymore\n    uint256 public override epochDlpsLimit; // Max DLPs per epoch\n    uint256 public override minStakeAmount; // Minimum stake allowed\n    uint256 public override minDlpStakersPercentage; // Min % of rewards to stakers (in 1e18)\n    uint256 public override minDlpRegistrationStake; // Min stake for new DLP registration\n    uint256 public override dlpEligibilityThreshold; // Min stake for full eligibility\n    uint256 public override dlpSubEligibilityThreshold; // Min stake for sub-eligibility\n\n    // Historical values tracked using checkpoints\n    Checkpoints.Trace208 internal _stakeWithdrawalDelayCheckpoints;\n    Checkpoints.Trace208 internal _rewardClaimDelayCheckpoints;\n\n    uint256 public override epochRewardAmount; // Rewards per epoch\n    uint256 public override epochSize; // Blocks per epoch\n    uint256 public override daySize; // Blocks per day\n\n    // DLP management\n    uint256 public override dlpsCount;\n    mapping(uint256 dlpId => Dlp dlp) internal _dlps;\n    mapping(address dlpAddress => uint256 dlpId) public override dlpIds;\n    EnumerableSet.UintSet internal _eligibleDlpsList;\n\n    // Epoch tracking\n    uint256 public override epochsCount;\n    mapping(uint256 epochId => Epoch epoch) internal _epochs;\n\n    // Staker management\n    EnumerableSet.AddressSet internal _stakersList;\n    mapping(address stakerAddress => Staker staker) internal _stakers;\n\n    // Stake tracking\n    uint256 public override stakesCount;\n    mapping(uint256 stakeId => Stake stake) internal _stakes;\n\n    uint256 public override maxDlpStakersPercentage; // Max % of rewards to stakers (in 1e18)\n\n    mapping(string dlpName => uint256 dlpId) public override dlpNameToId;\n\n    IDLPRootMetrics public override dlpRootMetrics;\n    IDLPRootTreasury public override dlpRootRewardsTreasury;\n    IDLPRootTreasury public override dlpRootStakesTreasury;\n}\n"
    },
    "contracts/root/interfaces/IDLPRoot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/structs/Checkpoints.sol\";\nimport {IDLPRootMetrics} from \"../../rootMetrics/interfaces/IDLPRootMetrics.sol\";\nimport {IDLPRootTreasury} from \"../../rootTreasury/interfaces/IDLPRootTreasury.sol\";\n\ninterface IDLPRoot {\n    // DLP lifecycle states from registration to deregistration\n    enum DlpStatus {\n        None,\n        Registered,\n        Eligible, // Can participate in epochs\n        SubEligible, // Below threshold but above minimum\n        Deregistered\n    }\n\n    struct Dlp {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress; // Receives non-staker rewards\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\n        Checkpoints.Trace208 unstakeAmountCheckpoints; // Historical unstake amounts\n        uint256 epochIdsCount; // Number of participated epochs\n        mapping(uint256 index => uint256 epochIds) epochIds;\n        bool isVerified;\n    }\n\n    struct EpochDlp {\n        uint256 rewardAmount; // Rewards allocated to the DLP owner\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\n        uint256 totalStakesScore; // Sum of weighted stake scores\n        bool rewardClaimed; // True if reward has been claimed\n    }\n\n    struct Epoch {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 rewardAmount;\n        bool isFinalised;\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\n    }\n\n    struct Stake {\n        address stakerAddress;\n        uint256 dlpId;\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock; // 0 if active\n        bool withdrawn;\n        uint256 lastClaimedIndexEpochId;\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\n    }\n\n    struct Staker {\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\n        uint256 totalStakeAmount;\n    }\n\n    // View functions for contract state and configuration\n    function version() external pure returns (uint256);\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\n    function epochDlpsLimit() external view returns (uint256);\n    function epochSize() external view returns (uint256);\n    function daySize() external view returns (uint256);\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\n    function eligibleDlpsListCount() external view returns (uint256);\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\n    function epochsCount() external view returns (uint256);\n\n    // Read-only struct views\n    struct EpochInfo {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 rewardAmount;\n        bool isFinalised;\n        uint256[] dlpIds;\n    }\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\n\n    // Additional view functions\n    function minStakeAmount() external view returns (uint256);\n    function minDlpStakersPercentage() external view returns (uint256);\n    function maxDlpStakersPercentage() external view returns (uint256);\n    function minDlpRegistrationStake() external view returns (uint256);\n    function dlpEligibilityThreshold() external view returns (uint256);\n    function dlpSubEligibilityThreshold() external view returns (uint256);\n    function stakeWithdrawalDelay() external view returns (uint256);\n    function rewardClaimDelay() external view returns (uint256);\n    function epochRewardAmount() external view returns (uint256);\n    function dlpsCount() external view returns (uint256);\n\n    struct DlpInfo {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address treasuryAddress;\n        uint256 stakersPercentage;\n        uint256 stakersPercentageEpoch;\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        uint256 stakeAmount;\n        uint256[] epochIds;\n        bool isVerified;\n    }\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\n    function dlpIds(address dlpAddress) external view returns (uint256);\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\n\n    struct DlpEpochInfo {\n        uint256 stakeAmount; // 0 if not a top DLP\n        bool isTopDlp; // In top DLPs list this epoch\n        uint256 rewardAmount; // 0 if not top DLP or epoch not finished\n        uint256 stakersPercentage; // 0 if not top DLP\n        uint256 totalStakesScore; // 0 if not top DLP\n        bool rewardClaimed;\n        uint256 stakersRewardAmount;\n    }\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view returns (DlpEpochInfo memory);\n    function stakersListCount() external view returns (uint256);\n    function stakersListAt(uint256 index) external view returns (address);\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\n    function stakesCount() external view returns (uint256);\n\n    struct StakeInfo {\n        uint256 id;\n        address stakerAddress;\n        uint256 dlpId;\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock;\n        bool withdrawn;\n        uint256 lastClaimedEpochId;\n    }\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\n\n    // Core functionality\n    function topDlpIds(uint256 numberOfDlps) external returns (uint256[] memory);\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\n\n    struct DlpRewardApy {\n        uint256 dlpId;\n        uint256 APY; //annual percentage yield for stakers\n        uint256 EPY; //epoch percentage yield for stakers\n    }\n\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\n\n    // Admin functions\n    function pause() external;\n    function unpause() external;\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\n    function updateEpochSize(uint256 newEpochSize) external;\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\n    function updateMinDlpStakersPercentage(uint256 newMinDlpStakersPercentage) external;\n    function updateMaxDlpStakersPercentage(uint256 newMaxDlpStakersPercentage) external;\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\n    function updateDlpEligibilityThreshold(uint256 newDlpEligibilityThreshold) external;\n    function updateDlpSubEligibilityThreshold(uint256 newDlpSubEligibilityThreshold) external;\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\n\n    struct EpochDlpsTotalStakesScore {\n        uint256 epochId;\n        uint256 dlpId;\n        uint256 totalStakesScore;\n    }\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\n\n    // Epoch management\n    function createEpochs() external;\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\n    struct EpochDlpReward {\n        uint256 dlpId;\n        uint256 rewardAmount;\n        uint256 stakersRewardAmount;\n    }\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\n\n    struct DlpRegistration {\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress;\n        uint256 stakersPercentage;\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n    }\n\n    // DLP lifecycle management\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\n    function updateDlpVerification(uint256 dlpId, bool isVerified) external;\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\n    function deregisterDlp(uint256 dlpId) external;\n\n    // Staking and rewards\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\n    function claimStakesReward(uint256[] memory stakeIds) external;\n    function createStake(uint256 dlpId) external payable;\n    function closeStakes(uint256[] memory stakeIds) external;\n    function withdrawStakes(uint256[] memory stakeIds) external;\n}\n"
    },
    "contracts/rootMetrics/interfaces/IDLPRootMetrics.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {IDLPRoot} from \"../../root/interfaces/IDLPRoot.sol\";\n\ninterface IDLPRootMetrics {\n    enum RatingType {\n        Stake,\n        Performance\n    }\n    struct EpochDlp {\n        uint256 performanceRating;\n        uint256 stakeAmountAdjustment;\n    }\n\n    struct Epoch {\n        uint256 totalPerformanceRating;\n        bool finalized;\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\n    }\n\n    struct DlpRating {\n        uint256 dlpId;\n        uint256 rating;\n    }\n\n    struct EpochInfo {\n        uint256 totalPerformanceRating;\n        bool finalized;\n    }\n\n    struct EpochDlpInfo {\n        uint256 performanceRating;\n        uint256 stakeAmountAdjustment;\n    }\n\n    struct DlpPerformanceRating {\n        uint256 dlpId;\n        uint256 performanceRating;\n    }\n\n    function version() external pure returns (uint256);\n    function dlpRoot() external view returns (IDLPRoot);\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\n    function ratingPercentages(RatingType rating) external view returns (uint256);\n    function topDlps(\n        uint256 epochId,\n        uint256 numberOfDlps,\n        uint256[] memory dlpIds,\n        uint256[] memory customRatingPercentages\n    ) external view returns (DlpRating[] memory);\n    function topDlpsDefaultPercentages(\n        uint256 epochId,\n        uint256 numberOfDlps,\n        uint256[] memory dlpIds\n    ) external view returns (DlpRating[] memory);\n    function topDlpIds(\n        uint256 epochId,\n        uint256 numberOfDlps,\n        uint256[] memory dlpIds,\n        uint256[] memory customRatingPercentages\n    ) external view returns (uint256[] memory);\n    function topDlpIdsDefaultPercentages(\n        uint256 epochId,\n        uint256 numberOfDlps,\n        uint256[] memory dlpIds\n    ) external view returns (uint256[] memory);\n    function estimatedDlpRewardPercentages(\n        uint256[] memory dlpIds,\n        uint256[] memory customRatingPercentages\n    ) external view returns (IDLPRoot.DlpRewardApy[] memory);\n    function estimatedDlpRewardPercentagesDefault(\n        uint256[] memory dlpIds\n    ) external view returns (IDLPRoot.DlpRewardApy[] memory);\n    function getMultiplier(uint256 index) external pure returns (uint256);\n    function pause() external;\n    function unpause() external;\n    function updateDlpRoot(address dlpRootAddress) external;\n    function updateEpochDlpStakeAmountAdjustment(\n        uint256 epochId,\n        uint256 dlpId,\n        uint256 adjustment,\n        bool isAddition\n    ) external;\n    function saveEpochPerformanceRatings(\n        uint256 epochId,\n        bool shouldFinalize,\n        DlpPerformanceRating[] memory dlpPerformanceRatings\n    ) external;\n    function updateRatingPercentages(uint256 stakeRatingPercentage, uint256 performanceRatingPercentage) external;\n}\n"
    },
    "contracts/rootTreasury/interfaces/IDLPRootTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {IDLPRoot} from \"../../root/interfaces/IDLPRoot.sol\";\n\ninterface IDLPRootTreasury {\n    function version() external pure returns (uint256);\n    function dlpRoot() external view returns (IDLPRoot);\n    function updateDlpRoot(address dlpRootAddress) external;\n    function transferVana(address payable to, uint256 value) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}