{
  "address": "0xB6D87132dB26735569CBF6c0503589A6eADd81C7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DlpAddressCannotBeChanged",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochDlpScoreAlreadySaved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochRewardsAlreadyDistributed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakersPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LastEpochMustBeFinalised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDlpOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotStakeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeAlreadyClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeAlreadyWithdrawn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeWithdrawalTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ownerRewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakersRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "DlpRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "EpochCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakesScore",
          "type": "uint256"
        }
      ],
      "name": "EpochDlpScoreSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochDlpsLimit",
          "type": "uint256"
        }
      ],
      "name": "EpochDlpsLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "EpochOverridden",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "EpochRewardAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochSize",
          "type": "uint256"
        }
      ],
      "name": "EpochSizeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DLP_ROOT_METRICS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createEpochs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "createEpochsUntilBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daySize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ownerRewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersRewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootEpoch.EpochDlpReward[]",
          "name": "epochDlpRewards",
          "type": "tuple[]"
        }
      ],
      "name": "distributeEpochRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpRoot",
      "outputs": [
        {
          "internalType": "contract IDLPRoot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "epochDlpStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "epochDlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isTopDlp",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "ownerRewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesScore",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersRewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootEpoch.EpochDlpInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochDlpsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "epochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFinalised",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "dlpIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDLPRootEpoch.EpochInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dlpRootAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "daySizeInBlocks",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochIdStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochIdEnd",
          "type": "uint256"
        }
      ],
      "name": "migrateEpochData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateParametersData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "overrideEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "epochId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesScore",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootEpoch.EpochDlpsTotalStakesScore",
          "name": "stakeScore",
          "type": "tuple"
        }
      ],
      "name": "overrideEpochDlpsTotalStakesScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "epochId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesScore",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootEpoch.EpochDlpsTotalStakesScore[]",
          "name": "stakeScore",
          "type": "tuple[]"
        }
      ],
      "name": "saveEpochDlpsTotalStakesScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochIdStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochIdEnd",
          "type": "uint256"
        }
      ],
      "name": "saveEpochDlpsTotalStakesScoreForce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDlpRootAddress",
          "type": "address"
        }
      ],
      "name": "updateDlpRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochDlpsLimit",
          "type": "uint256"
        }
      ],
      "name": "updateEpochDlpsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "updateEpochRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochSize",
          "type": "uint256"
        }
      ],
      "name": "updateEpochSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8249be78e498eeaba299103454e4acc8c0d3e32b5efbf1fa5555943b5ee515da",
  "receipt": {
    "to": null,
    "from": "0x2AC93684679a5bdA03C6160def908CdB8D46792f",
    "contractAddress": "0xB6D87132dB26735569CBF6c0503589A6eADd81C7",
    "transactionIndex": 0,
    "gasUsed": "2744442",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000080000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xec419d684a5d76df2b2d156e08809f2f578112b79ef0f232fe0e1969b8ec8869",
    "transactionHash": "0x8249be78e498eeaba299103454e4acc8c0d3e32b5efbf1fa5555943b5ee515da",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2115627,
        "transactionHash": "0x8249be78e498eeaba299103454e4acc8c0d3e32b5efbf1fa5555943b5ee515da",
        "address": "0xB6D87132dB26735569CBF6c0503589A6eADd81C7",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xec419d684a5d76df2b2d156e08809f2f578112b79ef0f232fe0e1969b8ec8869"
      }
    ],
    "blockNumber": 2115627,
    "cumulativeGasUsed": "2744442",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "9d22052bd5f129c1019c3dd476a7756e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DlpAddressCannotBeChanged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochDlpScoreAlreadySaved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochRewardsAlreadyDistributed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakersPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastEpochMustBeFinalised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDlpOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStakeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeWithdrawalTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerRewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakersRewardAmount\",\"type\":\"uint256\"}],\"name\":\"DlpRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"EpochCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakesScore\",\"type\":\"uint256\"}],\"name\":\"EpochDlpScoreSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochDlpsLimit\",\"type\":\"uint256\"}],\"name\":\"EpochDlpsLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"EpochOverridden\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"name\":\"EpochRewardAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"}],\"name\":\"EpochSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DLP_ROOT_METRICS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"createEpochsUntilBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daySize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersRewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootEpoch.EpochDlpReward[]\",\"name\":\"epochDlpRewards\",\"type\":\"tuple[]\"}],\"name\":\"distributeEpochRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRoot\",\"outputs\":[{\"internalType\":\"contract IDLPRoot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"epochDlpStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"epochDlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTopDlp\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ownerRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersRewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootEpoch.EpochDlpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDlpsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinalised\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDLPRootEpoch.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dlpRootAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daySizeInBlocks\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochIdStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochIdEnd\",\"type\":\"uint256\"}],\"name\":\"migrateEpochData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateParametersData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"overrideEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesScore\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootEpoch.EpochDlpsTotalStakesScore\",\"name\":\"stakeScore\",\"type\":\"tuple\"}],\"name\":\"overrideEpochDlpsTotalStakesScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesScore\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootEpoch.EpochDlpsTotalStakesScore[]\",\"name\":\"stakeScore\",\"type\":\"tuple[]\"}],\"name\":\"saveEpochDlpsTotalStakesScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochIdStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochIdEnd\",\"type\":\"uint256\"}],\"name\":\"saveEpochDlpsTotalStakesScoreForce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDlpRootAddress\",\"type\":\"address\"}],\"name\":\"updateDlpRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochDlpsLimit\",\"type\":\"uint256\"}],\"name\":\"updateEpochDlpsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"name\":\"updateEpochRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"}],\"name\":\"updateEpochSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createEpochs()\":{\"notice\":\"Creates epochs up to current block\"},\"createEpochsUntilBlockNumber(uint256)\":{\"notice\":\"Creates epochs up to specified block\"},\"overrideEpochDlpsTotalStakesScore((uint256,uint256,uint256))\":{\"notice\":\"Overrides stake scores for DLPs in past epochs\"},\"saveEpochDlpsTotalStakesScore((uint256,uint256,uint256)[])\":{\"notice\":\"Updates stake scores for DLPs in past epochs\"},\"saveEpochDlpsTotalStakesScoreForce(uint256,uint256)\":{\"notice\":\"Updates stake scores for DLPs in past epochs\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rootEpoch/DLPRootEpochImplementation.sol\":\"DLPRootEpochImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/root/interfaces/IDLPRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\nimport {IDLPRootTreasury} from \\\"../../rootTreasury/interfaces/IDLPRootTreasury.sol\\\";\\n\\ninterface IDLPRoot {\\n    struct Stake {\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock; // 0 if active\\n        bool withdrawn;\\n        uint256 lastClaimedIndexEpochId; //todo: rename to lastClaimedEpochId\\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\\n        uint256 movedAmount; // Amount moved to new stake\\n    }\\n\\n    struct Staker {\\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\\n        uint256 totalStakeAmount;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootCore() external view returns (IDLPRootCore);\\n    function dlpRootEpoch() external view returns (IDLPRootEpoch);\\n\\n    // Additional view functions\\n    function minStakeAmount() external view returns (uint256);\\n    function stakeWithdrawalDelay() external view returns (uint256);\\n    function rewardClaimDelay() external view returns (uint256);\\n\\n    function stakersListCount() external view returns (uint256);\\n    function stakersListAt(uint256 index) external view returns (address);\\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\\n    function stakesCount() external view returns (uint256);\\n\\n    struct StakeInfo {\\n        uint256 id;\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        bool withdrawn;\\n        uint256 lastClaimedEpochId;\\n    }\\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\\n\\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\\n    function calculateStakeScore(\\n        uint256 stakeAmount,\\n        uint256 stakeStartBlock,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\\n    function updateDlpRootCore(address newDlpRootCoreAddress) external;\\n    function updateDlpRootEpoch(address newDlpRootEpochAddress) external;\\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\\n\\n    // Staking and rewards\\n    function createStake(uint256 dlpId) external payable;\\n    function createStakeOnBehalf(uint256 dlpId, address stakeOwner) external payable;\\n    function closeStakes(uint256[] memory stakeIds) external;\\n    function withdrawStakes(uint256[] memory stakeIds) external;\\n    function migrateStake(uint256 stakeId, uint256 newDlpId, uint256 newAmount) external;\\n    function claimStakesReward(uint256[] memory stakeIds) external;\\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\\n}\\n\",\"keccak256\":\"0x0ae279e92abc09eb9ab54021b326ec3edb0ca951990c1e8e9a5d8e9c99dd47d6\",\"license\":\"MIT\"},\"contracts/root/interfaces/IDLPRootOld.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\nimport {IDLPRootTreasury} from \\\"../../rootTreasury/interfaces/IDLPRootTreasury.sol\\\";\\n\\ninterface IDLPRootOld {\\n    // DLP lifecycle states from registration to deregistration\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Eligible, // Can participate in epochs\\n        SubEligible, // Below threshold but above minimum\\n        Deregistered\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress; // Receives non-staker rewards\\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\\n        Checkpoints.Trace208 unstakeAmountCheckpoints; // Historical unstake amounts\\n        uint256 epochIdsCount; // Number of participated epochs\\n        mapping(uint256 index => uint256 epochIds) epochIds;\\n        bool isVerified;\\n    }\\n\\n    struct EpochDlp {\\n        uint256 rewardAmount; // Rewards allocated to the DLP owner\\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\\n        uint256 totalStakesScore; // Sum of weighted stake scores\\n        bool rewardClaimed; // True if reward has been claimed\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    struct Stake {\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock; // 0 if active\\n        bool withdrawn;\\n        uint256 lastClaimedIndexEpochId;\\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\\n    }\\n\\n    struct Staker {\\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\\n        uint256 totalStakeAmount;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\\n    function epochDlpsLimit() external view returns (uint256);\\n    function eligibleDlps() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function daySize() external view returns (uint256);\\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\\n    function eligibleDlpsListCount() external view returns (uint256);\\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\\n    function epochsCount() external view returns (uint256);\\n\\n    // Read-only struct views\\n    struct EpochInfo {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n\\n    // Additional view functions\\n    function minStakeAmount() external view returns (uint256);\\n    function minDlpStakersPercentage() external view returns (uint256);\\n    function maxDlpStakersPercentage() external view returns (uint256);\\n    function minDlpRegistrationStake() external view returns (uint256);\\n    function dlpEligibilityThreshold() external view returns (uint256);\\n    function dlpSubEligibilityThreshold() external view returns (uint256);\\n    function eligibleDlpsLimit() external view returns (uint256);\\n    function stakeWithdrawalDelay() external view returns (uint256);\\n    function rewardClaimDelay() external view returns (uint256);\\n    function epochRewardAmount() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n\\n    struct DlpInfo {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address treasuryAddress;\\n        uint256 stakersPercentage;\\n        uint256 stakersPercentageEpoch;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 stakeAmount;\\n        uint256[] epochIds;\\n        bool isVerified;\\n    }\\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\\n\\n    struct DlpEpochInfo {\\n        uint256 stakeAmount; // 0 if not a top DLP\\n        bool isTopDlp; // In top DLPs list this epoch\\n        uint256 rewardAmount; // 0 if not top DLP or epoch not finished\\n        uint256 stakersPercentage; // 0 if not top DLP\\n        uint256 totalStakesScore; // 0 if not top DLP\\n        bool rewardClaimed;\\n        uint256 stakersRewardAmount;\\n    }\\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view returns (DlpEpochInfo memory);\\n    function stakersListCount() external view returns (uint256);\\n    function stakersListAt(uint256 index) external view returns (address);\\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\\n    function stakesCount() external view returns (uint256);\\n\\n    struct StakeInfo {\\n        uint256 id;\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        bool withdrawn;\\n        uint256 lastClaimedEpochId;\\n    }\\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\\n\\n    // Core functionality\\n    function topDlpIds(uint256 numberOfDlps) external returns (uint256[] memory);\\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\\n    function calculateStakeScore(\\n        uint256 stakeAmount,\\n        uint256 stakeStartBlock,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n\\n    struct DlpRewardApy {\\n        uint256 dlpId;\\n        uint256 APY; //annual percentage yield for stakers\\n        uint256 EPY; //epoch percentage yield for stakers\\n    }\\n\\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\\n    function updateDlpStakersPercentages(\\n        uint256 newMinDlpStakersPercentage,\\n        uint256 newMaxDlpStakersPercentage\\n    ) external;\\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\\n    function updateDlpEligibilityThresholds(\\n        uint256 newDlpSubEligibilityThreshold,\\n        uint256 newDlpEligibilityThreshold\\n    ) external;\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\\n\\n    struct EpochDlpsTotalStakesScore {\\n        uint256 epochId;\\n        uint256 dlpId;\\n        uint256 totalStakesScore;\\n    }\\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\\n\\n    // Epoch management\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n    struct EpochDlpReward {\\n        uint256 dlpId;\\n        uint256 rewardAmount;\\n        uint256 stakersRewardAmount;\\n    }\\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\\n\\n    struct DlpRegistration {\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress;\\n        uint256 stakersPercentage;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n    }\\n\\n    // DLP lifecycle management\\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\\n    function updateDlpVerificationBlock(uint256 dlpId, bool isVerified) external;\\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\\n    function deregisterDlp(uint256 dlpId) external;\\n\\n    // Staking and rewards\\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\\n    function claimStakesReward(uint256[] memory stakeIds) external;\\n    function createStake(uint256 dlpId) external payable;\\n    function closeStakes(uint256[] memory stakeIds) external;\\n    function withdrawStakes(uint256[] memory stakeIds) external;\\n}\\n\",\"keccak256\":\"0x124fd0ab18493f44d7e5d646fcad76d02eaf3eac3969f86446e51335d62e24b4\",\"license\":\"MIT\"},\"contracts/rootCore/interfaces/IDLPRootCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\n\\ninterface IDLPRootCore {\\n    // DLP lifecycle states from registration to deregistration\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Eligible, // Can participate in epochs\\n        SubEligible, // Below threshold but above minimum\\n        Deregistered\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress; // Receives non-staker rewards\\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\\n        bool isVerified;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\\n    function eligibleDlpsListCount() external view returns (uint256);\\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\\n\\n    function minDlpStakersPercentage() external view returns (uint256);\\n    function maxDlpStakersPercentage() external view returns (uint256);\\n    function minDlpRegistrationStake() external view returns (uint256);\\n    function dlpEligibilityThreshold() external view returns (uint256);\\n    function dlpSubEligibilityThreshold() external view returns (uint256);\\n    function eligibleDlpsLimit() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n\\n    struct DlpInfo {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address treasuryAddress;\\n        uint256 stakersPercentage;\\n        uint256 stakersPercentageEpoch;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 stakeAmount;\\n        bool isVerified;\\n    }\\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\\n\\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateDlpStakersPercentages(\\n        uint256 newMinDlpStakersPercentage,\\n        uint256 newMaxDlpStakersPercentage\\n    ) external;\\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\\n    function updateDlpEligibilityThresholds(\\n        uint256 newDlpSubEligibilityThreshold,\\n        uint256 newDlpEligibilityThreshold\\n    ) external;\\n    function updateDlpRoot(address newDlpRootAddress) external;\\n\\n    struct DlpRegistration {\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress;\\n        uint256 stakersPercentage;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n    }\\n\\n    // DLP lifecycle management\\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\\n    function updateDlpVerificationBlock(uint256 dlpId, bool isVerified) external;\\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\\n    function deregisterDlp(uint256 dlpId) external;\\n    function addDlpStake(uint256 dlpId, uint256 amount) external;\\n    function removeDlpStake(uint256 dlpId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdc0424a154d6e9bd25602d93a59a000e03760853d0c864d371078c1dc20af17b\",\"license\":\"MIT\"},\"contracts/rootEpoch/DLPRootEpochImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/DLPRootEpochStorageV1.sol\\\";\\nimport {IDLPRootOld} from \\\"../root/interfaces/IDLPRootOld.sol\\\";\\n\\ncontract DLPRootEpochImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DLPRootEpochStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant DLP_ROOT_METRICS_ROLE = keccak256(\\\"DLP_ROOT_METRICS_ROLE\\\");\\n\\n    event EpochCreated(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount);\\n    event EpochOverridden(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount);\\n    event EpochDlpsLimitUpdated(uint256 newEpochDlpsLimit);\\n    event EpochSizeUpdated(uint256 newEpochSize);\\n    event EpochRewardAmountUpdated(uint256 newEpochRewardAmount);\\n    event EpochDlpScoreSaved(uint256 indexed epochId, uint256 indexed dlpId, uint256 totalStakesScore);\\n    event DlpRewardClaimed(\\n        uint256 indexed dlpId,\\n        uint256 indexed epochId,\\n        uint256 ownerRewardAmount,\\n        uint256 stakersRewardAmount\\n    );\\n\\n    // Custom errors\\n    error InvalidParam();\\n    error InvalidStakeAmount();\\n    error StakeAlreadyWithdrawn();\\n    error StakeNotClosed();\\n    error StakeAlreadyClosed();\\n    error StakeWithdrawalTooEarly();\\n    error InvalidDlpId();\\n    error InvalidDlpStatus();\\n    error InvalidAddress();\\n    error InvalidName();\\n    error NotDlpOwner();\\n    error NotStakeOwner();\\n    error NothingToClaim();\\n    error InvalidStakersPercentage();\\n    error DlpAddressCannotBeChanged();\\n    error TransferFailed();\\n    error EpochNotEnded();\\n    error EpochDlpScoreAlreadySaved();\\n    error EpochRewardsAlreadyDistributed();\\n    error LastEpochMustBeFinalised();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address ownerAddress, address dlpRootAddress, uint256 daySizeInBlocks) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        dlpRoot = IDLPRoot(dlpRootAddress);\\n        daySize = daySizeInBlocks;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\\n        _grantRole(MANAGER_ROLE, ownerAddress);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function epochs(uint256 epochId) external view override returns (EpochInfo memory) {\\n        return\\n            EpochInfo({\\n                startBlock: _epochs[epochId].startBlock,\\n                endBlock: _epochs[epochId].endBlock,\\n                rewardAmount: _epochs[epochId].rewardAmount,\\n                isFinalised: _epochs[epochId].isFinalised,\\n                dlpIds: _epochs[epochId].dlpIds.values()\\n            });\\n    }\\n\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view override returns (EpochDlpInfo memory) {\\n        Epoch storage epoch = _epochs[epochId];\\n        EpochDlp memory epochDlp = epoch.dlps[dlpId];\\n\\n        IDLPRootCore.DlpInfo memory dlp = dlpRoot.dlpRootCore().dlps(dlpId);\\n\\n        return\\n            EpochDlpInfo({\\n                stakeAmount: dlpRoot.dlpRootCore().dlpEpochStakeAmount(dlpId, uint48(epochId)),\\n                isTopDlp: epoch.dlpIds.contains(dlpId),\\n                ownerRewardAmount: epochDlp.ownerRewardAmount,\\n                stakersPercentage: dlp.stakersPercentageEpoch,\\n                totalStakesScore: epochDlp.totalStakesScore,\\n                rewardClaimed: epochDlp.rewardClaimed,\\n                stakersRewardAmount: epochDlp.stakersRewardAmount\\n            });\\n    }\\n\\n    function epochDlpStakeAmount(uint256 epochId, uint256 dlpId) external view override returns (uint256) {\\n        return dlpRoot.dlpRootCore().dlpEpochStakeAmount(dlpId, uint48(epochId));\\n    }\\n\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external override onlyRole(MAINTAINER_ROLE) {\\n        epochDlpsLimit = newEpochDlpsLimit;\\n        emit EpochDlpsLimitUpdated(newEpochDlpsLimit);\\n    }\\n\\n    function updateEpochSize(uint256 newEpochSize) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        epochSize = newEpochSize;\\n        emit EpochSizeUpdated(newEpochSize);\\n    }\\n\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        epochRewardAmount = newEpochRewardAmount;\\n        emit EpochRewardAmountUpdated(newEpochRewardAmount);\\n    }\\n\\n    function updateDlpRoot(address newDlpRootAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        dlpRoot = IDLPRoot(newDlpRootAddress);\\n    }\\n\\n    function overrideEpoch(\\n        uint256 epochId,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        uint256 rewardAmount\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        Epoch storage epoch = _epochs[epochId];\\n        epoch.startBlock = startBlock;\\n        epoch.endBlock = endBlock;\\n        epoch.rewardAmount = rewardAmount;\\n\\n        emit EpochOverridden(epochId, startBlock, endBlock, rewardAmount);\\n    }\\n\\n    function distributeEpochRewards(\\n        uint256 epochId,\\n        EpochDlpReward[] memory epochDlpRewards\\n    ) external override onlyRole(DLP_ROOT_METRICS_ROLE) {\\n        Epoch storage epoch = _epochs[epochId];\\n\\n        epoch.isFinalised = true;\\n\\n        uint256 index;\\n        uint256 dlpId;\\n        EpochDlp storage epochDlp;\\n        //        Dlp storage dlp;\\n\\n        uint256 epochDlpsCount = epochDlpRewards.length;\\n\\n        // Distribute rewards\\n        for (index = 0; index < epochDlpsCount; ) {\\n            dlpId = epochDlpRewards[index].dlpId;\\n\\n            epoch.dlpIds.add(dlpId);\\n\\n            epochDlp = epoch.dlps[dlpId];\\n            epochDlp.ownerRewardAmount = epochDlpRewards[index].ownerRewardAmount;\\n            epochDlp.stakersRewardAmount = epochDlpRewards[index].stakersRewardAmount;\\n\\n            //            bool success = dlpRootRewardsTreasury.transferVana(\\n            //                dlp.treasuryAddress,\\n            //                epochDlpRewards[index].rewardAmount\\n            //            );\\n\\n            bool success = dlpRoot.dlpRootRewardsTreasury().transferVana(\\n                dlpRoot.dlpRootMetrics().foundationWalletAddress(),\\n                epochDlpRewards[index].ownerRewardAmount\\n            );\\n\\n            if (success) {\\n                epochDlp.rewardClaimed = epochDlpRewards[index].ownerRewardAmount;\\n\\n                emit DlpRewardClaimed(\\n                    dlpId,\\n                    epochId,\\n                    epochDlpRewards[index].ownerRewardAmount,\\n                    epochDlpRewards[index].stakersRewardAmount\\n                );\\n            } else {\\n                //just skip this DLP; it will be fixed manually\\n            }\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates stake scores for DLPs in past epochs\\n     */\\n    function saveEpochDlpsTotalStakesScoreForce(\\n        uint256 epochIdStart,\\n        uint256 epochIdEnd\\n    ) external onlyRole(MANAGER_ROLE) {\\n        for (uint256 i = epochIdStart; i <= epochIdEnd; ) {\\n            EpochDlp storage epochDlp1 = _epochs[i].dlps[1];\\n            EpochDlp storage epochDlp3 = _epochs[i].dlps[3];\\n\\n            epochDlp1.totalStakesScore = 692962333817108072900000;\\n            epochDlp3.totalStakesScore = 369573331495500018900000;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates stake scores for DLPs in past epochs\\n     */\\n    function saveEpochDlpsTotalStakesScore(\\n        EpochDlpsTotalStakesScore[] memory stakeScore\\n    ) external override onlyRole(MANAGER_ROLE) {\\n        for (uint256 i = 0; i < stakeScore.length; ) {\\n            Epoch storage epoch = _epochs[stakeScore[i].epochId];\\n            EpochDlp storage epochDlp = epoch.dlps[stakeScore[i].dlpId];\\n\\n            IDLPRootCore.DlpInfo memory dlp = dlpRoot.dlpRootCore().dlps(stakeScore[i].dlpId);\\n\\n            if (dlp.dlpAddress == address(0)) {\\n                revert InvalidDlpId();\\n            }\\n\\n            if (epoch.endBlock > block.number || epoch.startBlock == 0) {\\n                revert EpochNotEnded();\\n            }\\n\\n            if (epochDlp.totalStakesScore != 0) {\\n                revert EpochDlpScoreAlreadySaved();\\n            }\\n\\n            epochDlp.totalStakesScore = stakeScore[i].totalStakesScore;\\n\\n            emit EpochDlpScoreSaved(stakeScore[i].epochId, stakeScore[i].dlpId, stakeScore[i].totalStakesScore);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Overrides stake scores for DLPs in past epochs\\n     */\\n    function overrideEpochDlpsTotalStakesScore(\\n        EpochDlpsTotalStakesScore memory stakeScore\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        Epoch storage epoch = _epochs[stakeScore.epochId];\\n\\n        IDLPRootCore.DlpInfo memory dlp = dlpRoot.dlpRootCore().dlps(stakeScore.dlpId);\\n        if (dlp.dlpAddress == address(0)) {\\n            revert InvalidDlpId();\\n        }\\n\\n        if (epoch.endBlock > block.number || epoch.startBlock == 0) {\\n            revert EpochNotEnded();\\n        }\\n\\n        epoch.dlps[stakeScore.dlpId].totalStakesScore = stakeScore.totalStakesScore;\\n\\n        emit EpochDlpScoreSaved(stakeScore.epochId, stakeScore.dlpId, stakeScore.totalStakesScore);\\n    }\\n\\n    /**\\n     * @notice Creates epochs up to current block\\n     */\\n    function createEpochs() external override nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(block.number);\\n    }\\n\\n    /**\\n     * @notice Creates epochs up to specified block\\n     */\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external override nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(blockNumber < block.number ? blockNumber : block.number);\\n    }\\n\\n    /**\\n     * @notice Creates and finalises epochs up to target block\\n     */\\n    function _createEpochsUntilBlockNumber(uint256 blockNumber) internal {\\n        Epoch storage lastEpoch = _epochs[epochsCount];\\n\\n        if (lastEpoch.endBlock > block.number) {\\n            return;\\n        }\\n\\n        while (lastEpoch.endBlock < blockNumber) {\\n            Epoch storage newEpoch = _epochs[++epochsCount];\\n            newEpoch.startBlock = lastEpoch.endBlock + 1;\\n            newEpoch.endBlock = newEpoch.startBlock + epochSize - 1;\\n            newEpoch.rewardAmount = epochRewardAmount;\\n\\n            emit EpochCreated(epochsCount, newEpoch.startBlock, newEpoch.endBlock, newEpoch.rewardAmount);\\n            lastEpoch = newEpoch;\\n        }\\n    }\\n\\n    function migrateParametersData() external onlyRole(MANAGER_ROLE) {\\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\\n\\n        epochDlpsLimit = dlpRootOld.epochDlpsLimit();\\n        epochRewardAmount = dlpRootOld.epochRewardAmount();\\n        epochSize = dlpRootOld.epochSize();\\n        daySize = dlpRootOld.daySize();\\n        epochsCount = dlpRootOld.epochsCount();\\n    }\\n\\n    function migrateEpochData(uint256 epochIdStart, uint256 epochIdEnd) external onlyRole(MANAGER_ROLE) {\\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\\n\\n        uint256 dlpsCount = dlpRootOld.dlpsCount();\\n\\n        for (uint256 epochId = epochIdStart; epochId <= epochIdEnd; ) {\\n            Epoch storage epoch = _epochs[epochId];\\n            IDLPRootOld.EpochInfo memory epochInfo = dlpRootOld.epochs(epochId);\\n\\n            epoch.startBlock = epochInfo.startBlock;\\n            epoch.endBlock = epochInfo.endBlock;\\n            epoch.rewardAmount = epochInfo.rewardAmount;\\n            epoch.isFinalised = epochInfo.isFinalised;\\n\\n            uint256 dlpId;\\n            uint256 epochDlpIdsCount = epochInfo.dlpIds.length;\\n            for (dlpId = 0; dlpId < epochDlpIdsCount; ) {\\n                epoch.dlpIds.add(epochInfo.dlpIds[dlpId]);\\n\\n                unchecked {\\n                    ++dlpId;\\n                }\\n            }\\n\\n            for (dlpId = 1; dlpId <= dlpsCount; ) {\\n                IDLPRootOld.DlpEpochInfo memory dlpEpoch = dlpRootOld.dlpEpochs(dlpId, epochId);\\n                EpochDlp storage epochDlp = epoch.dlps[dlpId];\\n\\n                epochDlp.ownerRewardAmount = dlpEpoch.rewardAmount;\\n                epochDlp.stakersRewardAmount = dlpEpoch.stakersRewardAmount;\\n                epochDlp.totalStakesScore = dlpEpoch.totalStakesScore;\\n                epochDlp.rewardClaimed = dlpEpoch.rewardClaimed ? dlpEpoch.rewardAmount : 0;\\n\\n                unchecked {\\n                    ++dlpId;\\n                }\\n            }\\n\\n            unchecked {\\n                ++epochId;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6759933be463da3b806cadfecfde3a32b20b9529a56b3316eb623343bc28247\",\"license\":\"MIT\"},\"contracts/rootEpoch/interfaces/DLPRootEpochStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./IDLPRootEpoch.sol\\\";\\n\\nabstract contract DLPRootEpochStorageV1 is IDLPRootEpoch {\\n    IDLPRoot public override dlpRoot;\\n\\n    uint256 public override epochDlpsLimit; // Max DLPs per epoch\\n\\n    uint256 public override epochRewardAmount; // Rewards per epoch\\n    uint256 public override epochSize; // Blocks per epoch\\n    uint256 public override daySize; // Blocks per day\\n\\n    // Epoch tracking\\n    uint256 public override epochsCount;\\n    mapping(uint256 epochId => Epoch epoch) internal _epochs;\\n}\\n\",\"keccak256\":\"0xc8244689320a87edc120c9dcffdda5075191aea624a44f5498d7eca4095f8161\",\"license\":\"MIT\"},\"contracts/rootEpoch/interfaces/IDLPRootEpoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\n\\ninterface IDLPRootEpoch {\\n    struct EpochDlp {\\n        uint256 ownerRewardAmount; // Rewards allocated to the DLP owner\\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\\n        uint256 totalStakesScore; // Sum of weighted stake scores\\n        uint256 rewardClaimed; // True if reward has been claimed\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function epochDlpsLimit() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function daySize() external view returns (uint256);\\n    function epochsCount() external view returns (uint256);\\n\\n    // Read-only struct views\\n    struct EpochInfo {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function epochRewardAmount() external view returns (uint256);\\n\\n    struct EpochDlpInfo {\\n        uint256 stakeAmount; // 0 if not a top DLP\\n        bool isTopDlp; // In top DLPs list this epoch\\n        uint256 ownerRewardAmount; // 0 if not top DLP or epoch not finished\\n        uint256 stakersPercentage; // 0 if not top DLP\\n        uint256 totalStakesScore; // 0 if not top DLP\\n        uint256 rewardClaimed;\\n        uint256 stakersRewardAmount;\\n    }\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\\n\\n    function epochDlpStakeAmount(uint256 epochId, uint256 dlpId) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n\\n    function updateDlpRoot(address newDlpRootAddress) external;\\n\\n    struct EpochDlpsTotalStakesScore {\\n        uint256 epochId;\\n        uint256 dlpId;\\n        uint256 totalStakesScore;\\n    }\\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\\n\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n    struct EpochDlpReward {\\n        uint256 dlpId;\\n        uint256 ownerRewardAmount;\\n        uint256 stakersRewardAmount;\\n    }\\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\\n}\\n\",\"keccak256\":\"0x2cb595764099116d4e0356f35fd40fcb6f31b3408af16461e2e6b1c8ee60e23d\",\"license\":\"MIT\"},\"contracts/rootMetrics/interfaces/IDLPRootMetrics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\n\\ninterface IDLPRootMetrics {\\n    enum RatingType {\\n        Stake,\\n        Performance\\n    }\\n    struct EpochDlp {\\n        uint256 performanceRating;\\n        uint256 stakeAmountAdjustment;\\n    }\\n\\n    struct Epoch {\\n        uint256 totalPerformanceRating;\\n        bool finalized; //deprecated\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    struct DlpRating {\\n        uint256 dlpId;\\n        uint256 rating;\\n    }\\n\\n    struct EpochInfo {\\n        uint256 totalPerformanceRating;\\n        bool finalized;\\n    }\\n\\n    struct EpochDlpInfo {\\n        uint256 performanceRating;\\n        uint256 stakeAmountAdjustment;\\n    }\\n\\n    struct DlpPerformanceRating {\\n        uint256 dlpId;\\n        uint256 performanceRating;\\n    }\\n\\n    struct StakeClaimableReward {\\n        uint256 totalClaimableAmount;\\n        StakeClaimableEpochReward[] stakeClaimableEpochRewards;\\n    }\\n\\n    struct StakeClaimableEpochReward {\\n        uint256 epochId;\\n        uint256 claimableAmount;\\n        bool fullRewardAmount;\\n    }\\n\\n    struct DlpRewardApy {\\n        uint256 dlpId;\\n        uint256 APY; //annual percentage yield for stakers\\n        uint256 EPY; //epoch percentage yield for stakers\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function foundationWalletAddress() external view returns (address payable);\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\\n    function ratingPercentages(RatingType rating) external view returns (uint256);\\n    function topDlpsCustomized(\\n        uint256 epochId,\\n        uint256 numberOfDlps,\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) external view returns (DlpRating[] memory);\\n    function topDlps(uint256 numberOfDlps) external view returns (DlpRating[] memory);\\n    function topDlpIds(uint256 numberOfDlps) external view returns (uint256[] memory);\\n    function estimatedDlpRewardPercentagesCustomized(\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) external view returns (DlpRewardApy[] memory);\\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\\n    function getMultiplier(uint256 index) external pure returns (uint256);\\n    function pause() external;\\n    function unpause() external;\\n    function updateDlpRoot(address dlpRootAddress) external;\\n    function updateFoundationWalletAddress(address payable newFoundationWalletAddress) external;\\n    function updateEpochDlpStakeAmountAdjustment(\\n        uint256 epochId,\\n        uint256 dlpId,\\n        uint256 adjustment,\\n        bool isAddition\\n    ) external;\\n    function saveEpochPerformanceRatings(uint256 epochId, DlpPerformanceRating[] memory dlpPerformanceRatings) external;\\n    function finalizeEpoch(uint256 epochId) external;\\n    function updateRatingPercentages(uint256 stakeRatingPercentage, uint256 performanceRatingPercentage) external;\\n}\\n\",\"keccak256\":\"0xc0d4f350c973e1d37dd51532e30a141492cf8fba9a18080123ddadf3d93d1f77\",\"license\":\"MIT\"},\"contracts/rootTreasury/interfaces/IDLPRootTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\n\\ninterface IDLPRootTreasury {\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function updateDlpRoot(address dlpRootAddress) external;\\n    function transferVana(address payable to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x88522b520c42c31138c1db9d9cbd38a0ccbfc03cfabf75ced0c727b0b0e8a5d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000da565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000775760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6080516130346200010460003960008181611eff01528181611f28015261206c01526130346000f3fe6080604052600436106101cb5760003560e01c806301159c70146101d057806301ffc9a7146101f2578063132c58e9146102275780631794bb3c1461024b5780631db40d051461026b5780631eb69d3e1461028b5780632420e688146102ab57806324404fa7146102cb578063248a9ca3146102f85780632f2ff15d14610318578063319fe36b1461033857806336568abe146103585780633f4ba83a146103785780634f1ef2861461038d5780635266aa90146103a057806352d1902d146103c257806354fd4d50146103d7578063572d356e146103eb5780635c975abb146104015780635d342e98146104165780636b289f5b1461042b57806376bc98691461044b5780638456cb5914610460578063916e1c571461047557806391d148541461048b578063a217fddf146104ab578063aa374898146104c0578063ad3cb1cc146104e0578063b3a7b9da1461051e578063b8ba985c14610596578063c53036f4146105b6578063c6b61e4c146105cc578063cd0081a7146105f9578063d4e0187214610619578063d547741f14610639578063d7033ca014610659578063e7de50411461066f578063eaeb2ec81461068f578063ec87621c146106af578063f8742254146106d1575b600080fd5b3480156101dc57600080fd5b506101f06101eb3660046125e4565b6106f3565b005b3480156101fe57600080fd5b5061021261020d366004612601565b61072e565b60405190151581526020015b60405180910390f35b34801561023357600080fd5b5061023d60025481565b60405190815260200161021e565b34801561025757600080fd5b506101f061026636600461262b565b610765565b34801561027757600080fd5b506101f061028636600461266c565b6108d4565b34801561029757600080fd5b506101f06102a636600461266c565b610947565b3480156102b757600080fd5b5061023d6102c636600461266c565b610bcb565b3480156102d757600080fd5b506000546102eb906001600160a01b031681565b60405161021e919061268e565b34801561030457600080fd5b5061023d6103133660046126a2565b610cb8565b34801561032457600080fd5b506101f06103333660046126bb565b610cd8565b34801561034457600080fd5b506101f06103533660046127d7565b610cf4565b34801561036457600080fd5b506101f06103733660046126bb565b610ea9565b34801561038457600080fd5b506101f0610ee1565b6101f061039b36600461281a565b610f04565b3480156103ac57600080fd5b5061023d600080516020612fbf83398151915281565b3480156103ce57600080fd5b5061023d610f23565b3480156103e357600080fd5b50600161023d565b3480156103f757600080fd5b5061023d60035481565b34801561040d57600080fd5b50610212610f40565b34801561042257600080fd5b506101f0610f55565b34801561043757600080fd5b506101f06104463660046126a2565b611183565b34801561045757600080fd5b506101f06111cb565b34801561046c57600080fd5b506101f06111ee565b34801561048157600080fd5b5061023d60055481565b34801561049757600080fd5b506102126104a63660046126bb565b61120e565b3480156104b757600080fd5b5061023d600081565b3480156104cc57600080fd5b506101f06104db3660046126a2565b611244565b3480156104ec57600080fd5b50610511604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161021e91906128d0565b34801561052a57600080fd5b5061053e61053936600461266c565b611291565b60405161021e9190600060e0820190508251825260208301511515602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b3480156105a257600080fd5b506101f06105b1366004612903565b61152f565b3480156105c257600080fd5b5061023d60015481565b3480156105d857600080fd5b506105ec6105e73660046126a2565b6115ad565b60405161021e9190612935565b34801561060557600080fd5b506101f0610614366004612a2e565b611642565b34801561062557600080fd5b506101f06106343660046126a2565b6119ab565b34801561064557600080fd5b506101f06106543660046126bb565b6119eb565b34801561066557600080fd5b5061023d60045481565b34801561067b57600080fd5b506101f061068a366004612a88565b611a07565b34801561069b57600080fd5b506101f06106aa3660046126a2565b611cd0565b3480156106bb57600080fd5b5061023d600080516020612f9f83398151915281565b3480156106dd57600080fd5b5061023d600080516020612fdf83398151915281565b600080516020612fdf83398151915261070b81611cfe565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061075f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061076f611d08565b805490915060ff600160401b82041615906001600160401b03166000811580156107965750825b90506000826001600160401b031660011480156107b25750303b155b9050811580156107c0575080155b156107de5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561080757845460ff60401b1916600160401b1785555b61080f611d2c565b610817611d2c565b61081f611d34565b610827611d44565b600080546001600160a01b0319166001600160a01b03891617815560048790556108519089611d54565b5061086a600080516020612fdf83398151915289611d54565b50610883600080516020612f9f83398151915289611d54565b5083156108ca57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600080516020612f9f8339815191526108ec81611cfe565b825b828111610941576000818152600660208181526040808420600180865293019091528083206003845292206992bd903a3edcf0ea25a0600293840155694e429c461fba32b85c20920191909155016108ee565b50505050565b600080516020612f9f83398151915261095f81611cfe565b60008054604080516368ed41ed60e01b815290516001600160a01b03909216929183916368ed41ed9160048083019260209291908290030181865afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190612ad8565b9050845b848111610bc35760008181526006602052604080822090516331ad879360e21b8152600481018490529091906001600160a01b0386169063c6b61e4c90602401600060405180830381865afa158015610a31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a599190810190612b06565b805183556020810151600184015560408101516002840155606081015160038401805460ff19169115159190911790556080810151519091506000905b80821015610add57610ad183608001518381518110610ab757610ab7612bf7565b602002602001015185600401611df590919063ffffffff16565b50816001019150610a96565b600191505b858211610bb457604051630ab9444d60e21b815260048101839052602481018690526000906001600160a01b03891690632ae511349060440160e060405180830381865afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190612c0d565b60008481526006870160205260409081902090820151815560c082015160018201556080820151600282015560a082015191925090610b9c576000610ba2565b81604001515b60039091015550600190910190610ae2565b846001019450505050506109d4565b505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190612c9c565b6001600160a01b031663e5c8307d83856040518363ffffffff1660e01b8152600401610c70929190612cb9565b602060405180830381865afa158015610c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb19190612ad8565b9392505050565b600080610cc3611e01565b60009384526020525050604090206001015490565b610ce182610cb8565b610cea81611cfe565b6109418383611d54565b600080516020612fdf833981519152610d0c81611cfe565b8151600090815260066020908152604080832083548251630dd97a2960e11b815292519194936001600160a01b0390911692631bb2f45292600480830193928290030181865afa158015610d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d889190612c9c565b6001600160a01b031663ea83e47b85602001516040518263ffffffff1660e01b8152600401610db991815260200190565b600060405180830381865afa158015610dd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dfe9190810190612d2e565b60208101519091506001600160a01b0316610e2c576040516306358e4f60e11b815260040160405180910390fd5b4382600101541180610e3d57508154155b15610e5b5760405163756b785760e01b815260040160405180910390fd5b6040848101805160208088018051600090815260068801835285902060020192909255905187519251935193845292600080516020612f5f833981519152910160405180910390a350505050565b6001600160a01b0381163314610ed25760405163334bd91960e11b815260040160405180910390fd5b610edc8282611e25565b505050565b600080516020612fdf833981519152610ef981611cfe565b610f01611e9d565b50565b610f0c611ef4565b610f1582611f99565b610f1f8282611fa4565b5050565b6000610f2d612061565b50600080516020612f7f83398151915290565b600080610f4b6120aa565b5460ff1692915050565b600080516020612f9f833981519152610f6d81611cfe565b6000546040805163314c0dbd60e21b815290516001600160a01b0390921691829163c53036f49160048083019260209291908290030181865afa158015610fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdc9190612ad8565b600181905550806001600160a01b031663132c58e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110449190612ad8565b600281905550806001600160a01b031663572d356e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190612ad8565b600381905550806001600160a01b031663d7033ca06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190612ad8565b600481905550806001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015611158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117c9190612ad8565b6005555050565b600061118e81611cfe565b60028290556040518281527f2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb906020015b60405180910390a15050565b6111d36120ce565b6111db612104565b6111e44361212a565b6111ec612205565b565b600080516020612fdf83398151915261120681611cfe565b610f01612216565b600080611219611e01565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b600080516020612fdf83398151915261125c81611cfe565b60018290556040518281527f8c3ee37d01ee5f42c88d7ff11c34795aa06e1e65f21e3813d00e101f3c3d614f906020016111bf565b6112d36040518060e001604052806000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008381526006602081815260408084208685529283018252808420815160808101835281548152600182015481850152600282015481840152600390910154606082015284548251630dd97a2960e11b815292519495919491936001600160a01b0390911692631bb2f45292600480830193928290030181865afa158015611360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113849190612c9c565b6001600160a01b031663ea83e47b866040518263ffffffff1660e01b81526004016113b191815260200190565b600060405180830381865afa1580156113ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113f69190810190612d2e565b6040805160e08101808352600054630dd97a2960e11b90915291519293509182916001600160a01b031690631bb2f4529060e4808501916020918187030181865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190612c9c565b6001600160a01b031663e5c8307d888a6040518363ffffffff1660e01b815260040161149a929190612cb9565b602060405180830381865afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190612ad8565b81526020016114ed600486018861225d565b15158152602001836000015181526020018260a00151815260200183604001518152602001836060015181526020018360200151815250935050505092915050565b600080516020612fdf83398151915261154781611cfe565b60008581526006602052604090819020858155600181018590556002810184905590517f89e436b630f34f576d2e93decf8eb2e517099f1d0cecf50b785442eb6b4702cb9061159d908890889088908890612e9e565b60405180910390a1505050505050565b6115e16040518060a00160405280600081526020016000815260200160008152602001600015158152602001606081525090565b6040805160a08101825260008481526006602081815284832080548552600181015482860152600281015495850195909552600385015460ff161515606085015291869052905290608082019061163a90600401612269565b905292915050565b600080516020612fbf83398151915261165a81611cfe565b600083815260066020526040812060038101805460ff191660011790558351909190819081905b808410156108ca5786848151811061169b5761169b612bf7565b60209081029190910101515192506116b66004860184611df5565b506000838152600686016020526040902087519092508790859081106116de576116de612bf7565b602002602001015160200151826000018190555086848151811061170457611704612bf7565b602002602001015160400151826001018190555060008060009054906101000a90046001600160a01b03166001600160a01b0316639889a3036040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117909190612c9c565b6001600160a01b031663117511c960008054906101000a90046001600160a01b03166001600160a01b03166397f2746c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118139190612c9c565b6001600160a01b031663a59850ce6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190612c9c565b8a888151811061188657611886612bf7565b6020026020010151602001516040518363ffffffff1660e01b81526004016118af929190612eb9565b6020604051808303816000875af11580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f29190612ed2565b9050801561199f5787858151811061190c5761190c612bf7565b602002602001015160200151836003018190555088847fdca1e9e232cea851fef9f1dd12c75fd4ddbbfe8a7a6d724d80d4615b58b3a9bc8a888151811061195557611955612bf7565b6020026020010151602001518b898151811061197357611973612bf7565b602002602001015160400151604051611996929190918252602082015260400190565b60405180910390a35b84600101945050611681565b60006119b681611cfe565b60038290556040518281527f3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f58906020016111bf565b6119f482610cb8565b6119fd81611cfe565b6109418383611e25565b600080516020612f9f833981519152611a1f81611cfe565b60005b8251811015610edc57600060066000858481518110611a4357611a43612bf7565b602002602001015160000151815260200190815260200160002090506000816006016000868581518110611a7957611a79612bf7565b6020026020010151602001518152602001908152602001600020905060008060009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0d9190612c9c565b6001600160a01b031663ea83e47b878681518110611b2d57611b2d612bf7565b6020026020010151602001516040518263ffffffff1660e01b8152600401611b5791815260200190565b600060405180830381865afa158015611b74573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b9c9190810190612d2e565b60208101519091506001600160a01b0316611bca576040516306358e4f60e11b815260040160405180910390fd5b4383600101541180611bdb57508254155b15611bf95760405163756b785760e01b815260040160405180910390fd5b600282015415611c1c57604051634d40249960e01b815260040160405180910390fd5b858481518110611c2e57611c2e612bf7565b6020026020010151604001518260020181905550858481518110611c5457611c54612bf7565b602002602001015160200151868581518110611c7257611c72612bf7565b602002602001015160000151600080516020612f5f833981519152888781518110611c9f57611c9f612bf7565b602002602001015160400151604051611cba91815260200190565b60405180910390a3836001019350505050611a22565b611cd86120ce565b611ce0612104565b611cf6438210611cf0574361212a565b8161212a565b610f01612205565b610f018133612276565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6111ec6122a1565b611d3c6122a1565b6111ec6122c6565b611d4c6122a1565b6111ec6122ce565b600080611d5f611e01565b9050611d6b848461120e565b611deb576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611da13390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061075f565b600091505061075f565b6000610cb183836122eb565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b600080611e30611e01565b9050611e3c848461120e565b15611deb576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061075f565b611ea5612335565b6000611eaf6120aa565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611ee9919061268e565b60405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611f7b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611f6f600080516020612f7f833981519152546001600160a01b031690565b6001600160a01b031614155b156111ec5760405163703e46dd60e11b815260040160405180910390fd5b6000610f1f81611cfe565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611ffe575060408051601f3d908101601f19168201909252611ffb91810190612ad8565b60015b6120265781604051634c9c8ce360e01b815260040161201d919061268e565b60405180910390fd5b600080516020612f7f833981519152811461205757604051632a87526960e21b81526004810182905260240161201d565b610edc838361235a565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111ec5760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b60006120d86123b0565b8054909150600119016120fe57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b61210c610f40565b156111ec5760405163d93c066560e01b815260040160405180910390fd5b6005546000908152600660205260409020600181015443101561214b575050565b8181600101541015610f1f5760006006600060056000815461216c90612f03565b91905081905581526020019081526020016000209050816001015460016121939190612f1c565b8082556003546001916121a69190612f1c565b6121b09190612f2f565b600182018190556002805490830181905560055483546040517f017b1c583db0d753e82f5a7f7b94f64603f7e401eb2c40271a8edce1431cf09e946121f6949091612e9e565b60405180910390a1905061214b565b600061220f6123b0565b6001905550565b61221e612104565b60006122286120aa565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611edc3390565b6000610cb183836123d4565b60606000610cb1836123ec565b612280828261120e565b610f1f57808260405163e2517d3f60e01b815260040161201d929190612eb9565b6122a9612448565b6111ec57604051631afcd79f60e31b815260040160405180910390fd5b6122056122a1565b6122d66122a1565b60006122e06120aa565b805460ff1916905550565b60006122f783836123d4565b61232d5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561075f565b50600061075f565b61233d610f40565b6111ec57604051638dfc202b60e01b815260040160405180910390fd5b61236382612462565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156123a857610edc82826124be565b610f1f612534565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b60009081526001919091016020526040902054151590565b60608160000180548060200260200160405190810160405280929190818152602001828054801561243c57602002820191906000526020600020905b815481526020019060010190808311612428575b50505050509050919050565b6000612452611d08565b54600160401b900460ff16919050565b806001600160a01b03163b60000361248f5780604051634c9c8ce360e01b815260040161201d919061268e565b600080516020612f7f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516124db9190612f42565b600060405180830381855af49150503d8060008114612516576040519150601f19603f3d011682016040523d82523d6000602084013e61251b565b606091505b509150915061252b858383612553565b95945050505050565b34156111ec5760405163b398979f60e01b815260040160405180910390fd5b60608261256857612563826125a6565b610cb1565b815115801561257f57506001600160a01b0384163b155b1561259f5783604051639996b31560e01b815260040161201d919061268e565b5092915050565b8051156125b65780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114610f0157600080fd5b6000602082840312156125f657600080fd5b8135610cb1816125cf565b60006020828403121561261357600080fd5b81356001600160e01b031981168114610cb157600080fd5b60008060006060848603121561264057600080fd5b833561264b816125cf565b9250602084013561265b816125cf565b929592945050506040919091013590565b6000806040838503121561267f57600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6000602082840312156126b457600080fd5b5035919050565b600080604083850312156126ce57600080fd5b8235915060208301356126e0816125cf565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612723576127236126eb565b60405290565b6040516101c081016001600160401b0381118282101715612723576127236126eb565b604051601f8201601f191681016001600160401b0381118282101715612774576127746126eb565b604052919050565b60006060828403121561278e57600080fd5b604051606081016001600160401b03811182821017156127b0576127b06126eb565b80604052508091508235815260208301356020820152604083013560408201525092915050565b6000606082840312156127e957600080fd5b610cb1838361277c565b60006001600160401b0382111561280c5761280c6126eb565b50601f01601f191660200190565b6000806040838503121561282d57600080fd5b8235612838816125cf565b915060208301356001600160401b0381111561285357600080fd5b8301601f8101851361286457600080fd5b8035612877612872826127f3565b61274c565b81815286602083850101111561288c57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b838110156128c75781810151838201526020016128af565b50506000910152565b60208152600082518060208401526128ef8160408501602087016128ac565b601f01601f19169190910160400192915050565b6000806000806080858703121561291957600080fd5b5050823594602084013594506040840135936060013592509050565b6000602080835260c0830184518285015281850151604085015260408501516060850152606085015115156080850152608085015160a08086015281815180845260e0870191508483019350600092505b808310156129a65783518252928401926001929092019190840190612986565b509695505050505050565b60006001600160401b038211156129ca576129ca6126eb565b5060051b60200190565b60006129e2612872846129b1565b83815290506020808201906060808602850187811115612a0157600080fd5b855b81811015612a2257612a15898261277c565b8552938301938201612a03565b50505050509392505050565b60008060408385031215612a4157600080fd5b8235915060208301356001600160401b03811115612a5e57600080fd5b8301601f81018513612a6f57600080fd5b612a7e858235602084016129d4565b9150509250929050565b600060208284031215612a9a57600080fd5b81356001600160401b03811115612ab057600080fd5b8201601f81018413612ac157600080fd5b612ad0848235602084016129d4565b949350505050565b600060208284031215612aea57600080fd5b5051919050565b80518015158114612b0157600080fd5b919050565b60006020808385031215612b1957600080fd5b82516001600160401b0380821115612b3057600080fd5b9084019060a08287031215612b4457600080fd5b612b4c612701565b82518152838301518482015260408301516040820152612b6e60608401612af1565b6060820152608083015182811115612b8557600080fd5b80840193505086601f840112612b9a57600080fd5b82519150612baa612872836129b1565b82815260059290921b83018401918481019088841115612bc957600080fd5b938501935b83851015612be757845182529385019390850190612bce565b6080830152509695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060e08284031215612c1f57600080fd5b60405160e081016001600160401b0381118282101715612c4157612c416126eb565b60405282518152612c5460208401612af1565b6020820152604083015160408201526060830151606082015260808301516080820152612c8360a08401612af1565b60a082015260c083015160c08201528091505092915050565b600060208284031215612cae57600080fd5b8151610cb1816125cf565b91825265ffffffffffff16602082015260400190565b8051612b01816125cf565b600082601f830112612ceb57600080fd5b8151612cf9612872826127f3565b818152846020838601011115612d0e57600080fd5b612ad08260208301602087016128ac565b805160058110612b0157600080fd5b600060208284031215612d4057600080fd5b81516001600160401b0380821115612d5757600080fd5b908301906101c08286031215612d6c57600080fd5b612d74612729565b82518152612d8460208401612ccf565b6020820152612d9560408401612ccf565b6040820152612da660608401612ccf565b60608201526080830151608082015260a083015160a082015260c083015182811115612dd157600080fd5b612ddd87828601612cda565b60c08301525060e083015182811115612df557600080fd5b612e0187828601612cda565b60e0830152506101008084015183811115612e1b57600080fd5b612e2788828701612cda565b8284015250506101208084015183811115612e4157600080fd5b612e4d88828701612cda565b8284015250506101409150612e63828401612d1f565b91810191909152610160828101519082015261018080830151908201526101a090612e8f828401612af1565b91810191909152949350505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b03929092168252602082015260400190565b600060208284031215612ee457600080fd5b610cb182612af1565b634e487b7160e01b600052601160045260246000fd5b600060018201612f1557612f15612eed565b5060010190565b8082018082111561075f5761075f612eed565b8181038181111561075f5761075f612eed565b60008251612f548184602087016128ac565b919091019291505056fe948d378fa4c68569d2ecf922375e8845e879b43a1b882cc2b3aece8b76982f84360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08dd3964e50534514b3adc5c2d0d2c4a8426863ff4376360d48539e1f11b5b822f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220f5060e37005f5d00689fb0223f1e1d29b42f39df6229a40765eff90d0189342664736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101cb5760003560e01c806301159c70146101d057806301ffc9a7146101f2578063132c58e9146102275780631794bb3c1461024b5780631db40d051461026b5780631eb69d3e1461028b5780632420e688146102ab57806324404fa7146102cb578063248a9ca3146102f85780632f2ff15d14610318578063319fe36b1461033857806336568abe146103585780633f4ba83a146103785780634f1ef2861461038d5780635266aa90146103a057806352d1902d146103c257806354fd4d50146103d7578063572d356e146103eb5780635c975abb146104015780635d342e98146104165780636b289f5b1461042b57806376bc98691461044b5780638456cb5914610460578063916e1c571461047557806391d148541461048b578063a217fddf146104ab578063aa374898146104c0578063ad3cb1cc146104e0578063b3a7b9da1461051e578063b8ba985c14610596578063c53036f4146105b6578063c6b61e4c146105cc578063cd0081a7146105f9578063d4e0187214610619578063d547741f14610639578063d7033ca014610659578063e7de50411461066f578063eaeb2ec81461068f578063ec87621c146106af578063f8742254146106d1575b600080fd5b3480156101dc57600080fd5b506101f06101eb3660046125e4565b6106f3565b005b3480156101fe57600080fd5b5061021261020d366004612601565b61072e565b60405190151581526020015b60405180910390f35b34801561023357600080fd5b5061023d60025481565b60405190815260200161021e565b34801561025757600080fd5b506101f061026636600461262b565b610765565b34801561027757600080fd5b506101f061028636600461266c565b6108d4565b34801561029757600080fd5b506101f06102a636600461266c565b610947565b3480156102b757600080fd5b5061023d6102c636600461266c565b610bcb565b3480156102d757600080fd5b506000546102eb906001600160a01b031681565b60405161021e919061268e565b34801561030457600080fd5b5061023d6103133660046126a2565b610cb8565b34801561032457600080fd5b506101f06103333660046126bb565b610cd8565b34801561034457600080fd5b506101f06103533660046127d7565b610cf4565b34801561036457600080fd5b506101f06103733660046126bb565b610ea9565b34801561038457600080fd5b506101f0610ee1565b6101f061039b36600461281a565b610f04565b3480156103ac57600080fd5b5061023d600080516020612fbf83398151915281565b3480156103ce57600080fd5b5061023d610f23565b3480156103e357600080fd5b50600161023d565b3480156103f757600080fd5b5061023d60035481565b34801561040d57600080fd5b50610212610f40565b34801561042257600080fd5b506101f0610f55565b34801561043757600080fd5b506101f06104463660046126a2565b611183565b34801561045757600080fd5b506101f06111cb565b34801561046c57600080fd5b506101f06111ee565b34801561048157600080fd5b5061023d60055481565b34801561049757600080fd5b506102126104a63660046126bb565b61120e565b3480156104b757600080fd5b5061023d600081565b3480156104cc57600080fd5b506101f06104db3660046126a2565b611244565b3480156104ec57600080fd5b50610511604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161021e91906128d0565b34801561052a57600080fd5b5061053e61053936600461266c565b611291565b60405161021e9190600060e0820190508251825260208301511515602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b3480156105a257600080fd5b506101f06105b1366004612903565b61152f565b3480156105c257600080fd5b5061023d60015481565b3480156105d857600080fd5b506105ec6105e73660046126a2565b6115ad565b60405161021e9190612935565b34801561060557600080fd5b506101f0610614366004612a2e565b611642565b34801561062557600080fd5b506101f06106343660046126a2565b6119ab565b34801561064557600080fd5b506101f06106543660046126bb565b6119eb565b34801561066557600080fd5b5061023d60045481565b34801561067b57600080fd5b506101f061068a366004612a88565b611a07565b34801561069b57600080fd5b506101f06106aa3660046126a2565b611cd0565b3480156106bb57600080fd5b5061023d600080516020612f9f83398151915281565b3480156106dd57600080fd5b5061023d600080516020612fdf83398151915281565b600080516020612fdf83398151915261070b81611cfe565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061075f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061076f611d08565b805490915060ff600160401b82041615906001600160401b03166000811580156107965750825b90506000826001600160401b031660011480156107b25750303b155b9050811580156107c0575080155b156107de5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561080757845460ff60401b1916600160401b1785555b61080f611d2c565b610817611d2c565b61081f611d34565b610827611d44565b600080546001600160a01b0319166001600160a01b03891617815560048790556108519089611d54565b5061086a600080516020612fdf83398151915289611d54565b50610883600080516020612f9f83398151915289611d54565b5083156108ca57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600080516020612f9f8339815191526108ec81611cfe565b825b828111610941576000818152600660208181526040808420600180865293019091528083206003845292206992bd903a3edcf0ea25a0600293840155694e429c461fba32b85c20920191909155016108ee565b50505050565b600080516020612f9f83398151915261095f81611cfe565b60008054604080516368ed41ed60e01b815290516001600160a01b03909216929183916368ed41ed9160048083019260209291908290030181865afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190612ad8565b9050845b848111610bc35760008181526006602052604080822090516331ad879360e21b8152600481018490529091906001600160a01b0386169063c6b61e4c90602401600060405180830381865afa158015610a31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a599190810190612b06565b805183556020810151600184015560408101516002840155606081015160038401805460ff19169115159190911790556080810151519091506000905b80821015610add57610ad183608001518381518110610ab757610ab7612bf7565b602002602001015185600401611df590919063ffffffff16565b50816001019150610a96565b600191505b858211610bb457604051630ab9444d60e21b815260048101839052602481018690526000906001600160a01b03891690632ae511349060440160e060405180830381865afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190612c0d565b60008481526006870160205260409081902090820151815560c082015160018201556080820151600282015560a082015191925090610b9c576000610ba2565b81604001515b60039091015550600190910190610ae2565b846001019450505050506109d4565b505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190612c9c565b6001600160a01b031663e5c8307d83856040518363ffffffff1660e01b8152600401610c70929190612cb9565b602060405180830381865afa158015610c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb19190612ad8565b9392505050565b600080610cc3611e01565b60009384526020525050604090206001015490565b610ce182610cb8565b610cea81611cfe565b6109418383611d54565b600080516020612fdf833981519152610d0c81611cfe565b8151600090815260066020908152604080832083548251630dd97a2960e11b815292519194936001600160a01b0390911692631bb2f45292600480830193928290030181865afa158015610d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d889190612c9c565b6001600160a01b031663ea83e47b85602001516040518263ffffffff1660e01b8152600401610db991815260200190565b600060405180830381865afa158015610dd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dfe9190810190612d2e565b60208101519091506001600160a01b0316610e2c576040516306358e4f60e11b815260040160405180910390fd5b4382600101541180610e3d57508154155b15610e5b5760405163756b785760e01b815260040160405180910390fd5b6040848101805160208088018051600090815260068801835285902060020192909255905187519251935193845292600080516020612f5f833981519152910160405180910390a350505050565b6001600160a01b0381163314610ed25760405163334bd91960e11b815260040160405180910390fd5b610edc8282611e25565b505050565b600080516020612fdf833981519152610ef981611cfe565b610f01611e9d565b50565b610f0c611ef4565b610f1582611f99565b610f1f8282611fa4565b5050565b6000610f2d612061565b50600080516020612f7f83398151915290565b600080610f4b6120aa565b5460ff1692915050565b600080516020612f9f833981519152610f6d81611cfe565b6000546040805163314c0dbd60e21b815290516001600160a01b0390921691829163c53036f49160048083019260209291908290030181865afa158015610fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdc9190612ad8565b600181905550806001600160a01b031663132c58e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110449190612ad8565b600281905550806001600160a01b031663572d356e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190612ad8565b600381905550806001600160a01b031663d7033ca06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190612ad8565b600481905550806001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015611158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117c9190612ad8565b6005555050565b600061118e81611cfe565b60028290556040518281527f2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb906020015b60405180910390a15050565b6111d36120ce565b6111db612104565b6111e44361212a565b6111ec612205565b565b600080516020612fdf83398151915261120681611cfe565b610f01612216565b600080611219611e01565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b600080516020612fdf83398151915261125c81611cfe565b60018290556040518281527f8c3ee37d01ee5f42c88d7ff11c34795aa06e1e65f21e3813d00e101f3c3d614f906020016111bf565b6112d36040518060e001604052806000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008381526006602081815260408084208685529283018252808420815160808101835281548152600182015481850152600282015481840152600390910154606082015284548251630dd97a2960e11b815292519495919491936001600160a01b0390911692631bb2f45292600480830193928290030181865afa158015611360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113849190612c9c565b6001600160a01b031663ea83e47b866040518263ffffffff1660e01b81526004016113b191815260200190565b600060405180830381865afa1580156113ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113f69190810190612d2e565b6040805160e08101808352600054630dd97a2960e11b90915291519293509182916001600160a01b031690631bb2f4529060e4808501916020918187030181865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190612c9c565b6001600160a01b031663e5c8307d888a6040518363ffffffff1660e01b815260040161149a929190612cb9565b602060405180830381865afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190612ad8565b81526020016114ed600486018861225d565b15158152602001836000015181526020018260a00151815260200183604001518152602001836060015181526020018360200151815250935050505092915050565b600080516020612fdf83398151915261154781611cfe565b60008581526006602052604090819020858155600181018590556002810184905590517f89e436b630f34f576d2e93decf8eb2e517099f1d0cecf50b785442eb6b4702cb9061159d908890889088908890612e9e565b60405180910390a1505050505050565b6115e16040518060a00160405280600081526020016000815260200160008152602001600015158152602001606081525090565b6040805160a08101825260008481526006602081815284832080548552600181015482860152600281015495850195909552600385015460ff161515606085015291869052905290608082019061163a90600401612269565b905292915050565b600080516020612fbf83398151915261165a81611cfe565b600083815260066020526040812060038101805460ff191660011790558351909190819081905b808410156108ca5786848151811061169b5761169b612bf7565b60209081029190910101515192506116b66004860184611df5565b506000838152600686016020526040902087519092508790859081106116de576116de612bf7565b602002602001015160200151826000018190555086848151811061170457611704612bf7565b602002602001015160400151826001018190555060008060009054906101000a90046001600160a01b03166001600160a01b0316639889a3036040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117909190612c9c565b6001600160a01b031663117511c960008054906101000a90046001600160a01b03166001600160a01b03166397f2746c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118139190612c9c565b6001600160a01b031663a59850ce6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190612c9c565b8a888151811061188657611886612bf7565b6020026020010151602001516040518363ffffffff1660e01b81526004016118af929190612eb9565b6020604051808303816000875af11580156118ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f29190612ed2565b9050801561199f5787858151811061190c5761190c612bf7565b602002602001015160200151836003018190555088847fdca1e9e232cea851fef9f1dd12c75fd4ddbbfe8a7a6d724d80d4615b58b3a9bc8a888151811061195557611955612bf7565b6020026020010151602001518b898151811061197357611973612bf7565b602002602001015160400151604051611996929190918252602082015260400190565b60405180910390a35b84600101945050611681565b60006119b681611cfe565b60038290556040518281527f3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f58906020016111bf565b6119f482610cb8565b6119fd81611cfe565b6109418383611e25565b600080516020612f9f833981519152611a1f81611cfe565b60005b8251811015610edc57600060066000858481518110611a4357611a43612bf7565b602002602001015160000151815260200190815260200160002090506000816006016000868581518110611a7957611a79612bf7565b6020026020010151602001518152602001908152602001600020905060008060009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0d9190612c9c565b6001600160a01b031663ea83e47b878681518110611b2d57611b2d612bf7565b6020026020010151602001516040518263ffffffff1660e01b8152600401611b5791815260200190565b600060405180830381865afa158015611b74573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b9c9190810190612d2e565b60208101519091506001600160a01b0316611bca576040516306358e4f60e11b815260040160405180910390fd5b4383600101541180611bdb57508254155b15611bf95760405163756b785760e01b815260040160405180910390fd5b600282015415611c1c57604051634d40249960e01b815260040160405180910390fd5b858481518110611c2e57611c2e612bf7565b6020026020010151604001518260020181905550858481518110611c5457611c54612bf7565b602002602001015160200151868581518110611c7257611c72612bf7565b602002602001015160000151600080516020612f5f833981519152888781518110611c9f57611c9f612bf7565b602002602001015160400151604051611cba91815260200190565b60405180910390a3836001019350505050611a22565b611cd86120ce565b611ce0612104565b611cf6438210611cf0574361212a565b8161212a565b610f01612205565b610f018133612276565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6111ec6122a1565b611d3c6122a1565b6111ec6122c6565b611d4c6122a1565b6111ec6122ce565b600080611d5f611e01565b9050611d6b848461120e565b611deb576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611da13390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061075f565b600091505061075f565b6000610cb183836122eb565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b600080611e30611e01565b9050611e3c848461120e565b15611deb576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061075f565b611ea5612335565b6000611eaf6120aa565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611ee9919061268e565b60405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611f7b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611f6f600080516020612f7f833981519152546001600160a01b031690565b6001600160a01b031614155b156111ec5760405163703e46dd60e11b815260040160405180910390fd5b6000610f1f81611cfe565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611ffe575060408051601f3d908101601f19168201909252611ffb91810190612ad8565b60015b6120265781604051634c9c8ce360e01b815260040161201d919061268e565b60405180910390fd5b600080516020612f7f833981519152811461205757604051632a87526960e21b81526004810182905260240161201d565b610edc838361235a565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111ec5760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b60006120d86123b0565b8054909150600119016120fe57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b61210c610f40565b156111ec5760405163d93c066560e01b815260040160405180910390fd5b6005546000908152600660205260409020600181015443101561214b575050565b8181600101541015610f1f5760006006600060056000815461216c90612f03565b91905081905581526020019081526020016000209050816001015460016121939190612f1c565b8082556003546001916121a69190612f1c565b6121b09190612f2f565b600182018190556002805490830181905560055483546040517f017b1c583db0d753e82f5a7f7b94f64603f7e401eb2c40271a8edce1431cf09e946121f6949091612e9e565b60405180910390a1905061214b565b600061220f6123b0565b6001905550565b61221e612104565b60006122286120aa565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611edc3390565b6000610cb183836123d4565b60606000610cb1836123ec565b612280828261120e565b610f1f57808260405163e2517d3f60e01b815260040161201d929190612eb9565b6122a9612448565b6111ec57604051631afcd79f60e31b815260040160405180910390fd5b6122056122a1565b6122d66122a1565b60006122e06120aa565b805460ff1916905550565b60006122f783836123d4565b61232d5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561075f565b50600061075f565b61233d610f40565b6111ec57604051638dfc202b60e01b815260040160405180910390fd5b61236382612462565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156123a857610edc82826124be565b610f1f612534565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b60009081526001919091016020526040902054151590565b60608160000180548060200260200160405190810160405280929190818152602001828054801561243c57602002820191906000526020600020905b815481526020019060010190808311612428575b50505050509050919050565b6000612452611d08565b54600160401b900460ff16919050565b806001600160a01b03163b60000361248f5780604051634c9c8ce360e01b815260040161201d919061268e565b600080516020612f7f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516124db9190612f42565b600060405180830381855af49150503d8060008114612516576040519150601f19603f3d011682016040523d82523d6000602084013e61251b565b606091505b509150915061252b858383612553565b95945050505050565b34156111ec5760405163b398979f60e01b815260040160405180910390fd5b60608261256857612563826125a6565b610cb1565b815115801561257f57506001600160a01b0384163b155b1561259f5783604051639996b31560e01b815260040161201d919061268e565b5092915050565b8051156125b65780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114610f0157600080fd5b6000602082840312156125f657600080fd5b8135610cb1816125cf565b60006020828403121561261357600080fd5b81356001600160e01b031981168114610cb157600080fd5b60008060006060848603121561264057600080fd5b833561264b816125cf565b9250602084013561265b816125cf565b929592945050506040919091013590565b6000806040838503121561267f57600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6000602082840312156126b457600080fd5b5035919050565b600080604083850312156126ce57600080fd5b8235915060208301356126e0816125cf565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612723576127236126eb565b60405290565b6040516101c081016001600160401b0381118282101715612723576127236126eb565b604051601f8201601f191681016001600160401b0381118282101715612774576127746126eb565b604052919050565b60006060828403121561278e57600080fd5b604051606081016001600160401b03811182821017156127b0576127b06126eb565b80604052508091508235815260208301356020820152604083013560408201525092915050565b6000606082840312156127e957600080fd5b610cb1838361277c565b60006001600160401b0382111561280c5761280c6126eb565b50601f01601f191660200190565b6000806040838503121561282d57600080fd5b8235612838816125cf565b915060208301356001600160401b0381111561285357600080fd5b8301601f8101851361286457600080fd5b8035612877612872826127f3565b61274c565b81815286602083850101111561288c57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b838110156128c75781810151838201526020016128af565b50506000910152565b60208152600082518060208401526128ef8160408501602087016128ac565b601f01601f19169190910160400192915050565b6000806000806080858703121561291957600080fd5b5050823594602084013594506040840135936060013592509050565b6000602080835260c0830184518285015281850151604085015260408501516060850152606085015115156080850152608085015160a08086015281815180845260e0870191508483019350600092505b808310156129a65783518252928401926001929092019190840190612986565b509695505050505050565b60006001600160401b038211156129ca576129ca6126eb565b5060051b60200190565b60006129e2612872846129b1565b83815290506020808201906060808602850187811115612a0157600080fd5b855b81811015612a2257612a15898261277c565b8552938301938201612a03565b50505050509392505050565b60008060408385031215612a4157600080fd5b8235915060208301356001600160401b03811115612a5e57600080fd5b8301601f81018513612a6f57600080fd5b612a7e858235602084016129d4565b9150509250929050565b600060208284031215612a9a57600080fd5b81356001600160401b03811115612ab057600080fd5b8201601f81018413612ac157600080fd5b612ad0848235602084016129d4565b949350505050565b600060208284031215612aea57600080fd5b5051919050565b80518015158114612b0157600080fd5b919050565b60006020808385031215612b1957600080fd5b82516001600160401b0380821115612b3057600080fd5b9084019060a08287031215612b4457600080fd5b612b4c612701565b82518152838301518482015260408301516040820152612b6e60608401612af1565b6060820152608083015182811115612b8557600080fd5b80840193505086601f840112612b9a57600080fd5b82519150612baa612872836129b1565b82815260059290921b83018401918481019088841115612bc957600080fd5b938501935b83851015612be757845182529385019390850190612bce565b6080830152509695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060e08284031215612c1f57600080fd5b60405160e081016001600160401b0381118282101715612c4157612c416126eb565b60405282518152612c5460208401612af1565b6020820152604083015160408201526060830151606082015260808301516080820152612c8360a08401612af1565b60a082015260c083015160c08201528091505092915050565b600060208284031215612cae57600080fd5b8151610cb1816125cf565b91825265ffffffffffff16602082015260400190565b8051612b01816125cf565b600082601f830112612ceb57600080fd5b8151612cf9612872826127f3565b818152846020838601011115612d0e57600080fd5b612ad08260208301602087016128ac565b805160058110612b0157600080fd5b600060208284031215612d4057600080fd5b81516001600160401b0380821115612d5757600080fd5b908301906101c08286031215612d6c57600080fd5b612d74612729565b82518152612d8460208401612ccf565b6020820152612d9560408401612ccf565b6040820152612da660608401612ccf565b60608201526080830151608082015260a083015160a082015260c083015182811115612dd157600080fd5b612ddd87828601612cda565b60c08301525060e083015182811115612df557600080fd5b612e0187828601612cda565b60e0830152506101008084015183811115612e1b57600080fd5b612e2788828701612cda565b8284015250506101208084015183811115612e4157600080fd5b612e4d88828701612cda565b8284015250506101409150612e63828401612d1f565b91810191909152610160828101519082015261018080830151908201526101a090612e8f828401612af1565b91810191909152949350505050565b93845260208401929092526040830152606082015260800190565b6001600160a01b03929092168252602082015260400190565b600060208284031215612ee457600080fd5b610cb182612af1565b634e487b7160e01b600052601160045260246000fd5b600060018201612f1557612f15612eed565b5060010190565b8082018082111561075f5761075f612eed565b8181038181111561075f5761075f612eed565b60008251612f548184602087016128ac565b919091019291505056fe948d378fa4c68569d2ecf922375e8845e879b43a1b882cc2b3aece8b76982f84360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08dd3964e50534514b3adc5c2d0d2c4a8426863ff4376360d48539e1f11b5b822f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220f5060e37005f5d00689fb0223f1e1d29b42f39df6229a40765eff90d0189342664736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createEpochs()": {
        "notice": "Creates epochs up to current block"
      },
      "createEpochsUntilBlockNumber(uint256)": {
        "notice": "Creates epochs up to specified block"
      },
      "overrideEpochDlpsTotalStakesScore((uint256,uint256,uint256))": {
        "notice": "Overrides stake scores for DLPs in past epochs"
      },
      "saveEpochDlpsTotalStakesScore((uint256,uint256,uint256)[])": {
        "notice": "Updates stake scores for DLPs in past epochs"
      },
      "saveEpochDlpsTotalStakesScoreForce(uint256,uint256)": {
        "notice": "Updates stake scores for DLPs in past epochs"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7742,
        "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
        "label": "dlpRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDLPRoot)5530"
      },
      {
        "astId": 7745,
        "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
        "label": "epochDlpsLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7748,
        "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
        "label": "epochRewardAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7751,
        "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
        "label": "epochSize",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7754,
        "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
        "label": "daySize",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7757,
        "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
        "label": "epochsCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7762,
        "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
        "label": "_epochs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Epoch)7796_storage)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDLPRoot)5530": {
        "encoding": "inplace",
        "label": "contract IDLPRoot",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Epoch)7796_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRootEpoch.Epoch)",
        "numberOfBytes": "32",
        "value": "t_struct(Epoch)7796_storage"
      },
      "t_mapping(t_uint256,t_struct(EpochDlp)7779_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRootEpoch.EpochDlp)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochDlp)7779_storage"
      },
      "t_struct(Epoch)7796_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRootEpoch.Epoch",
        "members": [
          {
            "astId": 7781,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7783,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7785,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7787,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "isFinalised",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 7790,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "dlpIds",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(UintSet)5079_storage"
          },
          {
            "astId": 7795,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "dlps",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(EpochDlp)7779_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(EpochDlp)7779_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRootEpoch.EpochDlp",
        "members": [
          {
            "astId": 7772,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "ownerRewardAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7774,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "stakersRewardAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7776,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "totalStakesScore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7778,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "rewardClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)4607_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4602,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4606,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)5079_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 5078,
            "contract": "contracts/rootEpoch/DLPRootEpochImplementation.sol:DLPRootEpochImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4607_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}