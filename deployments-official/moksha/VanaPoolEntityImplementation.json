{
  "address": "0x0D8A17dD54a62860690F3D7c51FDa064D613F99e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EntityNameAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEntityId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEntityStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRegistrationStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEntityOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakersStillPresent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAPY",
          "type": "uint256"
        }
      ],
      "name": "EntityCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxAPY",
          "type": "uint256"
        }
      ],
      "name": "EntityMaxAPYUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IVanaPoolEntity.EntityStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "EntityStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "EntityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributedAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardsProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VANA_POOL_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        }
      ],
      "name": "_calculateExponential",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "r",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeEntitiesValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "calculateContinuousAPYByEntity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "apy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "calculateContinuousCompoundingYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct IVanaPoolEntity.EntityRegistrationInfo",
          "name": "entityRegistrationInfo",
          "type": "tuple"
        }
      ],
      "name": "createEntity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "entities",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "entityId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "enum IVanaPoolEntity.EntityStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "maxAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedRewardPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activeRewardPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVanaPoolEntity.EntityInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entitiesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "entityName",
          "type": "string"
        }
      ],
      "name": "entityByName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "entityId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "enum IVanaPoolEntity.EntityStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "maxAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedRewardPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activeRewardPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVanaPoolEntity.EntityInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "entityName",
          "type": "string"
        }
      ],
      "name": "entityNameToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "entityShareToVana",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vanaPoolStakingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMinRegistrationStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialMaxAPYDefault",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAPYDefault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRegistrationStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxAPY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedRewardPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeRewardPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "name": "overrideEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "processRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct IVanaPoolEntity.EntityRegistrationInfo",
          "name": "entityRegistrationInfo",
          "type": "tuple"
        }
      ],
      "name": "updateEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newMaxAPY",
          "type": "uint256"
        }
      ],
      "name": "updateEntityMaxAPY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStake",
          "type": "bool"
        }
      ],
      "name": "updateEntityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinRegistrationStake",
          "type": "uint256"
        }
      ],
      "name": "updateMinRegistrationStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVanaPoolStakingAddress",
          "type": "address"
        }
      ],
      "name": "updateVanaPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vanaPoolStaking",
      "outputs": [
        {
          "internalType": "contract IVanaPoolStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "vanaToEntityShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xddbdff68b7c56a62d57a76f49190e690b56aaed297e805a116e7ba9c31829fb9",
  "receipt": {
    "to": null,
    "from": "0x2AC93684679a5bdA03C6160def908CdB8D46792f",
    "contractAddress": "0x0D8A17dD54a62860690F3D7c51FDa064D613F99e",
    "transactionIndex": 0,
    "gasUsed": "2566212",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000080000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000008000000000000000000000000000000000000000000",
    "blockHash": "0x327a3cf1bdf6d2402b68fdf7e27a215a9434b648fc8ddc4bfc35c65553877dda",
    "transactionHash": "0xddbdff68b7c56a62d57a76f49190e690b56aaed297e805a116e7ba9c31829fb9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2147268,
        "transactionHash": "0xddbdff68b7c56a62d57a76f49190e690b56aaed297e805a116e7ba9c31829fb9",
        "address": "0x0D8A17dD54a62860690F3D7c51FDa064D613F99e",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x327a3cf1bdf6d2402b68fdf7e27a215a9434b648fc8ddc4bfc35c65553877dda"
      }
    ],
    "blockNumber": 2147268,
    "cumulativeGasUsed": "2566212",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "53b9026a46c1c5f23dac9867395b5330",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EntityNameAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEntityId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEntityStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRegistrationStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEntityOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakersStillPresent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAPY\",\"type\":\"uint256\"}],\"name\":\"EntityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxAPY\",\"type\":\"uint256\"}],\"name\":\"EntityMaxAPYUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IVanaPoolEntity.EntityStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"EntityStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"EntityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VANA_POOL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"}],\"name\":\"_calculateExponential\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeEntitiesValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"calculateContinuousAPYByEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"calculateContinuousCompoundingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IVanaPoolEntity.EntityRegistrationInfo\",\"name\":\"entityRegistrationInfo\",\"type\":\"tuple\"}],\"name\":\"createEntity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"entities\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"enum IVanaPoolEntity.EntityStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedRewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeRewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IVanaPoolEntity.EntityInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entitiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"entityName\",\"type\":\"string\"}],\"name\":\"entityByName\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"enum IVanaPoolEntity.EntityStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedRewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeRewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IVanaPoolEntity.EntityInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"entityName\",\"type\":\"string\"}],\"name\":\"entityNameToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"entityShareToVana\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vanaPoolStakingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMinRegistrationStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxAPYDefault\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAPYDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRegistrationStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedRewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeRewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"overrideEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IVanaPoolEntity.EntityRegistrationInfo\",\"name\":\"entityRegistrationInfo\",\"type\":\"tuple\"}],\"name\":\"updateEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxAPY\",\"type\":\"uint256\"}],\"name\":\"updateEntityMaxAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStake\",\"type\":\"bool\"}],\"name\":\"updateEntityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinRegistrationStake\",\"type\":\"uint256\"}],\"name\":\"updateMinRegistrationStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVanaPoolStakingAddress\",\"type\":\"address\"}],\"name\":\"updateVanaPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vanaPoolStaking\",\"outputs\":[{\"internalType\":\"contract IVanaPoolStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"vanaToEntityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"_calculateExponential(uint256)\":{\"details\":\"Approximates e^x using Pad\\u00e9 approximation This function is a copy of wadExp from  solmate/utils/SignedWadMath.sol\",\"params\":{\"exponent\":\"The exponent multiplied by 1e18\"},\"returns\":{\"r\":\" = e^x multiplied by 1e18\"}},\"activeEntitiesValues()\":{\"returns\":{\"_0\":\"uint256[] Array of active entity IDs\"}},\"addRewards(uint256)\":{\"params\":{\"entityId\":\"The entity ID to add rewards to\"}},\"calculateContinuousAPYByEntity(uint256)\":{\"details\":\"Calculates continuously compounded APY for an entity\",\"params\":{\"entityId\":\"The entity ID\"},\"returns\":{\"_0\":\"The compounded APY\"}},\"calculateContinuousCompoundingYield(uint256,uint256,uint256)\":{\"details\":\"Calculates continuously compounded APY\",\"params\":{\"apy\":\"The annual interest rate where 6% = 6e18\",\"principal\":\"The initial amount\",\"time\":\"Time in seconds for which the interest is calculated\"},\"returns\":{\"_0\":\"The final amount after applying continuous compounding\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createEntity((address,string))\":{\"params\":{\"entityRegistrationInfo\":\"The entity registration information\"}},\"entities(uint256)\":{\"params\":{\"entityId\":\"The ID of the entity\"},\"returns\":{\"_0\":\"Entity information\"}},\"entityByName(string)\":{\"params\":{\"entityName\":\"The name of the entity\"},\"returns\":{\"_0\":\"Entity information\"}},\"entityShareToVana(uint256)\":{\"params\":{\"entityId\":\"ID of the entity\"},\"returns\":{\"_0\":\"uint256                          corresponding VANA value\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256)\":{\"params\":{\"ownerAddress\":\"The admin address\",\"vanaPoolStakingAddress\":\"The address of the VanaPoolStaking contract\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processRewards(uint256)\":{\"params\":{\"entityId\":\"The entity ID to process rewards for\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateEntity(uint256,(address,string))\":{\"params\":{\"entityId\":\"The ID of the entity\",\"entityRegistrationInfo\":\"The updated entity information\"}},\"updateEntityMaxAPY(uint256,uint256)\":{\"params\":{\"entityId\":\"The entity ID\",\"newMaxAPY\":\"The new max APY in basis points (1% = 100)\"}},\"updateEntityPool(uint256,uint256,uint256,bool)\":{\"params\":{\"amount\":\"The amount of VANA to add or remove\",\"entityId\":\"The entity ID\",\"isStake\":\"True if staking, false if unstaking\",\"shares\":\"The amount of shares to add or remove\"}},\"updateMinRegistrationStake(uint256)\":{\"params\":{\"newMinRegistrationStake\":\"The new minimum registration stake\"}},\"updateVanaPool(address)\":{\"params\":{\"newVanaPoolStakingAddress\":\"The new VanaPoolStaking contract address\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"vanaToEntityShare(uint256)\":{\"params\":{\"entityId\":\"ID of the entity\"},\"returns\":{\"_0\":\"uint256                          corresponding shares amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activeEntitiesValues()\":{\"notice\":\"Get all active entities\"},\"addRewards(uint256)\":{\"notice\":\"Add rewards to an entity's locked reward pool\"},\"createEntity((address,string))\":{\"notice\":\"Creates a new entity\"},\"entities(uint256)\":{\"notice\":\"Gets entity information\"},\"entityByName(string)\":{\"notice\":\"Gets entity information by name\"},\"entityShareToVana(uint256)\":{\"notice\":\"Convert share to VANA for a specific entity\"},\"initialize(address,address,uint256,uint256)\":{\"notice\":\"Initializes the contract\"},\"pause()\":{\"notice\":\"Pauses the contract\"},\"processRewards(uint256)\":{\"notice\":\"Process rewards for an entity\"},\"unpause()\":{\"notice\":\"Unpauses the contract\"},\"updateEntity(uint256,(address,string))\":{\"notice\":\"Updates an entity\"},\"updateEntityMaxAPY(uint256,uint256)\":{\"notice\":\"Update an entity's max APY\"},\"updateEntityPool(uint256,uint256,uint256,bool)\":{\"notice\":\"Update entity stake information - can only be called by VanaPoolStaking\"},\"updateMinRegistrationStake(uint256)\":{\"notice\":\"Updates the minimum registration stake\"},\"updateVanaPool(address)\":{\"notice\":\"Updates the VanaPoolStaking contract address\"},\"vanaToEntityShare(uint256)\":{\"notice\":\"Convert VANA to shares for a specific entity\"},\"version()\":{\"notice\":\"Returns the version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol\":\"VanaPoolEntityImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/VanaPoolEntityStorageV1.sol\\\";\\n\\ncontract VanaPoolEntityImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    VanaPoolEntityStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    // Events for entity lifecycle and operations\\n    event EntityCreated(uint256 indexed entityId, address ownerAddress, string name, uint256 maxAPY);\\n    event EntityUpdated(uint256 indexed entityId, address ownerAddress, string name);\\n    event EntityStatusUpdated(uint256 indexed entityId, EntityStatus newStatus);\\n    event EntityMaxAPYUpdated(uint256 indexed entityId, uint256 newMaxAPY);\\n    event RewardsAdded(uint256 indexed entityId, uint256 amount);\\n    event RewardsProcessed(uint256 indexed entityId, uint256 distributedAmount);\\n\\n    // Custom errors\\n    error InvalidParam();\\n    error InvalidEntityId();\\n    error InvalidEntityStatus();\\n    error InvalidAddress();\\n    error InvalidName();\\n    error NotEntityOwner();\\n    error EntityNameAlreadyExists();\\n    error NameTooShort();\\n    error InvalidRegistrationStake();\\n    error StakersStillPresent();\\n    error NotAuthorized();\\n    error TransferFailed();\\n\\n    modifier onlyEntityOwner(uint256 entityId) {\\n        if (_entities[entityId].ownerAddress != msg.sender) {\\n            revert NotEntityOwner();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the contract\\n     * @param ownerAddress The admin address\\n     * @param vanaPoolStakingAddress The address of the VanaPoolStaking contract\\n     */\\n    function initialize(\\n        address ownerAddress,\\n        address vanaPoolStakingAddress,\\n        uint256 initialMinRegistrationStake,\\n        uint256 initialMaxAPYDefault\\n    ) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        vanaPoolStaking = IVanaPoolStaking(vanaPoolStakingAddress);\\n        minRegistrationStake = initialMinRegistrationStake;\\n        maxAPYDefault = initialMaxAPYDefault;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\\n        _grantRole(VANA_POOL_ROLE, vanaPoolStakingAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Gets entity information\\n     * @param entityId The ID of the entity\\n     * @return Entity information\\n     */\\n    function entities(uint256 entityId) public view override returns (EntityInfo memory) {\\n        Entity storage entity = _entities[entityId];\\n\\n        return\\n            EntityInfo({\\n                entityId: entityId,\\n                ownerAddress: entity.ownerAddress,\\n                status: entity.status,\\n                name: entity.name,\\n                maxAPY: entity.maxAPY,\\n                lockedRewardPool: entity.lockedRewardPool,\\n                activeRewardPool: entity.activeRewardPool,\\n                totalShares: entity.totalShares,\\n                lastUpdateTimestamp: entity.lastUpdateTimestamp\\n            });\\n    }\\n\\n    /**\\n     * @notice Convert share to VANA for a specific entity\\n     *\\n     * @param entityId                          ID of the entity\\n     * @return uint256                          corresponding VANA value\\n     */\\n    function entityShareToVana(uint256 entityId) external view override returns (uint256) {\\n        Entity storage entity = _entities[entityId];\\n\\n        return entity.totalShares > 0 ? (entity.activeRewardPool * 1e18) / entity.totalShares : 1e18;\\n    }\\n\\n    /**\\n     * @notice Convert VANA to shares for a specific entity\\n     *\\n     * @param entityId                          ID of the entity\\n     * @return uint256                          corresponding shares amount\\n     */\\n    function vanaToEntityShare(uint256 entityId) external view override returns (uint256) {\\n        Entity storage entity = _entities[entityId];\\n\\n        return entity.activeRewardPool > 0 ? (entity.totalShares * 1e18) / entity.activeRewardPool : 1e18;\\n    }\\n\\n    /**\\n     * @notice Gets entity information by name\\n     * @param entityName The name of the entity\\n     * @return Entity information\\n     */\\n    function entityByName(string memory entityName) external view override returns (EntityInfo memory) {\\n        uint256 entityId = entityNameToId[entityName];\\n        return entities(entityId);\\n    }\\n\\n    /**\\n     * @notice Pauses the contract\\n     */\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the contract\\n     */\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Updates the VanaPoolStaking contract address\\n     * @param newVanaPoolStakingAddress The new VanaPoolStaking contract address\\n     */\\n    function updateVanaPool(address newVanaPoolStakingAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        if (address(newVanaPoolStakingAddress) == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        _revokeRole(VANA_POOL_ROLE, address(vanaPoolStaking));\\n        _grantRole(VANA_POOL_ROLE, address(newVanaPoolStakingAddress));\\n\\n        vanaPoolStaking = IVanaPoolStaking(newVanaPoolStakingAddress);\\n    }\\n\\n    /**\\n     * @notice Updates the minimum registration stake\\n     * @param newMinRegistrationStake The new minimum registration stake\\n     */\\n    function updateMinRegistrationStake(uint256 newMinRegistrationStake) external override onlyRole(MAINTAINER_ROLE) {\\n        minRegistrationStake = newMinRegistrationStake;\\n    }\\n\\n    /**\\n     * @notice Creates a new entity\\n     * @param entityRegistrationInfo The entity registration information\\n     */\\n    function createEntity(\\n        EntityRegistrationInfo calldata entityRegistrationInfo\\n    ) external payable override whenNotPaused nonReentrant onlyRole(MAINTAINER_ROLE) {\\n        if (entityRegistrationInfo.ownerAddress == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        if (\\n            entityNameToId[entityRegistrationInfo.name] != 0 || !_validateEntityNameLength(entityRegistrationInfo.name)\\n        ) {\\n            revert InvalidName();\\n        }\\n\\n        if (msg.value != minRegistrationStake) {\\n            revert InvalidRegistrationStake();\\n        }\\n\\n        uint256 registrationStake = msg.value;\\n\\n        uint256 entityId = ++entitiesCount;\\n        Entity storage entity = _entities[entityId];\\n\\n        entity.ownerAddress = entityRegistrationInfo.ownerAddress;\\n        entity.name = entityRegistrationInfo.name;\\n        entity.status = EntityStatus.Active;\\n        entity.maxAPY = maxAPYDefault;\\n        entity.lastUpdateTimestamp = block.timestamp;\\n\\n        entityNameToId[entityRegistrationInfo.name] = entityId;\\n        _activeEntityIds.add(entityId);\\n\\n        // Initialize share values directly in the entity\\n        entity.totalShares = registrationStake;\\n        entity.activeRewardPool = registrationStake;\\n\\n        // Call VanaPoolStaking to register the entity stake\\n        vanaPoolStaking.registerEntityStake(entityId, entityRegistrationInfo.ownerAddress, registrationStake);\\n\\n        (bool success, ) = payable(address(vanaPoolStaking.vanaPoolTreasury())).call{value: registrationStake}(\\\"\\\");\\n\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit EntityCreated(entityId, entityRegistrationInfo.ownerAddress, entityRegistrationInfo.name, maxAPYDefault);\\n        emit EntityStatusUpdated(entityId, EntityStatus.Active);\\n    }\\n\\n    /**\\n     * @notice Updates an entity\\n     * @param entityId The ID of the entity\\n     * @param entityRegistrationInfo The updated entity information\\n     */\\n    function updateEntity(\\n        uint256 entityId,\\n        EntityRegistrationInfo calldata entityRegistrationInfo\\n    ) external override whenNotPaused nonReentrant onlyEntityOwner(entityId) {\\n        if (entityRegistrationInfo.ownerAddress == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        Entity storage entity = _entities[entityId];\\n\\n        if (entity.status != EntityStatus.Active) {\\n            revert InvalidEntityStatus();\\n        }\\n\\n        // Check if name is changing and validate\\n        if (keccak256(bytes(entityRegistrationInfo.name)) != keccak256(bytes(entity.name))) {\\n            if (\\n                entityNameToId[entityRegistrationInfo.name] != 0 ||\\n                !_validateEntityNameLength(entityRegistrationInfo.name)\\n            ) {\\n                revert InvalidName();\\n            }\\n\\n            // Update name mappings\\n            entityNameToId[entity.name] = 0;\\n            entityNameToId[entityRegistrationInfo.name] = entityId;\\n            entity.name = entityRegistrationInfo.name;\\n        }\\n\\n        // Update fields\\n        entity.ownerAddress = entityRegistrationInfo.ownerAddress;\\n\\n        //todo: move owner's shares to new address if we allow public entity registration\\n\\n        emit EntityUpdated(entityId, entityRegistrationInfo.ownerAddress, entityRegistrationInfo.name);\\n    }\\n\\n    //    /**\\n    //     * @notice Removes an entity\\n    //     * @param entityId The ID of the entity to remove\\n    //     */\\n    //    function removeEntity(uint256 entityId) external override whenNotPaused nonReentrant onlyEntityOwner(entityId) {\\n    //        Entity storage entity = _entities[entityId];\\n    //\\n    //        if (entity.status != EntityStatus.Active) {\\n    //            revert InvalidEntityStatus();\\n    //        }\\n    //\\n    //        // Process any pending rewards\\n    //        processRewards(entityId);\\n    //\\n    //        // Update status\\n    //        entity.status = EntityStatus.Removed;\\n    //        _activeEntityIds.remove(entityId);\\n    //\\n    //        emit EntityStatusUpdated(entityId, EntityStatus.Removed);\\n    //    }\\n\\n    /**\\n     * @notice Add rewards to an entity's locked reward pool\\n     * @param entityId The entity ID to add rewards to\\n     */\\n    function addRewards(uint256 entityId) external payable override whenNotPaused {\\n        Entity storage entity = _entities[entityId];\\n\\n        if (entity.status != EntityStatus.Active) {\\n            revert InvalidEntityStatus();\\n        }\\n\\n        if (msg.value == 0) {\\n            revert InvalidParam();\\n        }\\n\\n        // Add to locked reward pool\\n        entity.lockedRewardPool += msg.value;\\n\\n        (bool success, ) = payable(address(vanaPoolStaking.vanaPoolTreasury())).call{value: msg.value}(\\\"\\\");\\n\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit RewardsAdded(entityId, msg.value);\\n    }\\n\\n    /**\\n     * @notice Process rewards for an entity\\n     * @param entityId The entity ID to process rewards for\\n     */\\n    function processRewards(uint256 entityId) public override whenNotPaused {\\n        Entity storage entity = _entities[entityId];\\n\\n        if (entity.status != EntityStatus.Active) {\\n            revert InvalidEntityStatus();\\n        }\\n\\n        // Calculate time elapsed since last update\\n        uint256 timeElapsed = block.timestamp - entity.lastUpdateTimestamp;\\n        if (timeElapsed == 0) {\\n            return;\\n        }\\n\\n        // Calculate theoretical rewards based on maxAPY\\n        uint256 toDistribute = calculateContinuousCompoundingYield(entity.maxAPY, entity.activeRewardPool, timeElapsed);\\n\\n        if (toDistribute > entity.lockedRewardPool) {\\n            toDistribute = entity.lockedRewardPool;\\n        }\\n\\n        entity.lockedRewardPool -= toDistribute;\\n        entity.activeRewardPool += toDistribute;\\n\\n        // Update last process timestamp\\n        entity.lastUpdateTimestamp = block.timestamp;\\n\\n        emit RewardsProcessed(entityId, toDistribute);\\n    }\\n\\n    /**\\n     * @notice Update an entity's max APY\\n     * @param entityId The entity ID\\n     * @param newMaxAPY The new max APY in basis points (1% = 100)\\n     */\\n    function updateEntityMaxAPY(uint256 entityId, uint256 newMaxAPY) external override onlyRole(MAINTAINER_ROLE) {\\n        Entity storage entity = _entities[entityId];\\n\\n        if (entity.status != EntityStatus.Active) {\\n            revert InvalidEntityStatus();\\n        }\\n\\n        // Process existing rewards before changing APY\\n        processRewards(entityId);\\n\\n        entity.maxAPY = newMaxAPY;\\n\\n        emit EntityMaxAPYUpdated(entityId, newMaxAPY);\\n    }\\n\\n    /**\\n     * @notice Get all active entities\\n     * @return uint256[] Array of active entity IDs\\n     */\\n    function activeEntitiesValues() external view override returns (uint256[] memory) {\\n        return _activeEntityIds.values();\\n    }\\n\\n    /**\\n     * @notice Validates entity name length\\n     * @param name The name to validate\\n     * @return Whether the name is valid\\n     */\\n    function _validateEntityNameLength(string memory name) internal pure returns (bool) {\\n        bytes memory nameBytes = bytes(name);\\n        uint256 count = 0;\\n\\n        for (uint256 i = 0; i < nameBytes.length; i++) {\\n            if (nameBytes[i] != 0x20) {\\n                // 0x20 is the ASCII space character\\n                count++;\\n            }\\n        }\\n\\n        return count > 3;\\n    }\\n\\n    /**\\n     * @notice Update entity stake information - can only be called by VanaPoolStaking\\n     * @param entityId The entity ID\\n     * @param shares The amount of shares to add or remove\\n     * @param amount The amount of VANA to add or remove\\n     * @param isStake True if staking, false if unstaking\\n     */\\n    function updateEntityPool(\\n        uint256 entityId,\\n        uint256 shares,\\n        uint256 amount,\\n        bool isStake\\n    ) external override whenNotPaused onlyRole(VANA_POOL_ROLE) {\\n        if (!hasRole(VANA_POOL_ROLE, msg.sender)) {\\n            revert NotAuthorized();\\n        }\\n\\n        Entity storage entity = _entities[entityId];\\n\\n        if (entity.status != EntityStatus.Active) {\\n            revert InvalidEntityStatus();\\n        }\\n\\n        // Update entity totals based on whether it's a stake or unstake\\n        if (isStake) {\\n            entity.totalShares += shares;\\n            entity.activeRewardPool += amount;\\n        } else {\\n            entity.totalShares -= shares;\\n            entity.activeRewardPool -= amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates continuously compounded APY\\n     * @param apy The annual interest rate where 6% = 6e18\\n     * @param principal The initial amount\\n     * @param time Time in seconds for which the interest is calculated\\n     * @return The final amount after applying continuous compounding\\n     */\\n    function calculateContinuousCompoundingYield(\\n        uint256 apy,\\n        uint256 principal,\\n        uint256 time\\n    ) public pure override returns (uint256) {\\n        // Convert percentage to decimal (e.g., 6e18 (6%) -> 0.06 * 1e18)\\n        uint256 rateAsDecimal = apy / 100;\\n\\n        // Calculate e^(rate * time)\\n        uint256 exponent = (rateAsDecimal * time) / 365 days;\\n        uint256 eToExponent = _calculateExponential(exponent);\\n\\n        // Calculate principal * (e^(rate * time) - 1) to get only the interest\\n        return (principal * (eToExponent - 1e18)) / 1e18;\\n    }\\n\\n    /**\\n     * @dev Calculates continuously compounded APY for an entity\\n     * @param entityId The entity ID\\n     * @return The compounded APY\\n     */\\n    function calculateContinuousAPYByEntity(uint256 entityId) external view override returns (uint256) {\\n        // Convert percentage to decimal (e.g., 6e18 (6%) -> 0.06 * 1e18)\\n        uint256 rateAsDecimal = _entities[entityId].maxAPY / 100;\\n\\n        // Calculate e^rate - 1\\n        uint256 eToRate = _calculateExponential(rateAsDecimal);\\n\\n        // Calculate (e^rate - 1) * 100 to get APY percentage\\n        return (eToRate - 1e18) * 100;\\n    }\\n\\n    // This function is copied from solmate/utils/SignedWadMath.sol\\n\\n    /**\\n     * @dev Approximates e^x using Pad\\u00e9 approximation\\n     * This function is a copy of wadExp from  solmate/utils/SignedWadMath.sol\\n     * @param exponent The exponent multiplied by 1e18\\n     * @return r  = e^x multiplied by 1e18\\n     */\\n    function _calculateExponential(uint256 exponent) public pure returns (uint256 r) {\\n        unchecked {\\n            int256 x = int256(exponent);\\n\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5 ** 18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2 ** 95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = (uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k);\\n        }\\n    }\\n\\n    //override entity for this         string name;\\n    //        uint256 maxAPY; // Maximum APY for this entity (in basis points, 1% = 100)\\n    //        uint256 lockedRewardPool; // Locked rewards for this entity\\n    //        uint256 activeRewardPool; // Active rewards available for distribution\\n    //        uint256 totalShares; // Total shares for this entity\\n    //        uint256 lastUpdateTimestamp;\\n    function overrideEntity(\\n        uint256 entityId,\\n        string memory name,\\n        uint256 maxAPY,\\n        uint256 lockedRewardPool,\\n        uint256 activeRewardPool,\\n        uint256 totalShares,\\n        uint256 lastUpdateTimestamp\\n    ) external onlyRole(MAINTAINER_ROLE) {\\n        Entity storage entity = _entities[entityId];\\n        entity.name = name;\\n        entity.maxAPY = maxAPY;\\n        entity.lockedRewardPool = lockedRewardPool;\\n        entity.activeRewardPool = activeRewardPool;\\n        entity.totalShares = totalShares;\\n        entity.lastUpdateTimestamp = lastUpdateTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xb9188fbb6cda4454b1cfbaf35b13e4aaada6c0c748ab020be0edddf3eca13633\",\"license\":\"MIT\"},\"contracts/vanaPoolEntity/interfaces/IVanaPoolEntity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IVanaPoolStaking} from \\\"../../vanaPoolStaking/interfaces/IVanaPoolStaking.sol\\\";\\n\\ninterface IVanaPoolEntity {\\n    enum EntityStatus {\\n        None,\\n        Active,\\n        Removed\\n    }\\n\\n    struct Entity {\\n        address ownerAddress;\\n        EntityStatus status;\\n        string name;\\n        uint256 maxAPY; // Maximum APY for this entity (in basis points, 1% = 100)\\n        uint256 lockedRewardPool; // Locked rewards for this entity\\n        uint256 activeRewardPool; // Active rewards available for distribution\\n        uint256 totalShares; // Total shares for this entity\\n        uint256 lastUpdateTimestamp; // When rewards were last processed\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function vanaPoolStaking() external view returns (IVanaPoolStaking);\\n    function minRegistrationStake() external view returns (uint256);\\n    function maxAPYDefault() external view returns (uint256);\\n\\n    struct EntityInfo {\\n        uint256 entityId;\\n        address ownerAddress;\\n        EntityStatus status;\\n        string name;\\n        uint256 maxAPY;\\n        uint256 lockedRewardPool;\\n        uint256 activeRewardPool;\\n        uint256 totalShares;\\n        uint256 lastUpdateTimestamp;\\n    }\\n\\n    function entitiesCount() external view returns (uint256);\\n    function entities(uint256 entityId) external view returns (EntityInfo memory);\\n    function entityByName(string calldata entityName) external view returns (EntityInfo memory);\\n    function entityNameToId(string calldata entityName) external view returns (uint256);\\n\\n    function entityShareToVana(uint256 entityId) external view returns (uint256);\\n    function vanaToEntityShare(uint256 entityId) external view returns (uint256);\\n\\n    function pause() external;\\n    function unpause() external;\\n    function updateVanaPool(address vanaPoolStakingAddress) external;\\n    function updateMinRegistrationStake(uint256 newMinRegistrationStake) external;\\n\\n    struct EntityRegistrationInfo {\\n        address ownerAddress;\\n        string name;\\n    }\\n\\n    function createEntity(EntityRegistrationInfo calldata entityRegistrationInfo) external payable;\\n    function updateEntity(uint256 entityId, EntityRegistrationInfo calldata entityRegistrationInfo) external;\\n    //    function removeEntity(uint256 entityId) external;\\n\\n    // Entity reward management\\n    function addRewards(uint256 entityId) external payable;\\n    function processRewards(uint256 entityId) external;\\n    function updateEntityMaxAPY(uint256 entityId, uint256 newMaxAPY) external;\\n\\n    // Get entities\\n    function activeEntitiesValues() external view returns (uint256[] memory);\\n\\n    function updateEntityPool(uint256 entityId, uint256 shares, uint256 amount, bool isStake) external;\\n\\n    function calculateContinuousCompoundingYield(\\n        uint256 apy,\\n        uint256 principal,\\n        uint256 time\\n    ) external pure returns (uint256);\\n\\n    function calculateContinuousAPYByEntity(uint256 entityId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9fb87032f54a0b813270a4af0a13ff28b234e602010d5b48d8cb5fdf1cc2d3c1\",\"license\":\"MIT\"},\"contracts/vanaPoolEntity/interfaces/VanaPoolEntityStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./IVanaPoolEntity.sol\\\";\\n\\n/**\\n * @title Storage for VanaPoolEntity\\n * @notice For future upgrades, do not change VanaPoolEntityStorageV1. Create a new\\n * contract which implements VanaPoolEntityStorageV1\\n */\\nabstract contract VanaPoolEntityStorageV1 is IVanaPoolEntity {\\n    IVanaPoolStaking public override vanaPoolStaking;\\n\\n    uint256 public override entitiesCount;\\n\\n    uint256 public override minRegistrationStake;\\n    uint256 public override maxAPYDefault;\\n\\n    // Entity storage - all entity data is stored here\\n    mapping(uint256 entityId => Entity entity) internal _entities;\\n    mapping(string entityName => uint256 entityId) public override entityNameToId;\\n\\n    EnumerableSet.UintSet internal _activeEntityIds; // Constants for calculations\\n\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n    uint256 internal constant E = 2718281828459045235;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    bytes32 public constant VANA_POOL_ROLE = keccak256(\\\"VANA_POOL_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x95e77ba4e1273e55275d4476844ea0ef9a89e387ee80e715f227a587092cb487\",\"license\":\"MIT\"},\"contracts/vanaPoolStaking/interfaces/IVanaPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IVanaPoolEntity} from \\\"../../vanaPoolEntity/interfaces/IVanaPoolEntity.sol\\\";\\nimport {IVanaPoolTreasury} from \\\"../../vanaPoolTreasury/interfaces/IVanaPoolTreasury.sol\\\";\\n\\ninterface IVanaPoolStaking {\\n    struct StakerEntity {\\n        uint256 shares;\\n    }\\n\\n    struct Staker {\\n        mapping(uint256 entityId => StakerEntity entity) entities;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function vanaPoolEntity() external view returns (IVanaPoolEntity);\\n    function vanaPoolTreasury() external view returns (IVanaPoolTreasury);\\n    function minStakeAmount() external view returns (uint256);\\n\\n    function stake(uint256 entityId, address recipient, uint256 shareAmountMin) external payable;\\n    function unstake(uint256 entityId, uint256 amount, uint256 vanaAmountMin) external;\\n\\n    function stakerEntities(address staker, uint256 entityId) external view returns (StakerEntity memory);\\n\\n    function pause() external;\\n    function unpause() external;\\n    function updateVanaPoolEntity(address newVanaPoolEntityAddress) external;\\n    function updateVanaPoolTreasury(address newVanaPoolTreasuryAddress) external;\\n    function updateMinStakeAmount(uint256 newMinStake) external;\\n\\n    function registerEntityStake(uint256 entityId, address ownerAddress, uint256 registrationStake) external;\\n}\\n\",\"keccak256\":\"0x5b3f9ffbf0fdc5ea0eaddd0f27611c3ba3b402a988c493393fade48e23e489a6\",\"license\":\"MIT\"},\"contracts/vanaPoolTreasury/interfaces/IVanaPoolTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IVanaPoolTreasury {\\n    function version() external pure returns (uint256);\\n    function vanaPool() external view returns (address);\\n    function updateVanaPool(address vanaPoolAddress) external;\\n    function transferVana(address payable to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf5ea7e2f20f6416b2231539cdaf3145bfca259270adfffc17b255d7fd67d5bae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000da565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000775760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051612cfb6200010460003960008181611ca401528181611ccd0152611e080152612cfb6000f3fe6080604052600436106101c05760003560e01c806301ffc9a7146101c5578063035c2481146101fa5780630d6c032b1461021c57806320f66e4f14610262578063248a9ca3146102825780632f2ff15d146102a257806336568abe146102c25780633f4ba83a146102e2578063449de32c146102f75780634f1ef2861461031757806352d1902d1461032a57806354d3d52a1461033f57806354fd4d501461035f57806356a46902146103735780635c975abb1461039557806361f927a1146103aa5780636331883b146103cc57806368bd646a146103f95780638456cb591461042657806391d148541461043b578063944da3fc1461045b578063a1a4239a1461047b578063a217fddf1461049b578063ad3cb1cc146104b0578063b29c41da146104ee578063bd0292521461050e578063beceed3914610524578063c04f712f14610537578063cf7beec31461054d578063cfc4481514610560578063d0a08a6c14610580578063d547741f146105a0578063d55b1981146105c0578063dccca299146105e0578063de230a66146105f6578063e6ef675b14610616578063eb990c5914610636578063f874225414610656578063fa54717a14610678575b600080fd5b3480156101d157600080fd5b506101e56101e03660046122b6565b610698565b60405190151581526020015b60405180910390f35b34801561020657600080fd5b5061021a6102153660046122f8565b6106cf565b005b34801561022857600080fd5b506102546102373660046123e9565b805160208183018101805160058252928201919093012091525481565b6040519081526020016101f1565b34801561026e57600080fd5b5061021a61027d36600461241d565b610980565b34801561028e57600080fd5b5061025461029d36600461241d565b61099e565b3480156102ae57600080fd5b5061021a6102bd36600461244b565b6109be565b3480156102ce57600080fd5b5061021a6102dd36600461244b565b6109e0565b3480156102ee57600080fd5b5061021a610a18565b34801561030357600080fd5b5061021a61031236600461247b565b610a3b565b61021a61032536600461249d565b610aea565b34801561033657600080fd5b50610254610b05565b34801561034b57600080fd5b5061021a61035a3660046124f6565b610b22565b34801561036b57600080fd5b506001610254565b34801561037f57600080fd5b50610388610bc3565b6040516101f19190612513565b3480156103a157600080fd5b506101e5610bd4565b3480156103b657600080fd5b50610254600080516020612c8683398151915281565b3480156103d857600080fd5b506103ec6103e736600461241d565b610be9565b6040516101f191906125df565b34801561040557600080fd5b50600054610419906001600160a01b031681565b6040516101f19190612678565b34801561043257600080fd5b5061021a610d14565b34801561044757600080fd5b506101e561045636600461244b565b610d34565b34801561046757600080fd5b5061025461047636600461241d565b610d6a565b34801561048757600080fd5b5061025461049636600461241d565b610f1b565b3480156104a757600080fd5b50610254600081565b3480156104bc57600080fd5b506104e1604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101f1919061268c565b3480156104fa57600080fd5b5061025461050936600461241d565b610f6e565b34801561051a57600080fd5b5061025460035481565b61021a61053236600461241d565b610fc2565b34801561054357600080fd5b5061025460015481565b61021a61055b36600461269f565b61116e565b34801561056c57600080fd5b5061025461057b3660046126d3565b61153a565b34801561058c57600080fd5b5061025461059b36600461241d565b6115a6565b3480156105ac57600080fd5b5061021a6105bb36600461244b565b6115e7565b3480156105cc57600080fd5b506103ec6105db3660046123e9565b611603565b3480156105ec57600080fd5b5061025460025481565b34801561060257600080fd5b5061021a6106113660046126ff565b611637565b34801561062257600080fd5b5061021a61063136600461241d565b611754565b34801561064257600080fd5b5061021a610651366004612745565b61185e565b34801561066257600080fd5b50610254600080516020612ca683398151915281565b34801561068457600080fd5b5061021a61069336600461278b565b6119d3565b60006001600160e01b03198216637965db0b60e01b14806106c957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106d7611a30565b6106df611a58565b60008281526004602052604090205482906001600160a01b031633146107185760405163fef2862960e01b815260040160405180910390fd5b600061072760208401846124f6565b6001600160a01b03160361074e5760405163e6c4247b60e01b815260040160405180910390fd5b600083815260046020526040902060018154600160a01b900460ff16600281111561077b5761077b612557565b146107995760405163ad0d278b60e01b815260040160405180910390fd5b806001016040516107aa91906128a4565b6040519081900390206107c060208501856128b0565b6040516107ce9291906128fd565b6040518091039020146108f75760056107ea60208501856128b0565b6040516107f89291906128fd565b908152602001604051809103902054600014158061085d575061085b61082160208501856128b0565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a8e92505050565b155b1561087b5760405163430f13b360e01b815260040160405180910390fd5b600060058260010160405161089091906128a4565b9081526020016040518091039020819055508360058480602001906108b591906128b0565b6040516108c39291906128fd565b9081526020016040518091039020819055508280602001906108e591906128b0565b60018301916108f591908361296a565b505b61090460208401846124f6565b81546001600160a01b0319166001600160a01b0391909116178155837fc18055339d3481a334f2bf553f5687d28178158490c8ad81a86a4ab03adc347061094e60208601866124f6565b61095b60208701876128b0565b60405161096a93929190612a4d565b60405180910390a2505061097c611aea565b5050565b600080516020612ca683398151915261099881611afb565b50600255565b6000806109a9611b05565b60009384526020525050604090206001015490565b6109c78261099e565b6109d081611afb565b6109da8383611b29565b50505050565b6001600160a01b0381163314610a095760405163334bd91960e11b815260040160405180910390fd5b610a138282611bca565b505050565b600080516020612ca6833981519152610a3081611afb565b610a38611c42565b50565b600080516020612ca6833981519152610a5381611afb565b600083815260046020526040902060018154600160a01b900460ff166002811115610a8057610a80612557565b14610a9e5760405163ad0d278b60e01b815260040160405180910390fd5b610aa784611754565b6002810183905560405183815284907f66f9a9bffa3173cfd88573ba6e37b71c50501deae5c916c376815859973f7e47906020015b60405180910390a250505050565b610af2611c99565b610afb82611d3e565b61097c8282611d49565b6000610b0f611dfd565b50600080516020612c6683398151915290565b600080516020612ca6833981519152610b3a81611afb565b6001600160a01b038216610b615760405163e6c4247b60e01b815260040160405180910390fd5b600054610b8690600080516020612c86833981519152906001600160a01b0316611bca565b50610b9f600080516020612c8683398151915283611b29565b5050600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060610bcf6006611e46565b905090565b600080610bdf611e53565b5460ff1692915050565b610bf161226a565b60008281526004602090815260409182902082516101208101845285815281546001600160a01b038116938201939093529092909190820190600160a01b900460ff166002811115610c4557610c45612557565b8152602001826001018054610c59906127fd565b80601f0160208091040260200160405190810160405280929190818152602001828054610c85906127fd565b8015610cd25780601f10610ca757610100808354040283529160200191610cd2565b820191906000526020600020905b815481529060010190602001808311610cb557829003601f168201915b50505050508152602001826002015481526020018260030154815260200182600401548152602001826005015481526020018260060154815250915050919050565b600080516020612ca6833981519152610d2c81611afb565b610a38611e77565b600080610d3f611b05565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b600081680248ce36a70cb26b3e198113610d875750600092915050565b680755bf798b4a1bf1e58112610dd35760405162461bcd60e51b815260206004820152600c60248201526b4558505f4f564552464c4f5760a01b60448201526064015b60405180910390fd5b6503782dace9d9604e82901b059050600060606bb17217f7d1cf79abc9e3b39883821b056001605f1b01901d6bb17217f7d1cf79abc9e3b39881029092036c240c330e9fb2d9cbaf0fd5aafb1981018102606090811d6d0277594991cfc85f6e2461837cd9018202811d6d1a521255e34f6a5061b25ef1c9c319018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d6e02c72388d9f74f51a9331fed693f1419018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084016d01d3967ed30fc4f89c02bab5708119010290911d6e0587f503bb6ea29d25fcb740196450019091026d360d7aeea093263ecc6e0ecb291760621b010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3929092039190911c9392505050565b6000818152600460208190526040822090810154610f4157670de0b6b3a7640000610f67565b60048101546005820154610f5d90670de0b6b3a7640000612a88565b610f679190612a9f565b9392505050565b6000818152600460205260408120600201548190610f8e90606490612a9f565b90506000610f9b82610d6a565b9050610faf670de0b6b3a764000082612ac1565b610fba906064612a88565b949350505050565b610fca611a30565b600081815260046020526040902060018154600160a01b900460ff166002811115610ff757610ff7612557565b146110155760405163ad0d278b60e01b815260040160405180910390fd5b3460000361103657604051633494a40d60e21b815260040160405180910390fd5b3481600301600082825461104a9190612ad4565b909155505060008054604080516339e9ade160e21b815290516001600160a01b039092169163e7a6b784916004808201926020929091908290030181865afa15801561109a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110be9190612ae7565b6001600160a01b03163460405160006040518083038185875af1925050503d8060008114611108576040519150601f19603f3d011682016040523d82523d6000602084013e61110d565b606091505b505090508061112f576040516312171d8360e31b815260040160405180910390fd5b827f40df43107e8b4d467127964bd3c966687c0a6a39aaede970755397fd09535e983460405161116191815260200190565b60405180910390a2505050565b611176611a30565b61117e611a58565b600080516020612ca683398151915261119681611afb565b60006111a560208401846124f6565b6001600160a01b0316036111cc5760405163e6c4247b60e01b815260040160405180910390fd5b60056111db60208401846128b0565b6040516111e99291906128fd565b9081526020016040518091039020546000141580611214575061121261082160208401846128b0565b155b156112325760405163430f13b360e01b815260040160405180910390fd5b6002543414611254576040516307e5667760e31b815260040160405180910390fd5b6000349050600060016000815461126a90612b04565b9182905550600081815260046020908152604090912091925061128f908601866124f6565b81546001600160a01b0319166001600160a01b03919091161781556112b760208601866128b0565b60018301916112c791908361296a565b50805460ff60a01b1916600160a01b17815560035460028201554260068201558160056112f760208801886128b0565b6040516113059291906128fd565b90815260405190819003602001902055611320600683611ebe565b5060058101839055600481018390556000546001600160a01b0316639828ce868361134e60208901896124f6565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260448101869052606401600060405180830381600087803b15801561139c57600080fd5b505af11580156113b0573d6000803e3d6000fd5b5050505060008060009054906101000a90046001600160a01b03166001600160a01b031663e7a6b7846040518163ffffffff1660e01b8152600401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c9190612ae7565b6001600160a01b03168460405160006040518083038185875af1925050503d8060008114611476576040519150601f19603f3d011682016040523d82523d6000602084013e61147b565b606091505b505090508061149d576040516312171d8360e31b815260040160405180910390fd5b827fd568f486da04b49b70afcf7b829e7f9e8963338430f4e4befd65129fdc993bf56114cc60208901896124f6565b6114d960208a018a6128b0565b6003546040516114ec9493929190612b1d565b60405180910390a2827fa7ab1230134c09caa1e7d69e394e58c9774afb4c08d4a13209d3a74a72e0e39460016040516115259190612b53565b60405180910390a25050505050610a38611aea565b600080611548606486612a9f565b905060006301e1338061155b8584612a88565b6115659190612a9f565b9050600061157282610d6a565b9050670de0b6b3a76400006115878183612ac1565b6115919088612a88565b61159b9190612a9f565b979650505050505050565b600081815260046020526040812060058101546115cb57670de0b6b3a7640000610f67565b60058101546004820154610f5d90670de0b6b3a7640000612a88565b6115f08261099e565b6115f981611afb565b6109da8383611bca565b61160b61226a565b600060058360405161161d9190612b61565b9081526020016040518091039020549050610f6781610be9565b61163f611a30565b600080516020612c8683398151915261165781611afb565b61166f600080516020612c8683398151915233610d34565b61168c5760405163ea8e4eb560e01b815260040160405180910390fd5b600085815260046020526040902060018154600160a01b900460ff1660028111156116b9576116b9612557565b146116d75760405163ad0d278b60e01b815260040160405180910390fd5b821561171757848160050160008282546116f19190612ad4565b925050819055508381600401600082825461170c9190612ad4565b9091555061174c9050565b8481600501600082825461172b9190612ac1565b92505081905550838160040160008282546117469190612ac1565b90915550505b505050505050565b61175c611a30565b600081815260046020526040902060018154600160a01b900460ff16600281111561178957611789612557565b146117a75760405163ad0d278b60e01b815260040160405180910390fd5b60008160060154426117b99190612ac1565b9050806000036117c857505050565b60006117dd836002015484600401548461153a565b905082600301548111156117f2575060038201545b808360030160008282546118069190612ac1565b92505081905550808360040160008282546118219190612ad4565b909155505042600684015560405181815284907f1bace2b9ccc89d67d840a89b412ec371627fdba942715a6226aec894c66f4ad290602001610adc565b6000611868611eca565b805490915060ff600160401b82041615906001600160401b031660008115801561188f5750825b90506000826001600160401b031660011480156118ab5750303b155b9050811580156118b9575080155b156118d75760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561190057845460ff60401b1916600160401b1785555b611908611eee565b611910611eee565b611918611ef6565b611920611f06565b600080546001600160a01b0319166001600160a01b038a161781556002889055600387905561194f908a611b29565b50611968600080516020612ca68339815191528a611b29565b50611981600080516020612c8683398151915289611b29565b5083156119c857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b600080516020612ca68339815191526119eb81611afb565b600088815260046020526040902060018101611a078982612b7d565b506002810196909655506003850193909355600484019190915560058301556006909101555050565b611a38610bd4565b15611a565760405163d93c066560e01b815260040160405180910390fd5b565b6000611a62611f16565b805490915060011901611a8857604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60008181805b8251811015611adf57828181518110611aaf57611aaf612c36565b6020910101516001600160f81b031916600160fd1b14611ad75781611ad381612b04565b9250505b600101611a94565b506003109392505050565b6000611af4611f16565b6001905550565b610a388133611f3a565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b600080611b34611b05565b9050611b408484610d34565b611bc0576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611b763390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106c9565b60009150506106c9565b600080611bd5611b05565b9050611be18484610d34565b15611bc0576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106c9565b611c4a611f73565b6000611c54611e53565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611c8e9190612678565b60405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611d2057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611d14600080516020612c66833981519152546001600160a01b031690565b6001600160a01b031614155b15611a565760405163703e46dd60e11b815260040160405180910390fd5b600061097c81611afb565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611da3575060408051601f3d908101601f19168201909252611da091810190612c4c565b60015b611dc25781604051634c9c8ce360e01b8152600401610dca9190612678565b600080516020612c668339815191528114611df357604051632a87526960e21b815260048101829052602401610dca565b610a138383611f98565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a565760405163703e46dd60e11b815260040160405180910390fd5b60606000610f6783611fee565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b611e7f611a30565b6000611e89611e53565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c813390565b6000610f67838361204a565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611a56612099565b611efe612099565b611a566120be565b611f0e612099565b611a566120c6565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b611f448282610d34565b61097c5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610dca565b611f7b610bd4565b611a5657604051638dfc202b60e01b815260040160405180910390fd5b611fa1826120e3565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611fe657610a13828261213f565b61097c6121b5565b60608160000180548060200260200160405190810160405280929190818152602001828054801561203e57602002820191906000526020600020905b81548152602001906001019080831161202a575b50505050509050919050565b6000818152600183016020526040812054612091575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106c9565b5060006106c9565b6120a16121d4565b611a5657604051631afcd79f60e31b815260040160405180910390fd5b611aea612099565b6120ce612099565b60006120d8611e53565b805460ff1916905550565b806001600160a01b03163b6000036121105780604051634c9c8ce360e01b8152600401610dca9190612678565b600080516020612c6683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161215c9190612b61565b600060405180830381855af49150503d8060008114612197576040519150601f19603f3d011682016040523d82523d6000602084013e61219c565b606091505b50915091506121ac8583836121ee565b95945050505050565b3415611a565760405163b398979f60e01b815260040160405180910390fd5b60006121de611eca565b54600160401b900460ff16919050565b606082612203576121fe82612241565b610f67565b815115801561221a57506001600160a01b0384163b155b1561223a5783604051639996b31560e01b8152600401610dca9190612678565b5080610f67565b8051156122515780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040805161012081018252600080825260208201819052909182019081526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156122c857600080fd5b81356001600160e01b031981168114610f6757600080fd5b6000604082840312156122f257600080fd5b50919050565b6000806040838503121561230b57600080fd5b8235915060208301356001600160401b0381111561232857600080fd5b612334858286016122e0565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561236e5761236e61233e565b604051601f8501601f19908116603f011681019082821181831017156123965761239661233e565b816040528093508581528686860111156123af57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126123da57600080fd5b610f6783833560208501612354565b6000602082840312156123fb57600080fd5b81356001600160401b0381111561241157600080fd5b610fba848285016123c9565b60006020828403121561242f57600080fd5b5035919050565b6001600160a01b0381168114610a3857600080fd5b6000806040838503121561245e57600080fd5b82359150602083013561247081612436565b809150509250929050565b6000806040838503121561248e57600080fd5b50508035926020909101359150565b600080604083850312156124b057600080fd5b82356124bb81612436565b915060208301356001600160401b038111156124d657600080fd5b8301601f810185136124e757600080fd5b61233485823560208401612354565b60006020828403121561250857600080fd5b8135610f6781612436565b6020808252825182820181905260009190848201906040850190845b8181101561254b5783518352928401929184019160010161252f565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6003811061258b57634e487b7160e01b600052602160045260246000fd5b9052565b60005b838110156125aa578181015183820152602001612592565b50506000910152565b600081518084526125cb81602086016020860161258f565b601f01601f19169290920160200192915050565b60208152815160208201526000602083015161260660408401826001600160a01b03169052565b506040830151612619606084018261256d565b5060608301516101208060808501526126366101408501836125b3565b9150608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b6001600160a01b0391909116815260200190565b602081526000610f6760208301846125b3565b6000602082840312156126b157600080fd5b81356001600160401b038111156126c757600080fd5b610fba848285016122e0565b6000806000606084860312156126e857600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561271557600080fd5b8435935060208501359250604085013591506060850135801515811461273a57600080fd5b939692955090935050565b6000806000806080858703121561275b57600080fd5b843561276681612436565b9350602085013561277681612436565b93969395505050506040820135916060013590565b600080600080600080600060e0888a0312156127a657600080fd5b8735965060208801356001600160401b038111156127c357600080fd5b6127cf8a828b016123c9565b979a9799505050506040860135956060810135956080820135955060a0820135945060c09091013592509050565b600181811c9082168061281157607f821691505b6020821081036122f257634e487b7160e01b600052602260045260246000fd5b6000815461283e816127fd565b60018281168015612856576001811461286b5761289a565b60ff198416875282151583028701945061289a565b8560005260208060002060005b858110156128915781548a820152908401908201612878565b50505082870194505b5050505092915050565b6000610f678284612831565b6000808335601e198436030181126128c757600080fd5b8301803591506001600160401b038211156128e157600080fd5b6020019150368190038213156128f657600080fd5b9250929050565b8183823760009101908152919050565b601f821115610a13576000816000526020600020601f850160051c810160208610156129365750805b601f850160051c820191505b8181101561174c57828155600101612942565b600019600383901b1c191660019190911b1790565b6001600160401b038311156129815761298161233e565b6129958361298f83546127fd565b8361290d565b6000601f8411600181146129c357600085156129b15750838201355b6129bb8682612955565b845550612a1d565b600083815260209020601f19861690835b828110156129f457868501358255602094850194600190920191016129d4565b5086821015612a115760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906121ac9083018486612a24565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106c9576106c9612a72565b600082612abc57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156106c9576106c9612a72565b808201808211156106c9576106c9612a72565b600060208284031215612af957600080fd5b8151610f6781612436565b600060018201612b1657612b16612a72565b5060010190565b6001600160a01b0385168152606060208201819052600090612b429083018587612a24565b905082604083015295945050505050565b602081016106c9828461256d565b60008251612b7381846020870161258f565b9190910192915050565b81516001600160401b03811115612b9657612b9661233e565b612baa81612ba484546127fd565b8461290d565b602080601f831160018114612bd95760008415612bc75750858301515b612bd18582612955565b86555061174c565b600085815260208120601f198616915b82811015612c0857888601518255948401946001909101908401612be9565b5085821015612c265787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612c5e57600080fd5b505191905056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6148e2a0228967e62cb0646b289b47d74a00aeee1b1387e9d6aa956c8edcf065339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220ee691542fc6ad53b734bb5eb0f8fdca32018621c6f07d8cf8c9bf2dd906c3fbb64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101c05760003560e01c806301ffc9a7146101c5578063035c2481146101fa5780630d6c032b1461021c57806320f66e4f14610262578063248a9ca3146102825780632f2ff15d146102a257806336568abe146102c25780633f4ba83a146102e2578063449de32c146102f75780634f1ef2861461031757806352d1902d1461032a57806354d3d52a1461033f57806354fd4d501461035f57806356a46902146103735780635c975abb1461039557806361f927a1146103aa5780636331883b146103cc57806368bd646a146103f95780638456cb591461042657806391d148541461043b578063944da3fc1461045b578063a1a4239a1461047b578063a217fddf1461049b578063ad3cb1cc146104b0578063b29c41da146104ee578063bd0292521461050e578063beceed3914610524578063c04f712f14610537578063cf7beec31461054d578063cfc4481514610560578063d0a08a6c14610580578063d547741f146105a0578063d55b1981146105c0578063dccca299146105e0578063de230a66146105f6578063e6ef675b14610616578063eb990c5914610636578063f874225414610656578063fa54717a14610678575b600080fd5b3480156101d157600080fd5b506101e56101e03660046122b6565b610698565b60405190151581526020015b60405180910390f35b34801561020657600080fd5b5061021a6102153660046122f8565b6106cf565b005b34801561022857600080fd5b506102546102373660046123e9565b805160208183018101805160058252928201919093012091525481565b6040519081526020016101f1565b34801561026e57600080fd5b5061021a61027d36600461241d565b610980565b34801561028e57600080fd5b5061025461029d36600461241d565b61099e565b3480156102ae57600080fd5b5061021a6102bd36600461244b565b6109be565b3480156102ce57600080fd5b5061021a6102dd36600461244b565b6109e0565b3480156102ee57600080fd5b5061021a610a18565b34801561030357600080fd5b5061021a61031236600461247b565b610a3b565b61021a61032536600461249d565b610aea565b34801561033657600080fd5b50610254610b05565b34801561034b57600080fd5b5061021a61035a3660046124f6565b610b22565b34801561036b57600080fd5b506001610254565b34801561037f57600080fd5b50610388610bc3565b6040516101f19190612513565b3480156103a157600080fd5b506101e5610bd4565b3480156103b657600080fd5b50610254600080516020612c8683398151915281565b3480156103d857600080fd5b506103ec6103e736600461241d565b610be9565b6040516101f191906125df565b34801561040557600080fd5b50600054610419906001600160a01b031681565b6040516101f19190612678565b34801561043257600080fd5b5061021a610d14565b34801561044757600080fd5b506101e561045636600461244b565b610d34565b34801561046757600080fd5b5061025461047636600461241d565b610d6a565b34801561048757600080fd5b5061025461049636600461241d565b610f1b565b3480156104a757600080fd5b50610254600081565b3480156104bc57600080fd5b506104e1604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101f1919061268c565b3480156104fa57600080fd5b5061025461050936600461241d565b610f6e565b34801561051a57600080fd5b5061025460035481565b61021a61053236600461241d565b610fc2565b34801561054357600080fd5b5061025460015481565b61021a61055b36600461269f565b61116e565b34801561056c57600080fd5b5061025461057b3660046126d3565b61153a565b34801561058c57600080fd5b5061025461059b36600461241d565b6115a6565b3480156105ac57600080fd5b5061021a6105bb36600461244b565b6115e7565b3480156105cc57600080fd5b506103ec6105db3660046123e9565b611603565b3480156105ec57600080fd5b5061025460025481565b34801561060257600080fd5b5061021a6106113660046126ff565b611637565b34801561062257600080fd5b5061021a61063136600461241d565b611754565b34801561064257600080fd5b5061021a610651366004612745565b61185e565b34801561066257600080fd5b50610254600080516020612ca683398151915281565b34801561068457600080fd5b5061021a61069336600461278b565b6119d3565b60006001600160e01b03198216637965db0b60e01b14806106c957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106d7611a30565b6106df611a58565b60008281526004602052604090205482906001600160a01b031633146107185760405163fef2862960e01b815260040160405180910390fd5b600061072760208401846124f6565b6001600160a01b03160361074e5760405163e6c4247b60e01b815260040160405180910390fd5b600083815260046020526040902060018154600160a01b900460ff16600281111561077b5761077b612557565b146107995760405163ad0d278b60e01b815260040160405180910390fd5b806001016040516107aa91906128a4565b6040519081900390206107c060208501856128b0565b6040516107ce9291906128fd565b6040518091039020146108f75760056107ea60208501856128b0565b6040516107f89291906128fd565b908152602001604051809103902054600014158061085d575061085b61082160208501856128b0565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a8e92505050565b155b1561087b5760405163430f13b360e01b815260040160405180910390fd5b600060058260010160405161089091906128a4565b9081526020016040518091039020819055508360058480602001906108b591906128b0565b6040516108c39291906128fd565b9081526020016040518091039020819055508280602001906108e591906128b0565b60018301916108f591908361296a565b505b61090460208401846124f6565b81546001600160a01b0319166001600160a01b0391909116178155837fc18055339d3481a334f2bf553f5687d28178158490c8ad81a86a4ab03adc347061094e60208601866124f6565b61095b60208701876128b0565b60405161096a93929190612a4d565b60405180910390a2505061097c611aea565b5050565b600080516020612ca683398151915261099881611afb565b50600255565b6000806109a9611b05565b60009384526020525050604090206001015490565b6109c78261099e565b6109d081611afb565b6109da8383611b29565b50505050565b6001600160a01b0381163314610a095760405163334bd91960e11b815260040160405180910390fd5b610a138282611bca565b505050565b600080516020612ca6833981519152610a3081611afb565b610a38611c42565b50565b600080516020612ca6833981519152610a5381611afb565b600083815260046020526040902060018154600160a01b900460ff166002811115610a8057610a80612557565b14610a9e5760405163ad0d278b60e01b815260040160405180910390fd5b610aa784611754565b6002810183905560405183815284907f66f9a9bffa3173cfd88573ba6e37b71c50501deae5c916c376815859973f7e47906020015b60405180910390a250505050565b610af2611c99565b610afb82611d3e565b61097c8282611d49565b6000610b0f611dfd565b50600080516020612c6683398151915290565b600080516020612ca6833981519152610b3a81611afb565b6001600160a01b038216610b615760405163e6c4247b60e01b815260040160405180910390fd5b600054610b8690600080516020612c86833981519152906001600160a01b0316611bca565b50610b9f600080516020612c8683398151915283611b29565b5050600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060610bcf6006611e46565b905090565b600080610bdf611e53565b5460ff1692915050565b610bf161226a565b60008281526004602090815260409182902082516101208101845285815281546001600160a01b038116938201939093529092909190820190600160a01b900460ff166002811115610c4557610c45612557565b8152602001826001018054610c59906127fd565b80601f0160208091040260200160405190810160405280929190818152602001828054610c85906127fd565b8015610cd25780601f10610ca757610100808354040283529160200191610cd2565b820191906000526020600020905b815481529060010190602001808311610cb557829003601f168201915b50505050508152602001826002015481526020018260030154815260200182600401548152602001826005015481526020018260060154815250915050919050565b600080516020612ca6833981519152610d2c81611afb565b610a38611e77565b600080610d3f611b05565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b600081680248ce36a70cb26b3e198113610d875750600092915050565b680755bf798b4a1bf1e58112610dd35760405162461bcd60e51b815260206004820152600c60248201526b4558505f4f564552464c4f5760a01b60448201526064015b60405180910390fd5b6503782dace9d9604e82901b059050600060606bb17217f7d1cf79abc9e3b39883821b056001605f1b01901d6bb17217f7d1cf79abc9e3b39881029092036c240c330e9fb2d9cbaf0fd5aafb1981018102606090811d6d0277594991cfc85f6e2461837cd9018202811d6d1a521255e34f6a5061b25ef1c9c319018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d6e02c72388d9f74f51a9331fed693f1419018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084016d01d3967ed30fc4f89c02bab5708119010290911d6e0587f503bb6ea29d25fcb740196450019091026d360d7aeea093263ecc6e0ecb291760621b010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3929092039190911c9392505050565b6000818152600460208190526040822090810154610f4157670de0b6b3a7640000610f67565b60048101546005820154610f5d90670de0b6b3a7640000612a88565b610f679190612a9f565b9392505050565b6000818152600460205260408120600201548190610f8e90606490612a9f565b90506000610f9b82610d6a565b9050610faf670de0b6b3a764000082612ac1565b610fba906064612a88565b949350505050565b610fca611a30565b600081815260046020526040902060018154600160a01b900460ff166002811115610ff757610ff7612557565b146110155760405163ad0d278b60e01b815260040160405180910390fd5b3460000361103657604051633494a40d60e21b815260040160405180910390fd5b3481600301600082825461104a9190612ad4565b909155505060008054604080516339e9ade160e21b815290516001600160a01b039092169163e7a6b784916004808201926020929091908290030181865afa15801561109a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110be9190612ae7565b6001600160a01b03163460405160006040518083038185875af1925050503d8060008114611108576040519150601f19603f3d011682016040523d82523d6000602084013e61110d565b606091505b505090508061112f576040516312171d8360e31b815260040160405180910390fd5b827f40df43107e8b4d467127964bd3c966687c0a6a39aaede970755397fd09535e983460405161116191815260200190565b60405180910390a2505050565b611176611a30565b61117e611a58565b600080516020612ca683398151915261119681611afb565b60006111a560208401846124f6565b6001600160a01b0316036111cc5760405163e6c4247b60e01b815260040160405180910390fd5b60056111db60208401846128b0565b6040516111e99291906128fd565b9081526020016040518091039020546000141580611214575061121261082160208401846128b0565b155b156112325760405163430f13b360e01b815260040160405180910390fd5b6002543414611254576040516307e5667760e31b815260040160405180910390fd5b6000349050600060016000815461126a90612b04565b9182905550600081815260046020908152604090912091925061128f908601866124f6565b81546001600160a01b0319166001600160a01b03919091161781556112b760208601866128b0565b60018301916112c791908361296a565b50805460ff60a01b1916600160a01b17815560035460028201554260068201558160056112f760208801886128b0565b6040516113059291906128fd565b90815260405190819003602001902055611320600683611ebe565b5060058101839055600481018390556000546001600160a01b0316639828ce868361134e60208901896124f6565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260448101869052606401600060405180830381600087803b15801561139c57600080fd5b505af11580156113b0573d6000803e3d6000fd5b5050505060008060009054906101000a90046001600160a01b03166001600160a01b031663e7a6b7846040518163ffffffff1660e01b8152600401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c9190612ae7565b6001600160a01b03168460405160006040518083038185875af1925050503d8060008114611476576040519150601f19603f3d011682016040523d82523d6000602084013e61147b565b606091505b505090508061149d576040516312171d8360e31b815260040160405180910390fd5b827fd568f486da04b49b70afcf7b829e7f9e8963338430f4e4befd65129fdc993bf56114cc60208901896124f6565b6114d960208a018a6128b0565b6003546040516114ec9493929190612b1d565b60405180910390a2827fa7ab1230134c09caa1e7d69e394e58c9774afb4c08d4a13209d3a74a72e0e39460016040516115259190612b53565b60405180910390a25050505050610a38611aea565b600080611548606486612a9f565b905060006301e1338061155b8584612a88565b6115659190612a9f565b9050600061157282610d6a565b9050670de0b6b3a76400006115878183612ac1565b6115919088612a88565b61159b9190612a9f565b979650505050505050565b600081815260046020526040812060058101546115cb57670de0b6b3a7640000610f67565b60058101546004820154610f5d90670de0b6b3a7640000612a88565b6115f08261099e565b6115f981611afb565b6109da8383611bca565b61160b61226a565b600060058360405161161d9190612b61565b9081526020016040518091039020549050610f6781610be9565b61163f611a30565b600080516020612c8683398151915261165781611afb565b61166f600080516020612c8683398151915233610d34565b61168c5760405163ea8e4eb560e01b815260040160405180910390fd5b600085815260046020526040902060018154600160a01b900460ff1660028111156116b9576116b9612557565b146116d75760405163ad0d278b60e01b815260040160405180910390fd5b821561171757848160050160008282546116f19190612ad4565b925050819055508381600401600082825461170c9190612ad4565b9091555061174c9050565b8481600501600082825461172b9190612ac1565b92505081905550838160040160008282546117469190612ac1565b90915550505b505050505050565b61175c611a30565b600081815260046020526040902060018154600160a01b900460ff16600281111561178957611789612557565b146117a75760405163ad0d278b60e01b815260040160405180910390fd5b60008160060154426117b99190612ac1565b9050806000036117c857505050565b60006117dd836002015484600401548461153a565b905082600301548111156117f2575060038201545b808360030160008282546118069190612ac1565b92505081905550808360040160008282546118219190612ad4565b909155505042600684015560405181815284907f1bace2b9ccc89d67d840a89b412ec371627fdba942715a6226aec894c66f4ad290602001610adc565b6000611868611eca565b805490915060ff600160401b82041615906001600160401b031660008115801561188f5750825b90506000826001600160401b031660011480156118ab5750303b155b9050811580156118b9575080155b156118d75760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561190057845460ff60401b1916600160401b1785555b611908611eee565b611910611eee565b611918611ef6565b611920611f06565b600080546001600160a01b0319166001600160a01b038a161781556002889055600387905561194f908a611b29565b50611968600080516020612ca68339815191528a611b29565b50611981600080516020612c8683398151915289611b29565b5083156119c857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b600080516020612ca68339815191526119eb81611afb565b600088815260046020526040902060018101611a078982612b7d565b506002810196909655506003850193909355600484019190915560058301556006909101555050565b611a38610bd4565b15611a565760405163d93c066560e01b815260040160405180910390fd5b565b6000611a62611f16565b805490915060011901611a8857604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60008181805b8251811015611adf57828181518110611aaf57611aaf612c36565b6020910101516001600160f81b031916600160fd1b14611ad75781611ad381612b04565b9250505b600101611a94565b506003109392505050565b6000611af4611f16565b6001905550565b610a388133611f3a565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b600080611b34611b05565b9050611b408484610d34565b611bc0576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611b763390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106c9565b60009150506106c9565b600080611bd5611b05565b9050611be18484610d34565b15611bc0576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106c9565b611c4a611f73565b6000611c54611e53565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611c8e9190612678565b60405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611d2057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611d14600080516020612c66833981519152546001600160a01b031690565b6001600160a01b031614155b15611a565760405163703e46dd60e11b815260040160405180910390fd5b600061097c81611afb565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611da3575060408051601f3d908101601f19168201909252611da091810190612c4c565b60015b611dc25781604051634c9c8ce360e01b8152600401610dca9190612678565b600080516020612c668339815191528114611df357604051632a87526960e21b815260048101829052602401610dca565b610a138383611f98565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a565760405163703e46dd60e11b815260040160405180910390fd5b60606000610f6783611fee565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b611e7f611a30565b6000611e89611e53565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c813390565b6000610f67838361204a565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611a56612099565b611efe612099565b611a566120be565b611f0e612099565b611a566120c6565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b611f448282610d34565b61097c5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610dca565b611f7b610bd4565b611a5657604051638dfc202b60e01b815260040160405180910390fd5b611fa1826120e3565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611fe657610a13828261213f565b61097c6121b5565b60608160000180548060200260200160405190810160405280929190818152602001828054801561203e57602002820191906000526020600020905b81548152602001906001019080831161202a575b50505050509050919050565b6000818152600183016020526040812054612091575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106c9565b5060006106c9565b6120a16121d4565b611a5657604051631afcd79f60e31b815260040160405180910390fd5b611aea612099565b6120ce612099565b60006120d8611e53565b805460ff1916905550565b806001600160a01b03163b6000036121105780604051634c9c8ce360e01b8152600401610dca9190612678565b600080516020612c6683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161215c9190612b61565b600060405180830381855af49150503d8060008114612197576040519150601f19603f3d011682016040523d82523d6000602084013e61219c565b606091505b50915091506121ac8583836121ee565b95945050505050565b3415611a565760405163b398979f60e01b815260040160405180910390fd5b60006121de611eca565b54600160401b900460ff16919050565b606082612203576121fe82612241565b610f67565b815115801561221a57506001600160a01b0384163b155b1561223a5783604051639996b31560e01b8152600401610dca9190612678565b5080610f67565b8051156122515780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040805161012081018252600080825260208201819052909182019081526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156122c857600080fd5b81356001600160e01b031981168114610f6757600080fd5b6000604082840312156122f257600080fd5b50919050565b6000806040838503121561230b57600080fd5b8235915060208301356001600160401b0381111561232857600080fd5b612334858286016122e0565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561236e5761236e61233e565b604051601f8501601f19908116603f011681019082821181831017156123965761239661233e565b816040528093508581528686860111156123af57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126123da57600080fd5b610f6783833560208501612354565b6000602082840312156123fb57600080fd5b81356001600160401b0381111561241157600080fd5b610fba848285016123c9565b60006020828403121561242f57600080fd5b5035919050565b6001600160a01b0381168114610a3857600080fd5b6000806040838503121561245e57600080fd5b82359150602083013561247081612436565b809150509250929050565b6000806040838503121561248e57600080fd5b50508035926020909101359150565b600080604083850312156124b057600080fd5b82356124bb81612436565b915060208301356001600160401b038111156124d657600080fd5b8301601f810185136124e757600080fd5b61233485823560208401612354565b60006020828403121561250857600080fd5b8135610f6781612436565b6020808252825182820181905260009190848201906040850190845b8181101561254b5783518352928401929184019160010161252f565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6003811061258b57634e487b7160e01b600052602160045260246000fd5b9052565b60005b838110156125aa578181015183820152602001612592565b50506000910152565b600081518084526125cb81602086016020860161258f565b601f01601f19169290920160200192915050565b60208152815160208201526000602083015161260660408401826001600160a01b03169052565b506040830151612619606084018261256d565b5060608301516101208060808501526126366101408501836125b3565b9150608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b6001600160a01b0391909116815260200190565b602081526000610f6760208301846125b3565b6000602082840312156126b157600080fd5b81356001600160401b038111156126c757600080fd5b610fba848285016122e0565b6000806000606084860312156126e857600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561271557600080fd5b8435935060208501359250604085013591506060850135801515811461273a57600080fd5b939692955090935050565b6000806000806080858703121561275b57600080fd5b843561276681612436565b9350602085013561277681612436565b93969395505050506040820135916060013590565b600080600080600080600060e0888a0312156127a657600080fd5b8735965060208801356001600160401b038111156127c357600080fd5b6127cf8a828b016123c9565b979a9799505050506040860135956060810135956080820135955060a0820135945060c09091013592509050565b600181811c9082168061281157607f821691505b6020821081036122f257634e487b7160e01b600052602260045260246000fd5b6000815461283e816127fd565b60018281168015612856576001811461286b5761289a565b60ff198416875282151583028701945061289a565b8560005260208060002060005b858110156128915781548a820152908401908201612878565b50505082870194505b5050505092915050565b6000610f678284612831565b6000808335601e198436030181126128c757600080fd5b8301803591506001600160401b038211156128e157600080fd5b6020019150368190038213156128f657600080fd5b9250929050565b8183823760009101908152919050565b601f821115610a13576000816000526020600020601f850160051c810160208610156129365750805b601f850160051c820191505b8181101561174c57828155600101612942565b600019600383901b1c191660019190911b1790565b6001600160401b038311156129815761298161233e565b6129958361298f83546127fd565b8361290d565b6000601f8411600181146129c357600085156129b15750838201355b6129bb8682612955565b845550612a1d565b600083815260209020601f19861690835b828110156129f457868501358255602094850194600190920191016129d4565b5086821015612a115760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906121ac9083018486612a24565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106c9576106c9612a72565b600082612abc57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156106c9576106c9612a72565b808201808211156106c9576106c9612a72565b600060208284031215612af957600080fd5b8151610f6781612436565b600060018201612b1657612b16612a72565b5060010190565b6001600160a01b0385168152606060208201819052600090612b429083018587612a24565b905082604083015295945050505050565b602081016106c9828461256d565b60008251612b7381846020870161258f565b9190910192915050565b81516001600160401b03811115612b9657612b9661233e565b612baa81612ba484546127fd565b8461290d565b602080601f831160018114612bd95760008415612bc75750858301515b612bd18582612955565b86555061174c565b600085815260208120601f198616915b82811015612c0857888601518255948401946001909101908401612be9565b5085821015612c265787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612c5e57600080fd5b505191905056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6148e2a0228967e62cb0646b289b47d74a00aeee1b1387e9d6aa956c8edcf065339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220ee691542fc6ad53b734bb5eb0f8fdca32018621c6f07d8cf8c9bf2dd906c3fbb64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "_calculateExponential(uint256)": {
        "details": "Approximates e^x using Padé approximation This function is a copy of wadExp from  solmate/utils/SignedWadMath.sol",
        "params": {
          "exponent": "The exponent multiplied by 1e18"
        },
        "returns": {
          "r": " = e^x multiplied by 1e18"
        }
      },
      "activeEntitiesValues()": {
        "returns": {
          "_0": "uint256[] Array of active entity IDs"
        }
      },
      "addRewards(uint256)": {
        "params": {
          "entityId": "The entity ID to add rewards to"
        }
      },
      "calculateContinuousAPYByEntity(uint256)": {
        "details": "Calculates continuously compounded APY for an entity",
        "params": {
          "entityId": "The entity ID"
        },
        "returns": {
          "_0": "The compounded APY"
        }
      },
      "calculateContinuousCompoundingYield(uint256,uint256,uint256)": {
        "details": "Calculates continuously compounded APY",
        "params": {
          "apy": "The annual interest rate where 6% = 6e18",
          "principal": "The initial amount",
          "time": "Time in seconds for which the interest is calculated"
        },
        "returns": {
          "_0": "The final amount after applying continuous compounding"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createEntity((address,string))": {
        "params": {
          "entityRegistrationInfo": "The entity registration information"
        }
      },
      "entities(uint256)": {
        "params": {
          "entityId": "The ID of the entity"
        },
        "returns": {
          "_0": "Entity information"
        }
      },
      "entityByName(string)": {
        "params": {
          "entityName": "The name of the entity"
        },
        "returns": {
          "_0": "Entity information"
        }
      },
      "entityShareToVana(uint256)": {
        "params": {
          "entityId": "ID of the entity"
        },
        "returns": {
          "_0": "uint256                          corresponding VANA value"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256)": {
        "params": {
          "ownerAddress": "The admin address",
          "vanaPoolStakingAddress": "The address of the VanaPoolStaking contract"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "processRewards(uint256)": {
        "params": {
          "entityId": "The entity ID to process rewards for"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateEntity(uint256,(address,string))": {
        "params": {
          "entityId": "The ID of the entity",
          "entityRegistrationInfo": "The updated entity information"
        }
      },
      "updateEntityMaxAPY(uint256,uint256)": {
        "params": {
          "entityId": "The entity ID",
          "newMaxAPY": "The new max APY in basis points (1% = 100)"
        }
      },
      "updateEntityPool(uint256,uint256,uint256,bool)": {
        "params": {
          "amount": "The amount of VANA to add or remove",
          "entityId": "The entity ID",
          "isStake": "True if staking, false if unstaking",
          "shares": "The amount of shares to add or remove"
        }
      },
      "updateMinRegistrationStake(uint256)": {
        "params": {
          "newMinRegistrationStake": "The new minimum registration stake"
        }
      },
      "updateVanaPool(address)": {
        "params": {
          "newVanaPoolStakingAddress": "The new VanaPoolStaking contract address"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "vanaToEntityShare(uint256)": {
        "params": {
          "entityId": "ID of the entity"
        },
        "returns": {
          "_0": "uint256                          corresponding shares amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activeEntitiesValues()": {
        "notice": "Get all active entities"
      },
      "addRewards(uint256)": {
        "notice": "Add rewards to an entity's locked reward pool"
      },
      "createEntity((address,string))": {
        "notice": "Creates a new entity"
      },
      "entities(uint256)": {
        "notice": "Gets entity information"
      },
      "entityByName(string)": {
        "notice": "Gets entity information by name"
      },
      "entityShareToVana(uint256)": {
        "notice": "Convert share to VANA for a specific entity"
      },
      "initialize(address,address,uint256,uint256)": {
        "notice": "Initializes the contract"
      },
      "pause()": {
        "notice": "Pauses the contract"
      },
      "processRewards(uint256)": {
        "notice": "Process rewards for an entity"
      },
      "unpause()": {
        "notice": "Unpauses the contract"
      },
      "updateEntity(uint256,(address,string))": {
        "notice": "Updates an entity"
      },
      "updateEntityMaxAPY(uint256,uint256)": {
        "notice": "Update an entity's max APY"
      },
      "updateEntityPool(uint256,uint256,uint256,bool)": {
        "notice": "Update entity stake information - can only be called by VanaPoolStaking"
      },
      "updateMinRegistrationStake(uint256)": {
        "notice": "Updates the minimum registration stake"
      },
      "updateVanaPool(address)": {
        "notice": "Updates the VanaPoolStaking contract address"
      },
      "vanaToEntityShare(uint256)": {
        "notice": "Convert VANA to shares for a specific entity"
      },
      "version()": {
        "notice": "Returns the version of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4168,
        "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
        "label": "vanaPoolStaking",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVanaPoolStaking)4304"
      },
      {
        "astId": 4171,
        "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
        "label": "entitiesCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4174,
        "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
        "label": "minRegistrationStake",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4177,
        "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
        "label": "maxAPYDefault",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4182,
        "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
        "label": "_entities",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Entity)3987_storage)"
      },
      {
        "astId": 4187,
        "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
        "label": "entityNameToId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 4190,
        "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
        "label": "_activeEntityIds",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(UintSet)2453_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVanaPoolStaking)4304": {
        "encoding": "inplace",
        "label": "contract IVanaPoolStaking",
        "numberOfBytes": "20"
      },
      "t_enum(EntityStatus)3969": {
        "encoding": "inplace",
        "label": "enum IVanaPoolEntity.EntityStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Entity)3987_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVanaPoolEntity.Entity)",
        "numberOfBytes": "32",
        "value": "t_struct(Entity)3987_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Entity)3987_storage": {
        "encoding": "inplace",
        "label": "struct IVanaPoolEntity.Entity",
        "members": [
          {
            "astId": 3971,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3974,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(EntityStatus)3969"
          },
          {
            "astId": 3976,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3978,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "maxAPY",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3980,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "lockedRewardPool",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3982,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "activeRewardPool",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3984,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3986,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)1981_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1976,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1980,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2453_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2452,
            "contract": "contracts/vanaPoolEntity/VanaPoolEntityImplementation.sol:VanaPoolEntityImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1981_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}