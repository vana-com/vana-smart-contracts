{
  "address": "0xf4c1cc6e2336Da0c8cbCaBc09C49A1dAfB8da90f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CheckpointUnorderedInsertion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLpAddressCannotBeChanged",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochDlpScoreAlreadySaved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakersPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDlpOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotStakeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeAlreadyClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeAlreadyWithdrawn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeWithdrawalTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "DlpBecameEligible",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "DlpDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDlpEligibilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "DlpEligibilityThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakersPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "iconUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "DlpRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDlpSubEligibilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "DlpSubEligibilityThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakersPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "iconUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "DlpUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEligibleDlpsLimit",
          "type": "uint256"
        }
      ],
      "name": "EligibleDlpsLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "EpochCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakesScore",
          "type": "uint256"
        }
      ],
      "name": "EpochDlpScoreSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochDlpsLimit",
          "type": "uint256"
        }
      ],
      "name": "EpochDlpsLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "EpochRewardAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochSize",
          "type": "uint256"
        }
      ],
      "name": "EpochSizeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDlpStakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "MaxDlpStakersPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDlpRegistrationStake",
          "type": "uint256"
        }
      ],
      "name": "MinDlpRegistrationStakeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDlpStakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "MinDlpStakersPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "MinStakeAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardClaimDelay",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "StakeClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStakeWithdrawalDelay",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawalDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeStartBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEpochToClaim",
          "type": "uint256"
        }
      ],
      "name": "claimStakeRewardUntilEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "stakeIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimStakesReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "stakeIds",
          "type": "uint256[]"
        }
      ],
      "name": "closeStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createEpochs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "createEpochsUntilBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "createStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daySize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "deregisterDlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpEligibilityThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "dlpEpochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isTopDlp",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesScore",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "rewardClaimed",
              "type": "bool"
            }
          ],
          "internalType": "struct IDLPRoot.DlpEpochInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        }
      ],
      "name": "dlpIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpSubEligibilityThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "dlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentageEpoch",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "enum IDLPRoot.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "epochIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDLPRoot.DlpInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        }
      ],
      "name": "dlpsByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentageEpoch",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "enum IDLPRoot.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "epochIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDLPRoot.DlpInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibleDlpsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "eligibleDlpsListAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibleDlpsListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibleDlpsListValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochDlpsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "epochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFinalised",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "dlpIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDLPRoot.EpochInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "dlpIds",
          "type": "uint256[]"
        }
      ],
      "name": "estimatedDlpRewardPercentages",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "APY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "EPY",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRoot.DlpRewardApy[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trustedForwarder",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "eligibleDlpsLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epochDlpsLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minDlpStakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDlpStakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minDlpRegistrationStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dlpEligibilityThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dlpSubEligibilityThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeWithdrawalDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardClaimDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epochSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daySize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epochRewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DLPRootImplementation.InitParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDlpStakersPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDlpRegistrationStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDlpStakersPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "epochId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesScore",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRoot.EpochDlpsTotalStakesScore",
          "name": "stakeScore",
          "type": "tuple"
        }
      ],
      "name": "overrideEpochDlpsTotalStakesScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IDLPRoot.DlpRegistration",
          "name": "registrationInfo",
          "type": "tuple"
        }
      ],
      "name": "registerDlp",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardClaimDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "epochId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesScore",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRoot.EpochDlpsTotalStakesScore[]",
          "name": "stakeScore",
          "type": "tuple[]"
        }
      ],
      "name": "saveEpochDlpsTotalStakesScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeWithdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "stakerDlpsListAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakerDlpsListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakerDlpsListValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "stakerListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stakerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "withdrawn",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lastClaimedEpochId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRoot.StakeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "topDlpIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IDLPRoot.DlpRegistration",
          "name": "dlpUpdateInfo",
          "type": "tuple"
        }
      ],
      "name": "updateDlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDlpEligibilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateDlpEligibilityThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDlpSubEligibilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateDlpSubEligibilityThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEligibleDlpsLimit",
          "type": "uint256"
        }
      ],
      "name": "updateEligibleDlpsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochDlpsLimit",
          "type": "uint256"
        }
      ],
      "name": "updateEpochDlpsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "updateEpochRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEpochSize",
          "type": "uint256"
        }
      ],
      "name": "updateEpochSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxDlpStakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDlpStakersPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDlpRegistrationStake",
          "type": "uint256"
        }
      ],
      "name": "updateMinDlpRegistrationStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDlpStakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "updateMinDlpStakersPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRewardClaimDelay",
          "type": "uint256"
        }
      ],
      "name": "updateRewardClaimDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStakeWithdrawalDelay",
          "type": "uint256"
        }
      ],
      "name": "updateStakeWithdrawalDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "updateTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "stakeIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x940f15cbea1f77d39a32528446bbf5652b74cfb4e6d525c70f43fe8db8b93b69",
  "receipt": {
    "to": null,
    "from": "0x34529235dAF0B317D30F8e3120Ef04Dff59aB411",
    "contractAddress": "0xf4c1cc6e2336Da0c8cbCaBc09C49A1dAfB8da90f",
    "transactionIndex": 0,
    "gasUsed": "5345111",
    "logsBloom": "0x
    "blockHash": "0x1379dc2840779b626132025f1c332e104322e7d6fbd97afc5639510830057eac",
    "transactionHash": "0x940f15cbea1f77d39a32528446bbf5652b74cfb4e6d525c70f43fe8db8b93b69",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2651158,
        "transactionHash": "0x940f15cbea1f77d39a32528446bbf5652b74cfb4e6d525c70f43fe8db8b93b69",
        "address": "0xf4c1cc6e2336Da0c8cbCaBc09C49A1dAfB8da90f",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x1379dc2840779b626132025f1c332e104322e7d6fbd97afc5639510830057eac"
      }
    ],
    "blockNumber": 2651158,
    "cumulativeGasUsed": "5345111",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d553865b1a51a45c2112a46c975e44bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLpAddressCannotBeChanged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochDlpScoreAlreadySaved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakersPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDlpOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStakeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeWithdrawalTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"DlpBecameEligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"DlpDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDlpEligibilityThreshold\",\"type\":\"uint256\"}],\"name\":\"DlpEligibilityThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"DlpRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDlpSubEligibilityThreshold\",\"type\":\"uint256\"}],\"name\":\"DlpSubEligibilityThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"DlpUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEligibleDlpsLimit\",\"type\":\"uint256\"}],\"name\":\"EligibleDlpsLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"EpochCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakesScore\",\"type\":\"uint256\"}],\"name\":\"EpochDlpScoreSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochDlpsLimit\",\"type\":\"uint256\"}],\"name\":\"EpochDlpsLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"name\":\"EpochRewardAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"}],\"name\":\"EpochSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDlpStakersPercentage\",\"type\":\"uint256\"}],\"name\":\"MaxDlpStakersPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDlpRegistrationStake\",\"type\":\"uint256\"}],\"name\":\"MinDlpRegistrationStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDlpStakersPercentage\",\"type\":\"uint256\"}],\"name\":\"MinDlpStakersPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStakeAmount\",\"type\":\"uint256\"}],\"name\":\"MinStakeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardClaimDelay\",\"type\":\"uint256\"}],\"name\":\"RewardClaimDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"StakeClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakeWithdrawalDelay\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawalDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"calculateStakeClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"calculateStakeScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEpochToClaim\",\"type\":\"uint256\"}],\"name\":\"claimStakeRewardUntilEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"claimStakesReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"closeStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"createEpochsUntilBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daySize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"deregisterDlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpEligibilityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"dlpEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTopDlp\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesScore\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IDLPRoot.DlpEpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"}],\"name\":\"dlpIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpSubEligibilityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"dlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentageEpoch\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum IDLPRoot.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"epochIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDLPRoot.DlpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"}],\"name\":\"dlpsByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentageEpoch\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum IDLPRoot.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"epochIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDLPRoot.DlpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDlpsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"eligibleDlpsListAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDlpsListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDlpsListValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDlpsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinalised\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDLPRoot.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"}],\"name\":\"estimatedDlpRewardPercentages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EPY\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRoot.DlpRewardApy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eligibleDlpsLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochDlpsLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDlpStakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDlpStakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDlpRegistrationStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpEligibilityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpSubEligibilityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeWithdrawalDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daySize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochRewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DLPRootImplementation.InitParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDlpStakersPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDlpRegistrationStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDlpStakersPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesScore\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRoot.EpochDlpsTotalStakesScore\",\"name\":\"stakeScore\",\"type\":\"tuple\"}],\"name\":\"overrideEpochDlpsTotalStakesScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IDLPRoot.DlpRegistration\",\"name\":\"registrationInfo\",\"type\":\"tuple\"}],\"name\":\"registerDlp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardClaimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesScore\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRoot.EpochDlpsTotalStakesScore[]\",\"name\":\"stakeScore\",\"type\":\"tuple[]\"}],\"name\":\"saveEpochDlpsTotalStakesScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakerDlpsListAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerDlpsListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerDlpsListValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakerListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedEpochId\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRoot.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfDlps\",\"type\":\"uint256\"}],\"name\":\"topDlpIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IDLPRoot.DlpRegistration\",\"name\":\"dlpUpdateInfo\",\"type\":\"tuple\"}],\"name\":\"updateDlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDlpEligibilityThreshold\",\"type\":\"uint256\"}],\"name\":\"updateDlpEligibilityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDlpSubEligibilityThreshold\",\"type\":\"uint256\"}],\"name\":\"updateDlpSubEligibilityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEligibleDlpsLimit\",\"type\":\"uint256\"}],\"name\":\"updateEligibleDlpsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochDlpsLimit\",\"type\":\"uint256\"}],\"name\":\"updateEpochDlpsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochRewardAmount\",\"type\":\"uint256\"}],\"name\":\"updateEpochRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochSize\",\"type\":\"uint256\"}],\"name\":\"updateEpochSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxDlpStakersPercentage\",\"type\":\"uint256\"}],\"name\":\"updateMaxDlpStakersPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDlpRegistrationStake\",\"type\":\"uint256\"}],\"name\":\"updateMinDlpRegistrationStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDlpStakersPercentage\",\"type\":\"uint256\"}],\"name\":\"updateMinDlpStakersPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinStakeAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardClaimDelay\",\"type\":\"uint256\"}],\"name\":\"updateRewardClaimDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakeWithdrawalDelay\",\"type\":\"uint256\"}],\"name\":\"updateStakeWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"updateTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"calculateStakeClaimableAmount(uint256)\":{\"details\":\"Takes into account stake duration, score, and reward distributionThis method is not marked as view because is using a method that modifies state to call it as a view, please using static call\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deregisterDlp(uint256)\":{\"details\":\"Only owner can deregister, must be in valid status\"},\"estimatedDlpRewardPercentages(uint256[])\":{\"details\":\"Calculates based on stake amounts and current epoch parameters\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"topDlpIds(uint256)\":{\"details\":\"Uses insertion sort to maintain ordered list\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"updateDlp(uint256,(address,address,address,uint256,string,string,string,string))\":{\"details\":\"Only DLP owner can update\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateStakeClaimableAmount(uint256)\":{\"notice\":\"Calculates claimable rewards for a stake\"},\"calculateStakeScore(uint256,uint256,uint256)\":{\"notice\":\"Calculates stake score based on amount and duration\"},\"claimStakeRewardUntilEpoch(uint256,uint256)\":{\"notice\":\"Claims rewards for a stake up to specified epoch\"},\"claimStakesReward(uint256[])\":{\"notice\":\"Claims rewards for multiple stakes\"},\"closeStakes(uint256[])\":{\"notice\":\"Closes multiple stakes\"},\"createEpochs()\":{\"notice\":\"Creates epochs up to current block\"},\"createEpochsUntilBlockNumber(uint256)\":{\"notice\":\"Creates epochs up to specified block\"},\"createStake(uint256)\":{\"notice\":\"Creates a new stake for a DLP\"},\"deregisterDlp(uint256)\":{\"notice\":\"Deregisters a DLP\"},\"dlps(uint256)\":{\"notice\":\"Gets DLP information including current stake and status\"},\"estimatedDlpRewardPercentages(uint256[])\":{\"notice\":\"Estimates reward percentages for given DLPs\"},\"overrideEpochDlpsTotalStakesScore((uint256,uint256,uint256))\":{\"notice\":\"Overrides stake scores for DLPs in past epochs\"},\"registerDlp((address,address,address,uint256,string,string,string,string))\":{\"notice\":\"Registers a new DLP with initial stake\"},\"saveEpochDlpsTotalStakesScore((uint256,uint256,uint256)[])\":{\"notice\":\"Updates stake scores for DLPs in past epochs\"},\"topDlpIds(uint256)\":{\"notice\":\"Gets top DLP IDs by stake amount\"},\"updateDlp(uint256,(address,address,address,uint256,string,string,string,string))\":{\"notice\":\"Updates DLP information\"},\"updateDlpEligibilityThreshold(uint256)\":{\"notice\":\"Updates eligibility threshold and adjusts DLP statuses\"},\"updateDlpSubEligibilityThreshold(uint256)\":{\"notice\":\"Updates sub-eligibility threshold and adjusts DLP statuses\"},\"withdrawStakes(uint256[])\":{\"notice\":\"Withdraws multiple closed stakes\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/root/DLPRootImplementation.sol\":\"DLPRootImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *\\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\\n * function only accessible if `msg.data.length == 0`.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /**\\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\\n     * invoke functions on this contract on behalf of other accounts.\\n     *\\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder_) {\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any particular address is the trusted forwarder.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder();\\n    }\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0x14b59e8cd5720c9cd31616450874b462f575bb52b387df2a54dbd26f9a07adf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ContextUpgradeable} from \\\"./ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x1545b1796f0b94f811d95b8b208c0668dacfc7768247d22b63161a47c4c5ef4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/root/DLPRootImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/DLPRootStorageV1.sol\\\";\\n\\ncontract DLPRootImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    MulticallUpgradeable,\\n    ERC2771ContextUpgradeable,\\n    DLPRootStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Checkpoints for Checkpoints.Trace208;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    // Key events for DLP lifecycle and operations\\n    event DlpRegistered(\\n        uint256 indexed dlpId,\\n        address indexed dlpAddress,\\n        address ownerAddress,\\n        address treasuryAddress,\\n        uint256 stakersPercentage,\\n        string name,\\n        string iconUrl,\\n        string website,\\n        string metadata\\n    );\\n\\n    event DlpUpdated(\\n        uint256 indexed dlpId,\\n        address indexed dlpAddress,\\n        address ownerAddress,\\n        address treasuryAddress,\\n        uint256 stakersPercentage,\\n        string name,\\n        string iconUrl,\\n        string website,\\n        string metadata\\n    );\\n\\n    event DlpDeregistered(uint256 indexed dlpId);\\n    event EpochCreated(uint256 epochId);\\n    event EligibleDlpsLimitUpdated(uint256 newEligibleDlpsLimit);\\n    event MinDlpStakersPercentageUpdated(uint256 newMinDlpStakersPercentage);\\n    event MaxDlpStakersPercentageUpdated(uint256 newMaxDlpStakersPercentage);\\n    event MinStakeAmountUpdated(uint256 newMinStakeAmount);\\n    event DlpEligibilityThresholdUpdated(uint256 newDlpEligibilityThreshold);\\n    event DlpSubEligibilityThresholdUpdated(uint256 newDlpSubEligibilityThreshold);\\n    event EpochDlpsLimitUpdated(uint256 newEpochDlpsLimit);\\n    event StakeWithdrawalDelayUpdated(uint256 newStakeWithdrawalDelay);\\n    event RewardClaimDelayUpdated(uint256 newRewardClaimDelay);\\n    event EpochSizeUpdated(uint256 newEpochSize);\\n    event EpochRewardAmountUpdated(uint256 newEpochRewardAmount);\\n    event MinDlpRegistrationStakeUpdated(uint256 newMinDlpRegistrationStake);\\n    event StakeCreated(uint256 stakeId, address indexed staker, uint256 indexed dlpId, uint256 amount);\\n    event StakeClosed(uint256 indexed stakeId);\\n    event StakeWithdrawn(uint256 indexed stakeId);\\n    event DlpBecameEligible(uint256 indexed dlpId);\\n    event EpochDlpScoreSaved(uint256 indexed epochId, uint256 indexed dlpId, uint256 totalStakesScore);\\n\\n    // Custom errors\\n    error InvalidParam();\\n    error InvalidStakeAmount();\\n    error StakeAlreadyWithdrawn();\\n    error StakeNotClosed();\\n    error StakeAlreadyClosed();\\n    error StakeWithdrawalTooEarly();\\n    error InvalidDlpId();\\n    error InvalidDlpStatus();\\n    error InvalidAddress();\\n    error NotDlpOwner();\\n    error NotStakeOwner();\\n    error NothingToClaim();\\n    error InvalidStakersPercentage();\\n    error DLpAddressCannotBeChanged();\\n    error TransferFailed();\\n    error EpochNotEnded();\\n    error EpochDlpScoreAlreadySaved();\\n\\n    modifier onlyDlpOwner(uint256 dlpId) {\\n        if (_dlps[dlpId].ownerAddress != _msgSender()) {\\n            revert NotDlpOwner();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() ERC2771ContextUpgradeable(address(0)) {\\n        _disableInitializers();\\n    }\\n\\n    struct InitParams {\\n        address trustedForwarder;\\n        address payable ownerAddress;\\n        uint256 eligibleDlpsLimit;\\n        uint256 epochDlpsLimit;\\n        uint256 minStakeAmount;\\n        uint256 minDlpStakersPercentage;\\n        uint256 maxDlpStakersPercentage;\\n        uint256 minDlpRegistrationStake;\\n        uint256 dlpEligibilityThreshold;\\n        uint256 dlpSubEligibilityThreshold;\\n        uint256 stakeWithdrawalDelay;\\n        uint256 rewardClaimDelay;\\n        uint256 startBlock;\\n        uint256 epochSize;\\n        uint256 daySize;\\n        uint256 epochRewardAmount;\\n    }\\n\\n    function initialize(InitParams memory params) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        __Multicall_init();\\n\\n        if (\\n            params.minDlpStakersPercentage < 1e16 ||\\n            params.maxDlpStakersPercentage > 100e18 ||\\n            params.minDlpStakersPercentage > params.maxDlpStakersPercentage ||\\n            params.epochDlpsLimit > params.eligibleDlpsLimit ||\\n            params.minStakeAmount > params.minDlpRegistrationStake ||\\n            params.minDlpRegistrationStake > params.dlpSubEligibilityThreshold ||\\n            params.dlpSubEligibilityThreshold > params.dlpEligibilityThreshold\\n        ) {\\n            revert InvalidParam();\\n        }\\n\\n        _trustedForwarder = params.trustedForwarder;\\n        eligibleDlpsLimit = params.eligibleDlpsLimit;\\n        epochDlpsLimit = params.epochDlpsLimit;\\n        minStakeAmount = params.minStakeAmount;\\n        minDlpStakersPercentage = params.minDlpStakersPercentage;\\n        maxDlpStakersPercentage = params.maxDlpStakersPercentage;\\n        minDlpRegistrationStake = params.minDlpRegistrationStake;\\n        dlpEligibilityThreshold = params.dlpEligibilityThreshold;\\n        dlpSubEligibilityThreshold = params.dlpSubEligibilityThreshold;\\n        _checkpointPush(_stakeWithdrawalDelayCheckpoints, params.stakeWithdrawalDelay);\\n        _checkpointPush(_rewardClaimDelayCheckpoints, params.rewardClaimDelay);\\n        epochSize = params.epochSize;\\n        daySize = params.daySize;\\n        epochRewardAmount = params.epochRewardAmount;\\n\\n        // Initialize first epoch\\n        Epoch storage epoch0 = _epochs[0];\\n        epoch0.startBlock = Math.min(params.startBlock - 2, block.number);\\n        epoch0.endBlock = params.startBlock - 1;\\n        epoch0.isFinalised = true;\\n\\n        _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setRoleAdmin(MANAGER_ROLE, MAINTAINER_ROLE);\\n        _grantRole(DEFAULT_ADMIN_ROLE, params.ownerAddress);\\n        _grantRole(MAINTAINER_ROLE, params.ownerAddress);\\n        _grantRole(MANAGER_ROLE, params.ownerAddress);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    function _contextSuffixLength()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (uint256)\\n    {\\n        return ERC2771ContextUpgradeable._contextSuffixLength();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual override returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function stakeWithdrawalDelay() public view returns (uint256) {\\n        return _stakeWithdrawalDelayCheckpoints.latest();\\n    }\\n\\n    function rewardClaimDelay() public view returns (uint256) {\\n        return _rewardClaimDelayCheckpoints.latest();\\n    }\\n\\n    /**\\n     * @notice Gets DLP information including current stake and status\\n     */\\n    function dlps(uint256 dlpId) public view override returns (DlpInfo memory) {\\n        Dlp storage dlp = _dlps[dlpId];\\n        Epoch storage epoch = _epochs[epochsCount];\\n\\n        uint stakersPercentageEpoch = dlp.registrationBlockNumber > epoch.startBlock\\n            ? dlp.stakersPercentageCheckpoints.at(0)._value\\n            : dlp.stakersPercentageCheckpoints.upperLookup(SafeCast.toUint48(epoch.startBlock));\\n\\n        uint256[] memory epochIds = new uint256[](dlp.epochIdsCount);\\n        for (uint256 i = 1; i <= dlp.epochIdsCount; i++) {\\n            epochIds[i - 1] = dlp.epochIds[i];\\n        }\\n\\n        return\\n            DlpInfo({\\n                id: dlp.id,\\n                dlpAddress: dlp.dlpAddress,\\n                ownerAddress: dlp.ownerAddress,\\n                treasuryAddress: dlp.treasuryAddress,\\n                stakersPercentage: dlp.stakersPercentageCheckpoints.latest(),\\n                stakersPercentageEpoch: stakersPercentageEpoch,\\n                name: dlp.name,\\n                iconUrl: dlp.iconUrl,\\n                website: dlp.website,\\n                metadata: dlp.metadata,\\n                status: dlp.status,\\n                registrationBlockNumber: dlp.registrationBlockNumber,\\n                stakeAmount: _dlpComputedStakeAmount(dlpId),\\n                epochIds: epochIds\\n            });\\n    }\\n\\n    function dlpsByAddress(address dlpAddress) external view override returns (DlpInfo memory) {\\n        return dlps(dlpIds[dlpAddress]);\\n    }\\n\\n    function eligibleDlpsListValues() external view override returns (uint256[] memory) {\\n        return _eligibleDlpsList.values();\\n    }\\n\\n    function eligibleDlpsListCount() external view override returns (uint256) {\\n        return _eligibleDlpsList.length();\\n    }\\n\\n    function eligibleDlpsListAt(uint256 index) external view override returns (uint256) {\\n        return _eligibleDlpsList.at(index);\\n    }\\n\\n    function stakes(uint256 stakeId) external view override returns (StakeInfo memory) {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        return\\n            StakeInfo({\\n                id: stakeId,\\n                stakerAddress: stake.stakerAddress,\\n                dlpId: stake.dlpId,\\n                amount: stake.amount,\\n                startBlock: stake.startBlock,\\n                withdrawn: stake.withdrawn,\\n                endBlock: stake.endBlock,\\n                lastClaimedEpochId: _dlps[stake.dlpId].epochIds[stake.lastClaimedIndexEpochId]\\n            });\\n    }\\n\\n    function epochs(uint256 epochId) external view override returns (EpochInfo memory) {\\n        return\\n            EpochInfo({\\n                startBlock: _epochs[epochId].startBlock,\\n                endBlock: _epochs[epochId].endBlock,\\n                reward: _epochs[epochId].rewardAmount,\\n                isFinalised: _epochs[epochId].isFinalised,\\n                dlpIds: _epochs[epochId].dlpIds.values()\\n            });\\n    }\\n\\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view override returns (DlpEpochInfo memory) {\\n        Epoch storage epoch = _epochs[epochId];\\n        EpochDlp memory epochDlp = epoch.dlps[dlpId];\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        uint stakersPercentageEpoch = dlp.registrationBlockNumber > epoch.startBlock\\n            ? dlp.stakersPercentageCheckpoints.at(0)._value\\n            : dlp.stakersPercentageCheckpoints.upperLookup(SafeCast.toUint48(epoch.startBlock));\\n\\n        return\\n            DlpEpochInfo({\\n                stakeAmount: _dlpComputedStakeAmountByBlock(dlpId, SafeCast.toUint48(epoch.endBlock)),\\n                isTopDlp: epoch.dlpIds.contains(dlpId),\\n                rewardAmount: epochDlp.rewardAmount,\\n                stakersPercentage: stakersPercentageEpoch,\\n                totalStakesScore: epochDlp.totalStakesScore,\\n                rewardClaimed: epochDlp.rewardClaimed\\n            });\\n    }\\n\\n    function stakerListCount() external view returns (uint256) {\\n        return _stakersList.length();\\n    }\\n    function stakerListAt(uint256 index) external view returns (address) {\\n        return _stakersList.at(index);\\n    }\\n\\n    function stakerDlpsListCount(address staker) external view override returns (uint256) {\\n        return _stakers[staker].dlpIds.length();\\n    }\\n\\n    function stakerDlpsListAt(address staker, uint256 index) external view override returns (uint256) {\\n        return _stakers[staker].dlpIds.at(index);\\n    }\\n\\n    function stakerDlpsListValues(address staker) external view override returns (uint256[] memory) {\\n        return _stakers[staker].dlpIds.values();\\n    }\\n\\n    /**\\n     * @notice Calculates claimable rewards for a stake\\n     * @dev Takes into account stake duration, score, and reward distribution\\n     * @dev This method is not marked as view because is using a method that modifies state\\n     * to call it as a view, please using static call\\n     */\\n    function calculateStakeClaimableAmount(uint256 stakeId) external override returns (uint256) {\\n        if (epochsCount == 0) {\\n            return 0;\\n        }\\n        return _calculateStakeRewardUntilEpoch(stakeId, epochsCount - 1, false);\\n    }\\n\\n    /**\\n     * @notice Estimates reward percentages for given DLPs\\n     * @dev Calculates based on stake amounts and current epoch parameters\\n     */\\n    function estimatedDlpRewardPercentages(\\n        uint256[] memory dlpIds\\n    ) external view override returns (DlpRewardApy[] memory) {\\n        uint256[] memory topDlps = topDlpIds(epochDlpsLimit);\\n        uint256 totalStakeAmount;\\n\\n        // Calculate total stake amount for top DLPs\\n        for (uint256 i = 0; i < topDlps.length; i++) {\\n            totalStakeAmount += _dlpComputedStakeAmount(topDlps[i]);\\n        }\\n\\n        uint256 minTopDlpStake = 0;\\n        if (topDlps.length > 0) {\\n            minTopDlpStake = _dlpComputedStakeAmount(topDlps[topDlps.length - 1]);\\n        }\\n\\n        DlpRewardApy[] memory result = new DlpRewardApy[](dlpIds.length);\\n\\n        uint256 totalStakeAmountTmp;\\n        for (uint256 i = 0; i < dlpIds.length; i++) {\\n            totalStakeAmountTmp = totalStakeAmount;\\n\\n            uint256 dlpId = dlpIds[i];\\n\\n            if (!_eligibleDlpsList.contains(dlpId)) {\\n                result[i] = DlpRewardApy({dlpId: dlpId, EPY: 0, APY: 0});\\n                continue;\\n            }\\n\\n            uint256 dlpStake = _dlpComputedStakeAmount(dlpId);\\n\\n            if (dlpStake < minTopDlpStake) {\\n                totalStakeAmountTmp -= minTopDlpStake + dlpStake;\\n            }\\n\\n            uint256 stakersPercentage = _dlps[dlpId].stakersPercentageCheckpoints.latest();\\n\\n            uint256 dlpReward = (dlpStake * epochRewardAmount) / totalStakeAmountTmp;\\n            uint256 epy = (stakersPercentage * dlpReward) / dlpStake;\\n\\n            uint256 apy = (epy * 365 * daySize) / epochSize;\\n\\n            result[i] = DlpRewardApy({dlpId: dlpId, EPY: epy, APY: apy});\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Gets top DLP IDs by stake amount\\n     * @dev Uses insertion sort to maintain ordered list\\n     */\\n    function topDlpIds(uint256 numberOfDlps) public view override returns (uint256[] memory) {\\n        uint256[] memory eligibleDlpIds = _eligibleDlpsList.values();\\n        uint256 eligibleDlpsCount = eligibleDlpIds.length;\\n\\n        numberOfDlps = Math.min(numberOfDlps, eligibleDlpsCount);\\n        uint256[] memory topDlpIdsList = new uint256[](numberOfDlps);\\n\\n        if (numberOfDlps == 0) {\\n            return topDlpIdsList;\\n        }\\n\\n        uint256[] memory topStakes = new uint256[](numberOfDlps);\\n\\n        for (uint256 i = 0; i < eligibleDlpsCount; i++) {\\n            uint256 currentDlpId = eligibleDlpIds[i];\\n            uint256 currentStake = _dlpComputedStakeAmount(currentDlpId);\\n\\n            uint256 position = numberOfDlps;\\n            for (uint256 j = 0; j < numberOfDlps; j++) {\\n                if (currentStake > topStakes[j] || (currentStake == topStakes[j] && currentDlpId < topDlpIdsList[j])) {\\n                    position = j;\\n                    break;\\n                }\\n            }\\n\\n            if (position < numberOfDlps) {\\n                for (uint256 j = numberOfDlps - 1; j > position; j--) {\\n                    topDlpIdsList[j] = topDlpIdsList[j - 1];\\n                    topStakes[j] = topStakes[j - 1];\\n                }\\n                topDlpIdsList[position] = currentDlpId;\\n                topStakes[position] = currentStake;\\n            }\\n        }\\n\\n        return topDlpIdsList;\\n    }\\n\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function updateEligibleDlpsLimit(uint256 newEligibleDlpsLimit) external override onlyRole(MAINTAINER_ROLE) {\\n        if (epochDlpsLimit > newEligibleDlpsLimit) {\\n            revert InvalidParam();\\n        }\\n\\n        eligibleDlpsLimit = newEligibleDlpsLimit;\\n        emit EligibleDlpsLimitUpdated(newEligibleDlpsLimit);\\n    }\\n\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newMinStakeAmount > minDlpRegistrationStake) {\\n            revert InvalidParam();\\n        }\\n\\n        minStakeAmount = newMinStakeAmount;\\n        emit MinStakeAmountUpdated(newMinStakeAmount);\\n    }\\n\\n    function updateMinDlpStakersPercentage(\\n        uint256 newMinDlpStakersPercentage\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newMinDlpStakersPercentage < 1e16 || newMinDlpStakersPercentage > maxDlpStakersPercentage) {\\n            revert InvalidParam();\\n        }\\n\\n        minDlpStakersPercentage = newMinDlpStakersPercentage;\\n        emit MinDlpStakersPercentageUpdated(newMinDlpStakersPercentage);\\n    }\\n\\n    function updateMaxDlpStakersPercentage(\\n        uint256 newMaxDlpStakersPercentage\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newMaxDlpStakersPercentage > 100e18 || newMaxDlpStakersPercentage < minDlpStakersPercentage) {\\n            revert InvalidParam();\\n        }\\n\\n        maxDlpStakersPercentage = newMaxDlpStakersPercentage;\\n        emit MaxDlpStakersPercentageUpdated(newMaxDlpStakersPercentage);\\n    }\\n\\n    function updateMinDlpRegistrationStake(\\n        uint256 newMinDlpRegistrationStake\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (minStakeAmount > newMinDlpRegistrationStake || newMinDlpRegistrationStake > dlpSubEligibilityThreshold) {\\n            revert InvalidParam();\\n        }\\n        minDlpRegistrationStake = newMinDlpRegistrationStake;\\n        emit MinDlpRegistrationStakeUpdated(newMinDlpRegistrationStake);\\n    }\\n\\n    /**\\n     * @notice Updates eligibility threshold and adjusts DLP statuses\\n     */\\n    function updateDlpEligibilityThreshold(\\n        uint256 newDlpEligibilityThreshold\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (dlpSubEligibilityThreshold > newDlpEligibilityThreshold) {\\n            revert InvalidParam();\\n        }\\n\\n        dlpEligibilityThreshold = newDlpEligibilityThreshold;\\n\\n        for (uint256 index = 0; index < _eligibleDlpsList.length(); index++) {\\n            uint256 dlpId = _eligibleDlpsList.at(index);\\n            Dlp storage dlp = _dlps[dlpId];\\n            if (_dlpComputedStakeAmount(dlpId) < newDlpEligibilityThreshold) {\\n                dlp.status = DlpStatus.SubEligible;\\n            }\\n        }\\n\\n        emit DlpEligibilityThresholdUpdated(newDlpEligibilityThreshold);\\n    }\\n\\n    /**\\n     * @notice Updates sub-eligibility threshold and adjusts DLP statuses\\n     */\\n    function updateDlpSubEligibilityThreshold(\\n        uint256 newDlpSubEligibilityThreshold\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (\\n            minDlpRegistrationStake > newDlpSubEligibilityThreshold ||\\n            newDlpSubEligibilityThreshold > dlpEligibilityThreshold\\n        ) {\\n            revert InvalidParam();\\n        }\\n\\n        dlpSubEligibilityThreshold = newDlpSubEligibilityThreshold;\\n\\n        for (uint256 index = 0; index < _eligibleDlpsList.length(); index++) {\\n            uint256 dlpId = _eligibleDlpsList.at(index);\\n            Dlp storage dlp = _dlps[dlpId];\\n            if (_dlpComputedStakeAmount(dlpId) < newDlpSubEligibilityThreshold) {\\n                dlp.status = DlpStatus.Registered;\\n                _eligibleDlpsList.remove(dlpId);\\n            }\\n        }\\n\\n        emit DlpSubEligibilityThresholdUpdated(newDlpSubEligibilityThreshold);\\n    }\\n\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newEpochDlpsLimit > eligibleDlpsLimit) {\\n            revert InvalidParam();\\n        }\\n\\n        epochDlpsLimit = newEpochDlpsLimit;\\n        emit EpochDlpsLimitUpdated(newEpochDlpsLimit);\\n    }\\n\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external override onlyRole(MAINTAINER_ROLE) {\\n        _checkpointPush(_stakeWithdrawalDelayCheckpoints, newStakeWithdrawalDelay);\\n        emit StakeWithdrawalDelayUpdated(newStakeWithdrawalDelay);\\n    }\\n\\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external override onlyRole(MAINTAINER_ROLE) {\\n        _checkpointPush(_rewardClaimDelayCheckpoints, newRewardClaimDelay);\\n        emit RewardClaimDelayUpdated(newRewardClaimDelay);\\n    }\\n\\n    function updateEpochSize(uint256 newEpochSize) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        epochSize = newEpochSize;\\n        emit EpochSizeUpdated(newEpochSize);\\n    }\\n\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        epochRewardAmount = newEpochRewardAmount;\\n        emit EpochRewardAmountUpdated(newEpochRewardAmount);\\n    }\\n\\n    function updateTrustedForwarder(address trustedForwarderAddress) external onlyRole(MAINTAINER_ROLE) {\\n        _trustedForwarder = trustedForwarderAddress;\\n    }\\n\\n    /**\\n     * @notice Updates stake scores for DLPs in past epochs\\n     */\\n    function saveEpochDlpsTotalStakesScore(\\n        EpochDlpsTotalStakesScore[] memory stakeScore\\n    ) external override onlyRole(MANAGER_ROLE) {\\n        for (uint256 i = 0; i < stakeScore.length; i++) {\\n            Epoch storage epoch = _epochs[stakeScore[i].epochId];\\n            EpochDlp storage epochDlp = epoch.dlps[stakeScore[i].dlpId];\\n\\n            if (_dlps[stakeScore[i].dlpId].dlpAddress == address(0)) {\\n                revert InvalidDlpId();\\n            }\\n\\n            if (epoch.endBlock > block.number || epoch.startBlock == 0) {\\n                revert EpochNotEnded();\\n            }\\n\\n            if (epochDlp.totalStakesScore != 0) {\\n                revert EpochDlpScoreAlreadySaved();\\n            }\\n\\n            epochDlp.totalStakesScore = stakeScore[i].totalStakesScore;\\n\\n            emit EpochDlpScoreSaved(stakeScore[i].epochId, stakeScore[i].dlpId, stakeScore[i].totalStakesScore);\\n        }\\n    }\\n\\n    /**\\n     * @notice Overrides stake scores for DLPs in past epochs\\n     */\\n    function overrideEpochDlpsTotalStakesScore(\\n        EpochDlpsTotalStakesScore memory stakeScore\\n    ) external override onlyRole(MANAGER_ROLE) {\\n        Epoch storage epoch = _epochs[stakeScore.epochId];\\n        if (_dlps[stakeScore.dlpId].dlpAddress == address(0)) {\\n            revert InvalidDlpId();\\n        }\\n\\n        if (epoch.endBlock > block.number || epoch.startBlock == 0) {\\n            revert EpochNotEnded();\\n        }\\n\\n        epoch.dlps[stakeScore.dlpId].totalStakesScore = stakeScore.totalStakesScore;\\n\\n        emit EpochDlpScoreSaved(stakeScore.epochId, stakeScore.dlpId, stakeScore.totalStakesScore);\\n    }\\n\\n    /**\\n     * @notice Registers a new DLP with initial stake\\n     */\\n    function registerDlp(\\n        DlpRegistration calldata registrationInfo\\n    ) external payable override whenNotPaused nonReentrant {\\n        _createEpochsUntilBlockNumber(block.number);\\n        _registerDlp(registrationInfo);\\n    }\\n\\n    /**\\n     * @notice Updates DLP information\\n     * @dev Only DLP owner can update\\n     */\\n    function updateDlp(\\n        uint256 dlpId,\\n        DlpRegistration calldata dlpUpdateInfo\\n    ) external override whenNotPaused nonReentrant onlyDlpOwner(dlpId) {\\n        _createEpochsUntilBlockNumber(block.number);\\n\\n        if (dlpUpdateInfo.ownerAddress == address(0) || dlpUpdateInfo.treasuryAddress == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        if (\\n            dlpUpdateInfo.stakersPercentage < minDlpStakersPercentage ||\\n            dlpUpdateInfo.stakersPercentage > maxDlpStakersPercentage\\n        ) {\\n            revert InvalidStakersPercentage();\\n        }\\n\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        //this validation will be removed in the future\\n        if (dlp.dlpAddress != dlpUpdateInfo.dlpAddress) {\\n            revert DLpAddressCannotBeChanged();\\n        }\\n\\n        dlp.ownerAddress = dlpUpdateInfo.ownerAddress;\\n        dlp.treasuryAddress = dlpUpdateInfo.treasuryAddress;\\n        if (dlp.stakersPercentageCheckpoints.latest() != dlpUpdateInfo.stakersPercentage) {\\n            _checkpointPush(dlp.stakersPercentageCheckpoints, dlpUpdateInfo.stakersPercentage);\\n        }\\n        dlp.name = dlpUpdateInfo.name;\\n        dlp.iconUrl = dlpUpdateInfo.iconUrl;\\n        dlp.website = dlpUpdateInfo.website;\\n        dlp.metadata = dlpUpdateInfo.metadata;\\n\\n        dlpIds[dlpUpdateInfo.dlpAddress] = dlpId;\\n\\n        emit DlpUpdated(\\n            dlpId,\\n            dlpUpdateInfo.dlpAddress,\\n            dlpUpdateInfo.ownerAddress,\\n            dlpUpdateInfo.treasuryAddress,\\n            dlpUpdateInfo.stakersPercentage,\\n            dlpUpdateInfo.name,\\n            dlpUpdateInfo.iconUrl,\\n            dlpUpdateInfo.website,\\n            dlpUpdateInfo.metadata\\n        );\\n    }\\n\\n    /**\\n     * @notice Deregisters a DLP\\n     * @dev Only owner can deregister, must be in valid status\\n     */\\n    function deregisterDlp(uint256 dlpId) external override whenNotPaused nonReentrant onlyDlpOwner(dlpId) {\\n        _createEpochsUntilBlockNumber(block.number);\\n\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (\\n            dlp.status != DlpStatus.Registered &&\\n            dlp.status != DlpStatus.Eligible &&\\n            dlp.status != DlpStatus.SubEligible\\n        ) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        dlp.status = DlpStatus.Deregistered;\\n        _eligibleDlpsList.remove(dlpId);\\n\\n        emit DlpDeregistered(dlpId);\\n    }\\n\\n    /**\\n     * @notice Creates epochs up to current block\\n     */\\n    function createEpochs() external override nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(block.number);\\n    }\\n\\n    /**\\n     * @notice Creates epochs up to specified block\\n     */\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external override nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(blockNumber < block.number ? blockNumber : block.number);\\n    }\\n\\n    /**\\n     * @notice Creates a new stake for a DLP\\n     */\\n    function createStake(uint256 dlpId) external payable override nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(block.number);\\n        _createStake(_msgSender(), dlpId, msg.value);\\n    }\\n\\n    /**\\n     * @notice Closes multiple stakes\\n     */\\n    function closeStakes(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(block.number);\\n        for (uint256 i = 0; i < stakeIds.length; i++) {\\n            _closeStake(_msgSender(), stakeIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws multiple closed stakes\\n     */\\n    function withdrawStakes(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(block.number);\\n        for (uint256 i = 0; i < stakeIds.length; i++) {\\n            _withdrawStake(_msgSender(), stakeIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims rewards for multiple stakes\\n     */\\n    function claimStakesReward(uint256[] memory stakeIds) external nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(block.number);\\n\\n        if (epochsCount == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        for (uint256 i = 0; i < stakeIds.length; i++) {\\n            _claimStakeRewardUntilEpoch(stakeIds[i], epochsCount - 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims rewards for a stake up to specified epoch\\n     */\\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external nonReentrant whenNotPaused {\\n        _createEpochsUntilBlockNumber(block.number);\\n        if (epochsCount == 0) {\\n            revert InvalidParam();\\n        }\\n        uint256 maxEpoch = Math.min(lastEpochToClaim, epochsCount - 1);\\n        _claimStakeRewardUntilEpoch(stakeId, maxEpoch);\\n    }\\n\\n    /**\\n     * @notice Calculates stake score based on amount and duration\\n     */\\n    function calculateStakeScore(\\n        uint256 stakeAmount,\\n        uint256 stakeStartBlock,\\n        uint256 blockNumber\\n    ) public view returns (uint256) {\\n        uint256 daysStaked = (blockNumber - stakeStartBlock) / daySize;\\n        return (stakeAmount * _getMultiplier(daysStaked)) / 100;\\n    }\\n\\n    /**\\n     * @notice Creates a new stake for a DLP\\n     * @dev Validates stake amount and DLP status before creating\\n     */\\n    function _createStake(address stakerAddress, uint256 dlpId, uint256 amount) internal {\\n        if (stakerAddress == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        if (amount < minStakeAmount) {\\n            revert InvalidStakeAmount();\\n        }\\n\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (\\n            dlp.status != DlpStatus.Registered &&\\n            dlp.status != DlpStatus.Eligible &&\\n            dlp.status != DlpStatus.SubEligible\\n        ) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        Stake storage stake = _stakes[++stakesCount];\\n        stake.amount = amount;\\n        stake.startBlock = block.number;\\n        stake.stakerAddress = stakerAddress;\\n        stake.dlpId = dlpId;\\n        stake.lastClaimedIndexEpochId = dlp.epochIdsCount;\\n\\n        Staker storage staker = _stakers[stakerAddress];\\n        staker.dlpIds.add(dlpId);\\n        _stakersList.add(stakerAddress);\\n        _checkpointAdd(dlp.stakeAmountCheckpoints, amount);\\n\\n        // Check if DLP becomes eligible\\n        if (\\n            dlp.status != DlpStatus.Eligible &&\\n            _dlpComputedStakeAmount(dlpId) >= dlpEligibilityThreshold &&\\n            _eligibleDlpsList.length() < eligibleDlpsLimit\\n        ) {\\n            _eligibleDlpsList.add(dlpId);\\n            dlp.status = DlpStatus.Eligible;\\n            emit DlpBecameEligible(dlpId);\\n        }\\n\\n        emit StakeCreated(stakesCount, stakerAddress, dlpId, amount);\\n    }\\n\\n    /**\\n     * @notice Closes a stake and updates DLP status if needed\\n     */\\n    function _closeStake(address stakerAddress, uint256 stakeId) internal {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        if (stake.stakerAddress != stakerAddress) {\\n            revert NotStakeOwner();\\n        }\\n\\n        if (stake.endBlock != 0) {\\n            revert StakeAlreadyClosed();\\n        }\\n\\n        Dlp storage dlp = _dlps[stake.dlpId];\\n        _checkpointAdd(dlp.unstakeAmountCheckpoints, stake.amount);\\n        stake.endBlock = block.number;\\n\\n        uint256 dlpStake = _dlpComputedStakeAmount(stake.dlpId);\\n\\n        // Update DLP status based on remaining stake\\n        if (\\n            dlpStake < dlpSubEligibilityThreshold &&\\n            (dlp.status == DlpStatus.SubEligible || dlp.status == DlpStatus.Eligible)\\n        ) {\\n            dlp.status = DlpStatus.Registered;\\n            _eligibleDlpsList.remove(stake.dlpId);\\n        } else if (dlpStake < dlpEligibilityThreshold && dlp.status == DlpStatus.Eligible) {\\n            dlp.status = DlpStatus.SubEligible;\\n        }\\n\\n        emit StakeClosed(stakeId);\\n    }\\n\\n    /**\\n     * @notice Withdraws a closed stake after delay period\\n     */\\n    function _withdrawStake(address stakerAddress, uint256 stakeId) internal {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        if (stake.stakerAddress != stakerAddress) {\\n            revert NotStakeOwner();\\n        }\\n\\n        if (stake.withdrawn) {\\n            revert StakeAlreadyWithdrawn();\\n        }\\n\\n        if (stake.endBlock == 0) {\\n            revert StakeNotClosed();\\n        }\\n\\n        if (stake.endBlock + stakeWithdrawalDelay() > block.number) {\\n            revert StakeWithdrawalTooEarly();\\n        }\\n\\n        stake.withdrawn = true;\\n\\n        (bool success, ) = stakerAddress.call{value: stake.amount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit StakeWithdrawn(stakeId);\\n    }\\n\\n    /**\\n     * @notice Internal function to register a new DLP\\n     */\\n    function _registerDlp(DlpRegistration calldata registrationInfo) internal {\\n        if (registrationInfo.ownerAddress == address(0) || registrationInfo.treasuryAddress == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        if (dlpIds[registrationInfo.dlpAddress] != 0) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        if (\\n            registrationInfo.stakersPercentage < minDlpStakersPercentage ||\\n            registrationInfo.stakersPercentage > maxDlpStakersPercentage\\n        ) {\\n            revert InvalidStakersPercentage();\\n        }\\n\\n        if (msg.value < minDlpRegistrationStake) {\\n            revert InvalidStakeAmount();\\n        }\\n\\n        uint256 dlpId = ++dlpsCount;\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        dlp.id = dlpId;\\n        dlp.dlpAddress = registrationInfo.dlpAddress;\\n        dlp.ownerAddress = registrationInfo.ownerAddress;\\n        dlp.treasuryAddress = registrationInfo.treasuryAddress;\\n        _checkpointPush(dlp.stakersPercentageCheckpoints, registrationInfo.stakersPercentage);\\n        dlp.name = registrationInfo.name;\\n        dlp.iconUrl = registrationInfo.iconUrl;\\n        dlp.website = registrationInfo.website;\\n        dlp.metadata = registrationInfo.metadata;\\n        dlp.status = DlpStatus.Registered;\\n        dlp.registrationBlockNumber = block.number;\\n\\n        dlpIds[registrationInfo.dlpAddress] = dlpId;\\n\\n        _createStake(registrationInfo.ownerAddress, dlpId, msg.value);\\n\\n        emit DlpRegistered(\\n            dlpId,\\n            registrationInfo.dlpAddress,\\n            registrationInfo.ownerAddress,\\n            registrationInfo.treasuryAddress,\\n            registrationInfo.stakersPercentage,\\n            registrationInfo.name,\\n            registrationInfo.iconUrl,\\n            registrationInfo.website,\\n            registrationInfo.metadata\\n        );\\n    }\\n\\n    /**\\n     * @notice Claims reward for a stake up to specified epoch\\n     * @dev Calculates and distributes rewards based on stake score\\n     */\\n    function _claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) internal {\\n        uint256 totalRewardAmount = _calculateStakeRewardUntilEpoch(stakeId, lastEpochToClaim, true);\\n\\n        if (totalRewardAmount == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        Stake storage stake = _stakes[stakeId];\\n\\n        (bool success, ) = payable(stake.stakerAddress).call{value: totalRewardAmount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates reward for a stake up to specified epoch\\n     */\\n    function _calculateStakeRewardUntilEpoch(\\n        uint256 stakeId,\\n        uint256 lastEpochToClaim,\\n        bool isClaim\\n    ) internal returns (uint256) {\\n        Stake storage stake = _stakes[stakeId];\\n        Dlp storage dlp = _dlps[stake.dlpId];\\n\\n        uint256 totalRewardAmount;\\n        uint256 epochToClaimIndex = stake.lastClaimedIndexEpochId + 1;\\n        uint256 epochToClaim = dlp.epochIds[epochToClaimIndex];\\n        uint256 rewardClaimDelayTmp = rewardClaimDelay();\\n\\n        while (epochToClaim > 0 && epochToClaim <= lastEpochToClaim) {\\n            Epoch storage epoch = _epochs[epochToClaim];\\n            EpochDlp storage epochDlp = epoch.dlps[stake.dlpId];\\n\\n            if (\\n                epochToClaim == 0 ||\\n                epochDlp.totalStakesScore == 0 ||\\n                (stake.endBlock > 0 && epoch.endBlock > stake.endBlock)\\n            ) {\\n                break;\\n            }\\n\\n            uint256 stakeScore = calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock);\\n\\n            uint256 rewardAmount = (((epochDlp.rewardAmount * epochDlp.stakersPercentage) / 100e18) * stakeScore) /\\n                epochDlp.totalStakesScore;\\n\\n            uint256 numberOfDays = 1 + (block.number - epoch.endBlock) / daySize;\\n\\n            if (rewardClaimDelayTmp > 0 && numberOfDays < rewardClaimDelayTmp) {\\n                rewardAmount = (rewardAmount * numberOfDays) / rewardClaimDelayTmp;\\n            } else if (isClaim) {\\n                stake.lastClaimedIndexEpochId = epochToClaimIndex;\\n            }\\n\\n            if (stake.claimedAmounts[epochToClaim] >= rewardAmount) {\\n                break;\\n            }\\n\\n            totalRewardAmount += rewardAmount - stake.claimedAmounts[epochToClaim];\\n\\n            if (isClaim) {\\n                stake.claimedAmounts[epochToClaim] = rewardAmount;\\n            }\\n\\n            epochToClaim = dlp.epochIds[++epochToClaimIndex];\\n        }\\n\\n        return totalRewardAmount;\\n    }\\n\\n    /**\\n     * @notice Returns stake score multiplier based on duration\\n     */\\n    function _getMultiplier(uint256 index) internal pure returns (uint256) {\\n        if (index >= 64) {\\n            return 300;\\n        }\\n\\n        uint16[64] memory multiplier = [\\n            100,\\n            102,\\n            105,\\n            107,\\n            110,\\n            112,\\n            114,\\n            117,\\n            119,\\n            121,\\n            124,\\n            126,\\n            129,\\n            131,\\n            133,\\n            136,\\n            138,\\n            140,\\n            143,\\n            145,\\n            148,\\n            150,\\n            156,\\n            162,\\n            168,\\n            174,\\n            180,\\n            186,\\n            192,\\n            198,\\n            204,\\n            210,\\n            215,\\n            221,\\n            227,\\n            233,\\n            239,\\n            245,\\n            251,\\n            257,\\n            263,\\n            269,\\n            275,\\n            276,\\n            277,\\n            279,\\n            280,\\n            281,\\n            282,\\n            283,\\n            285,\\n            286,\\n            287,\\n            288,\\n            289,\\n            290,\\n            292,\\n            293,\\n            294,\\n            295,\\n            296,\\n            298,\\n            299,\\n            300\\n        ];\\n        return uint256(multiplier[index]);\\n    }\\n\\n    /**\\n     * @notice Helper function to add value to checkpoint\\n     */\\n    function _checkpointAdd(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\\n        return store.push(SafeCast.toUint48(block.number), store.latest() + SafeCast.toUint208(delta));\\n    }\\n\\n    /**\\n     * @notice Helper function to set checkpoint value\\n     */\\n    function _checkpointPush(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\\n        return store.push(SafeCast.toUint48(block.number), SafeCast.toUint208(delta));\\n    }\\n\\n    /**\\n     * @notice Get DLP stake amount at specific block\\n     */\\n    function _dlpComputedStakeAmountByBlock(uint256 dlpId, uint48 checkBlock) internal view returns (uint256) {\\n        return\\n            _dlps[dlpId].stakeAmountCheckpoints.upperLookup(checkBlock) -\\n            _dlps[dlpId].unstakeAmountCheckpoints.upperLookup(checkBlock);\\n    }\\n\\n    /**\\n     * @notice Get current DLP stake amount\\n     */\\n    function _dlpComputedStakeAmount(uint256 dlpId) internal view returns (uint256) {\\n        return _dlps[dlpId].stakeAmountCheckpoints.latest() - _dlps[dlpId].unstakeAmountCheckpoints.latest();\\n    }\\n\\n    /**\\n     * @notice Creates and finalizes epochs up to target block\\n     */\\n    function _createEpochsUntilBlockNumber(uint256 blockNumber) internal {\\n        Epoch storage lastEpoch = _epochs[epochsCount];\\n\\n        if (lastEpoch.endBlock > block.number) {\\n            return;\\n        }\\n\\n        while (lastEpoch.endBlock < blockNumber) {\\n            lastEpoch.isFinalised = true;\\n\\n            _finalizeEpoch(epochsCount);\\n\\n            Epoch storage newEpoch = _epochs[++epochsCount];\\n            newEpoch.startBlock = lastEpoch.endBlock + 1;\\n            newEpoch.endBlock = newEpoch.startBlock + epochSize - 1;\\n            newEpoch.rewardAmount = epochRewardAmount;\\n\\n            emit EpochCreated(epochsCount);\\n            lastEpoch = newEpoch;\\n        }\\n    }\\n\\n    /**\\n     * @notice Finalizes epoch by distributing rewards to top DLPs\\n     */\\n    function _finalizeEpoch(uint256 epochId) internal {\\n        if (epochId == 0) {\\n            return;\\n        }\\n        Epoch storage epoch = _epochs[epochId];\\n        uint256[] memory topDlps = topDlpIds(epochDlpsLimit);\\n\\n        uint256 index;\\n        uint256 topDlpsTotalStakeAmount;\\n        uint256 dlpId;\\n        EpochDlp storage epochDlp;\\n        Dlp storage dlp;\\n\\n        // Calculate total stake amount\\n        for (index = 0; index < topDlps.length; index++) {\\n            topDlpsTotalStakeAmount += _dlpComputedStakeAmount(topDlps[index]);\\n        }\\n\\n        // Distribute rewards\\n        for (index = 0; index < topDlps.length; index++) {\\n            dlpId = topDlps[index];\\n            epoch.dlpIds.add(dlpId);\\n            dlp = _dlps[dlpId];\\n\\n            dlp.epochIds[++dlp.epochIdsCount] = epochId;\\n\\n            epochDlp = epoch.dlps[dlpId];\\n\\n            if (dlp.registrationBlockNumber > epoch.startBlock) {\\n                epochDlp.stakersPercentage = dlp.stakersPercentageCheckpoints.at(0)._value;\\n            } else {\\n                epochDlp.stakersPercentage = dlp.stakersPercentageCheckpoints.upperLookup(\\n                    SafeCast.toUint48(epoch.startBlock)\\n                );\\n            }\\n            epochDlp.rewardAmount = (_dlpComputedStakeAmount(dlpId) * epoch.rewardAmount) / topDlpsTotalStakeAmount;\\n\\n            // Send treasury portion of rewards\\n            if (epochDlp.stakersPercentage < 100e18) {\\n                (bool success, ) = dlp.treasuryAddress.call{\\n                    value: (epochDlp.rewardAmount * (100e18 - epochDlp.stakersPercentage)) / 100e18\\n                }(\\\"\\\");\\n\\n                if (success) {\\n                    epochDlp.rewardClaimed = true;\\n                } else {\\n                    //just skip this DLP; it will be fixed manually\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x430869f0fa5f77186dc8a826d753c77f1ca9d0ba376fb5a71d9dbf248bc331b7\",\"license\":\"MIT\"},\"contracts/root/interfaces/DLPRootStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./IDLPRoot.sol\\\";\\n\\n/**\\n * @notice For future upgrades, do not change DLPRootStorageV1. Create a new\\n * contract which implements DLPRootStorageV1\\n */\\nabstract contract DLPRootStorageV1 is IDLPRoot {\\n    address internal _trustedForwarder;\\n    uint256 public override eligibleDlpsLimit; // Must be below 500 for gas efficiency\\n    uint256 public override epochDlpsLimit; // Max DLPs per epoch\\n    uint256 public override minStakeAmount; // Minimum stake allowed\\n    uint256 public override minDlpStakersPercentage; // Min % of rewards to stakers (in 1e18)\\n    uint256 public override minDlpRegistrationStake; // Min stake for new DLP registration\\n    uint256 public override dlpEligibilityThreshold; // Min stake for full eligibility\\n    uint256 public override dlpSubEligibilityThreshold; // Min stake for sub-eligibility\\n\\n    // Historical values tracked using checkpoints\\n    Checkpoints.Trace208 internal _stakeWithdrawalDelayCheckpoints;\\n    Checkpoints.Trace208 internal _rewardClaimDelayCheckpoints;\\n\\n    uint256 public override epochRewardAmount; // Rewards per epoch\\n    uint256 public override epochSize; // Blocks per epoch\\n    uint256 public override daySize; // Blocks per day\\n\\n    // DLP management\\n    uint256 public override dlpsCount;\\n    mapping(uint256 dlpId => Dlp dlp) internal _dlps;\\n    mapping(address dlpAddress => uint256 dlpId) public override dlpIds;\\n    EnumerableSet.UintSet internal _eligibleDlpsList;\\n\\n    // Epoch tracking\\n    uint256 public override epochsCount;\\n    mapping(uint256 epochId => Epoch epoch) internal _epochs;\\n\\n    // Staker management\\n    EnumerableSet.AddressSet internal _stakersList;\\n    mapping(address stakerAddress => Staker staker) internal _stakers;\\n\\n    // Stake tracking\\n    uint256 public override stakesCount;\\n    mapping(uint256 stakeId => Stake stake) internal _stakes;\\n\\n    uint256 public override maxDlpStakersPercentage; // Max % of rewards to stakers (in 1e18)\\n}\\n\",\"keccak256\":\"0xe1f0d87e1a3639ee33eb1d37633b8dba34f150310e91d1a42b641be4e24f82d3\",\"license\":\"MIT\"},\"contracts/root/interfaces/IDLPRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\n\\ninterface IDLPRoot {\\n    // DLP lifecycle states from registration to deregistration\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Eligible, // Can participate in epochs\\n        SubEligible, // Below threshold but above minimum\\n        Deregistered\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress; // Receives non-staker rewards\\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\\n        Checkpoints.Trace208 unstakeAmountCheckpoints; // Historical unstake amounts\\n        uint256 epochIdsCount; // Number of participated epochs\\n        mapping(uint256 index => uint256 epochIds) epochIds;\\n    }\\n\\n    struct EpochDlp {\\n        uint256 rewardAmount; // Rewards allocated to this DLP\\n        uint256 stakersPercentage; // % going to stakers vs treasury\\n        uint256 totalStakesScore; // Sum of weighted stake scores\\n        bool rewardClaimed; // True if reward has been claimed\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    struct Stake {\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock; // 0 if active\\n        bool withdrawn;\\n        uint256 lastClaimedIndexEpochId;\\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\\n    }\\n\\n    struct Staker {\\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function epochDlpsLimit() external view returns (uint256);\\n    function eligibleDlpsLimit() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function daySize() external view returns (uint256);\\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\\n    function eligibleDlpsListCount() external view returns (uint256);\\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\\n    function epochsCount() external view returns (uint256);\\n\\n    // Read-only struct views\\n    struct EpochInfo {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 reward;\\n        bool isFinalised;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n\\n    // Additional view functions\\n    function minStakeAmount() external view returns (uint256);\\n    function minDlpStakersPercentage() external view returns (uint256);\\n    function maxDlpStakersPercentage() external view returns (uint256);\\n    function minDlpRegistrationStake() external view returns (uint256);\\n    function dlpEligibilityThreshold() external view returns (uint256);\\n    function dlpSubEligibilityThreshold() external view returns (uint256);\\n    function stakeWithdrawalDelay() external view returns (uint256);\\n    function rewardClaimDelay() external view returns (uint256);\\n    function epochRewardAmount() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n\\n    struct DlpInfo {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address treasuryAddress;\\n        uint256 stakersPercentage;\\n        uint256 stakersPercentageEpoch;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 stakeAmount;\\n        uint256[] epochIds;\\n    }\\n    function dlps(uint256 index) external view returns (DlpInfo memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n\\n    struct DlpEpochInfo {\\n        uint256 stakeAmount; // 0 if not a top DLP\\n        bool isTopDlp; // In top DLPs list this epoch\\n        uint256 rewardAmount; // 0 if not top DLP or epoch not finished\\n        uint256 stakersPercentage; // 0 if not top DLP\\n        uint256 totalStakesScore; // 0 if not top DLP\\n        bool rewardClaimed;\\n    }\\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view returns (DlpEpochInfo memory);\\n    function stakerListCount() external view returns (uint256);\\n    function stakerListAt(uint256 index) external view returns (address);\\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakesCount() external view returns (uint256);\\n\\n    struct StakeInfo {\\n        uint256 id;\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        bool withdrawn;\\n        uint256 lastClaimedEpochId;\\n    }\\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\\n\\n    // Core functionality\\n    function topDlpIds(uint256 numberOfDlps) external returns (uint256[] memory);\\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\\n\\n    struct DlpRewardApy {\\n        uint256 dlpId;\\n        uint256 APY; //annual percentage yield\\n        uint256 EPY; //epoch percentage yield\\n    }\\n\\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\\n    function updateEligibleDlpsLimit(uint256 newEligibleDlpsLimit) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\\n    function updateMinDlpStakersPercentage(uint256 newMinDlpStakersPercentage) external;\\n    function updateMaxDlpStakersPercentage(uint256 newMaxDlpStakersPercentage) external;\\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\\n    function updateDlpEligibilityThreshold(uint256 newDlpEligibilityThreshold) external;\\n    function updateDlpSubEligibilityThreshold(uint256 newDlpSubEligibilityThreshold) external;\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\\n    function updateRewardClaimDelay(uint256 newSRewardClaimDelay) external;\\n\\n    struct EpochDlpsTotalStakesScore {\\n        uint256 epochId;\\n        uint256 dlpId;\\n        uint256 totalStakesScore;\\n    }\\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\\n\\n    // Epoch management\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n\\n    struct DlpRegistration {\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress;\\n        uint256 stakersPercentage;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n    }\\n\\n    // DLP lifecycle management\\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\\n    function deregisterDlp(uint256 dlpId) external;\\n\\n    // Staking and rewards\\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\\n    function claimStakesReward(uint256[] memory stakeIds) external;\\n    function createStake(uint256 dlpId) external payable;\\n    function closeStakes(uint256[] memory stakeIds) external;\\n    function withdrawStakes(uint256[] memory stakeIds) external;\\n}\\n\",\"keccak256\":\"0xa7d754ecdf4ea1f5c26ee1edea1ad5251f28d6a8b71f139fbf3bc1ef648dae54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052306080523480156200001557600080fd5b50600060a052620000256200002b565b620000df565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007c5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dc5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b60805160a051615f3f6200011060003960005050600081816140fc0152818161412501526142600152615f3f6000f3fe6080604052600436106103785760003560e01c806301ffc9a71461037d578063028f31f3146103b257806303a229f6146103d657806305c1c3f4146103f857806306a08b0e1461040d57806307e0cd171461043a578063132c58e91461045057806314973daf14610466578063151db1b9146104865780631bf6ddae1461049b5780631e6760d3146104ae5780632393526f146104ce578063248a9ca3146104ee57806324918d791461050e5780632624cc6f1461052e5780632ae51134146105435780632f2ff15d146105b3578063319fe36b146105d357806336568abe146105f3578063387548b5146106135780633f4ba83a14610633578063439b37561461064857806346582583146106755780634c85c8d91461068a5780634f1ef286146106aa57806352d1902d146106bd57806354fd4d50146106d2578063572b6c05146106e6578063572d356e146107065780635c975abb1461071c578063633e7e541461073157806368ed41ed146107515780636b289f5b146107675780636d352711146107875780636d51fa9d1461079c5780637217d22d146107c957806372c9acdc146107e957806376bc9869146107ff57806377a3b265146108145780637da0a877146108345780638456cb59146108495780638c31cd3e1461085e5780638d8c658f1461087e5780638e991ff31461089e578063901d97f6146108b4578063916e1c57146108d457806391d14854146108ea5780639e8e67171461090a578063a217fddf14610920578063aa37489814610935578063ac9650d814610955578063ad3cb1cc14610982578063b4fcea1d146109c0578063c02b8cf4146109e0578063c06020b014610a00578063c53036f414610a2d578063c6b61e4c14610a43578063cdf2003e14610a70578063d4dc04ba14610a86578063d4e0187214610aa6578063d547741f14610ac6578063d5a44f8614610ae6578063d7033ca014610b6d578063d8060cd514610b83578063dd8c017c14610ba3578063ddadf36914610bc3578063df18328b14610be3578063e1d648d114610c03578063e5331f1714610c23578063e6fe27c414610c39578063e7de504114610c59578063e7ebaa6f14610c79578063e98fa42b14610c99578063ea83e47b14610cb9578063eaeb2ec814610cd9578063ec87621c14610cf9578063f188768414610d1b578063f874225414610d31578063f90b031114610d53575b600080fd5b34801561038957600080fd5b5061039d610398366004615145565b610d73565b60405190151581526020015b60405180910390f35b3480156103be57600080fd5b506103c860045481565b6040519081526020016103a9565b3480156103e257600080fd5b506103eb610daa565b6040516103a9919061516f565b61040b6104063660046151c0565b610dbb565b005b34801561041957600080fd5b5061042d6104283660046151fc565b610de8565b6040516103a99190615222565b34801561044657600080fd5b506103c860075481565b34801561045c57600080fd5b506103c8600a5481565b34801561047257600080fd5b5061040b6104813660046151fc565b610df5565b34801561049257600080fd5b506103c8610e80565b61040b6104a93660046151fc565b610e9a565b3480156104ba57600080fd5b5061040b6104c9366004615236565b610ec5565b3480156104da57600080fd5b506103c86104e93660046151fc565b610f34565b3480156104fa57600080fd5b506103c86105093660046151fc565b610f41565b34801561051a57600080fd5b5061040b6105293660046152ea565b610f61565b34801561053a57600080fd5b506103c8610fc1565b34801561054f57600080fd5b5061056361055e366004615236565b610fcd565b6040516103a99190600060c0820190508251825260208301511515602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b3480156105bf57600080fd5b5061040b6105ce3660046153a4565b611117565b3480156105df57600080fd5b5061040b6105ee36600461542f565b611139565b3480156105ff57600080fd5b5061040b61060e3660046153a4565b611219565b34801561061f57600080fd5b5061040b61062e36600461544b565b611261565b34801561063f57600080fd5b5061040b6115bc565b34801561065457600080fd5b5061066861066336600461551f565b6115dc565b6040516103a99190615600565b34801561068157600080fd5b506103c8611606565b34801561069657600080fd5b506103c86106a5366004615729565b611612565b61040b6106b8366004615755565b61165a565b3480156106c957600080fd5b506103c8611675565b3480156106de57600080fd5b5060016103c8565b3480156106f257600080fd5b5061039d61070136600461551f565b611692565b34801561071257600080fd5b506103c8600b5481565b34801561072857600080fd5b5061039d6116b7565b34801561073d57600080fd5b506103c861074c3660046157fc565b6116cc565b34801561075d57600080fd5b506103c8600d5481565b34801561077357600080fd5b5061040b6107823660046151fc565b6116ee565b34801561079357600080fd5b506103c861172e565b3480156107a857600080fd5b506107bc6107b73660046152ea565b61173a565b6040516103a99190615828565b3480156107d557600080fd5b506103eb6107e436600461551f565b6119bd565b3480156107f557600080fd5b506103c860195481565b34801561080b57600080fd5b5061040b6119e1565b34801561082057600080fd5b5061040b61082f3660046151fc565b611a04565b34801561084057600080fd5b5061042d611a85565b34801561085557600080fd5b5061040b611a94565b34801561086a57600080fd5b506103c86108793660046151fc565b611ab4565b34801561088a57600080fd5b506103eb6108993660046151fc565b611ae2565b3480156108aa57600080fd5b506103c860055481565b3480156108c057600080fd5b5061040b6108cf3660046151fc565b611d61565b3480156108e057600080fd5b506103c860125481565b3480156108f657600080fd5b5061039d6109053660046153a4565b611ddd565b34801561091657600080fd5b506103c860015481565b34801561092c57600080fd5b506103c8600081565b34801561094157600080fd5b5061040b6109503660046151fc565b611e13565b34801561096157600080fd5b50610975610970366004615881565b611e83565b6040516103a991906158f5565b34801561098e57600080fd5b506109b3604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516103a99190615959565b3480156109cc57600080fd5b5061040b6109db3660046151fc565b611fe1565b3480156109ec57600080fd5b5061040b6109fb3660046151fc565b612123565b348015610a0c57600080fd5b506103c8610a1b36600461551f565b600f6020526000908152604090205481565b348015610a3957600080fd5b506103c860025481565b348015610a4f57600080fd5b50610a63610a5e3660046151fc565b612208565b6040516103a9919061596c565b348015610a7c57600080fd5b506103c860065481565b348015610a9257600080fd5b5061040b610aa13660046151fc565b61229d565b348015610ab257600080fd5b5061040b610ac13660046151fc565b61236a565b348015610ad257600080fd5b5061040b610ae13660046153a4565b6123aa565b348015610af257600080fd5b50610b06610b013660046151fc565b6123c6565b6040516103a99190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c08083015115159082015260e091820151918101919091526101000190565b348015610b7957600080fd5b506103c8600c5481565b348015610b8f57600080fd5b5061040b610b9e3660046151fc565b61249f565b348015610baf57600080fd5b5061040b610bbe3660046152ea565b61250f565b348015610bcf57600080fd5b5061040b610bde3660046159b1565b612590565b348015610bef57600080fd5b5061040b610bfe3660046151fc565b6128cc565b348015610c0f57600080fd5b5061040b610c1e3660046152ea565b61293c565b348015610c2f57600080fd5b506103c860175481565b348015610c4557600080fd5b5061040b610c543660046151fc565b612993565b348015610c6557600080fd5b5061040b610c743660046159f7565b6129e8565b348015610c8557600080fd5b506103c8610c9436600461551f565b612be1565b348015610ca557600080fd5b5061040b610cb43660046151fc565b612c02565b348015610cc557600080fd5b50610668610cd43660046151fc565b612c57565b348015610ce557600080fd5b5061040b610cf43660046151fc565b61305e565b348015610d0557600080fd5b506103c8600080516020615eca83398151915281565b348015610d2757600080fd5b506103c860035481565b348015610d3d57600080fd5b506103c8600080516020615eea83398151915281565b348015610d5f57600080fd5b5061040b610d6e36600461551f565b613084565b60006001600160e01b03198216637965db0b60e01b1480610da457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060610db660106130bf565b905090565b610dc36130cc565b610dcb6130f2565b610dd443613128565b610ddd81613213565b610de5613571565b50565b6000610da4601483613582565b600080516020615eea833981519152610e0d8161358e565b68056bc75e2d63100000821180610e25575060045482105b15610e4357604051633494a40d60e21b815260040160405180910390fd5b60198290556040518281527f597ef447da3fcf95d1df392ba918a66ae2de15f4b5f47371c336b4e99a57008f906020015b60405180910390a15050565b6000610e8c600861359f565b6001600160d01b0316905090565b610ea26130f2565b610eaa6130cc565b610eb343613128565b610ddd610ebe6135e6565b82346135f0565b610ecd6130f2565b610ed56130cc565b610ede43613128565b601254600003610f0157604051633494a40d60e21b815260040160405180910390fd5b6000610f1b826001601254610f169190615aad565b613853565b9050610f278382613869565b50610f30613571565b5050565b6000610da4601083613582565b600080610f4c613922565b60009384526020525050604090206001015490565b610f696130f2565b610f716130cc565b610f7a43613128565b60005b8151811015610fb857610fb0610f916135e6565b838381518110610fa357610fa3615ac0565b6020026020010151613946565b600101610f7d565b50610de5613571565b6000610db66014613acc565b61100a6040518060c00160405280600081526020016000151581526020016000815260200160008152602001600081526020016000151581525090565b600082815260136020908152604080832086845260068101835281842082516080810184528154815260018201548186015260028201548185015260039091015460ff1615156060820152878552600e9093529083208154600a820154929491921161108f5761108a6110808560000154613ad6565b6004840190613b12565b6110a2565b61109d600483016000613b5d565b602001515b6001600160d01b031690506040518060c001604052806110ce896110c98860010154613ad6565b613bcd565b81526020016110e0600487018a613c1d565b1515815260200184600001518152602001828152602001846040015181526020018460600151151581525094505050505092915050565b61112082610f41565b6111298161358e565b6111338383613c29565b50505050565b600080516020615eca8339815191526111518161358e565b81516000908152601360209081526040808320828601518452600e909252909120600101546001600160a01b031661119c576040516306358e4f60e11b815260040160405180910390fd5b43816001015411806111ad57508054155b156111cb5760405163756b785760e01b815260040160405180910390fd5b6040838101805160208087018051600090815260068701835285902060020192909255905186519251935193845292600080516020615e8a83398151915291015b60405180910390a3505050565b6112216135e6565b6001600160a01b0316816001600160a01b0316146112525760405163334bd91960e11b815260040160405180910390fd5b61125c8282613cd2565b505050565b600061126b613d68565b805490915060ff600160401b82041615906001600160401b03166000811580156112925750825b90506000826001600160401b031660011480156112ae5750303b155b9050811580156112bc575080155b156112da5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561130357845460ff60401b1916600160401b1785555b61130b613d8c565b611313613d8c565b61131b613d94565b611323613da4565b61132b613d8c565b662386f26fc100008660a001511080611350575068056bc75e2d631000008660c00151115b8061136257508560c001518660a00151115b80611374575085604001518660600151115b8061138657508560e001518660800151115b8061139957508561012001518660e00151115b806113ad5750856101000151866101200151115b156113cb57604051633494a40d60e21b815260040160405180910390fd5b8551600080546001600160a01b0319166001600160a01b0390921691909117905560408601516001556060860151600255608086015160035560a086015160045560c086015160195560e086015160055561010086015160065561012086015160075561014086015161144090600890613db4565b50506114526009876101600151613db4565b50506101a0860151600b556101c0860151600c556101e0860151600a556000805260136020526101808601517f8fa6efc3be94b5b348b21fea823fe8d100408cee9b7f90524494500445d8ff6c906114b6906114b090600290615aad565b43613853565b81556101808701516114ca90600190615aad565b60018083019190915560038201805460ff191690911790556114fb600080516020615eea8339815191526000613de0565b611521600080516020615eca833981519152600080516020615eea833981519152613de0565b6115326000801b8860200151613c29565b5061154f600080516020615eea8339815191528860200151613c29565b5061156c600080516020615eca8339815191528860200151613c29565b505083156115b457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600080516020615eea8339815191526115d48161358e565b610de5613e40565b6115e46150aa565b6001600160a01b0382166000908152600f6020526040902054610da490612c57565b6000610e8c600961359f565b600080600c5484846116249190615aad565b61162e9190615ad6565b9050606461163b82613e9d565b6116459087615af8565b61164f9190615ad6565b9150505b9392505050565b6116626140f1565b61166b82614196565b610f3082826141a1565b600061167f614255565b50600080516020615eaa83398151915290565b600061169c611a85565b6001600160a01b0316826001600160a01b0316149050919050565b6000806116c261429e565b5460ff1692915050565b6001600160a01b03821660009081526016602052604081206116539083613582565b60006116f98161358e565b600a8290556040518281527f2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb90602001610e74565b6000610db66010613acc565b60606000611749600254611ae2565b90506000805b825181101561178e5761177a83828151811061176d5761176d615ac0565b60200260200101516142c2565b6117849083615b0f565b915060010161174f565b508151600090156117be576117bb83600185516117ab9190615aad565b8151811061176d5761176d615ac0565b90505b600085516001600160401b038111156117d9576117d9615258565b60405190808252806020026020018201604052801561182e57816020015b61181b60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816117f75790505b5090506000805b87518110156119b157849150600088828151811061185557611855615ac0565b60200260200101519050611873816010613c1d90919063ffffffff16565b6118b75760405180606001604052808281526020016000815260200160008152508483815181106118a6576118a6615ac0565b6020026020010181905250506119a9565b60006118c2826142c2565b9050858110156118e3576118d68187615b0f565b6118e09085615aad565b93505b6000828152600e602052604081206118fd9060040161359f565b6001600160d01b03169050600085600a54846119199190615af8565b6119239190615ad6565b90506000836119328385615af8565b61193c9190615ad6565b90506000600b54600c548361016d6119549190615af8565b61195e9190615af8565b6119689190615ad6565b905060405180606001604052808781526020018281526020018381525089888151811061199757611997615ac0565b60200260200101819052505050505050505b600101611835565b50909695505050505050565b6001600160a01b0381166000908152601660205260409020606090610da4906130bf565b6119e96130f2565b6119f16130cc565b6119fa43613128565b611a02613571565b565b600080516020615eea833981519152611a1c8161358e565b662386f26fc10000821080611a32575060195482115b15611a5057604051633494a40d60e21b815260040160405180910390fd5b60048290556040518281527fcf130ebf0154d300b5d8c2c20f243f2e34a4dbbd54ddd70492f35f89f5c72e0090602001610e74565b6000546001600160a01b031690565b600080516020615eea833981519152611aac8161358e565b610de561430f565b6000601254600003611ac857506000919050565b610da4826001601254611adb9190615aad565b6000614357565b60606000611af060106130bf565b8051909150611aff8482613853565b93506000846001600160401b03811115611b1b57611b1b615258565b604051908082528060200260200182016040528015611b44578160200160208202803683370190505b50905084600003611b5757949350505050565b6000856001600160401b03811115611b7157611b71615258565b604051908082528060200260200182016040528015611b9a578160200160208202803683370190505b50905060005b83811015611d56576000858281518110611bbc57611bbc615ac0565b602002602001015190506000611bd1826142c2565b90508860005b8a811015611c5657858181518110611bf157611bf1615ac0565b6020026020010151831180611c415750858181518110611c1357611c13615ac0565b602002602001015183148015611c415750868181518110611c3657611c36615ac0565b602002602001015184105b15611c4e57809150611c56565b600101611bd7565b5089811015611d4b576000611c6c60018c615aad565b90505b81811115611d0b5786611c83600183615aad565b81518110611c9357611c93615ac0565b6020026020010151878281518110611cad57611cad615ac0565b602090810291909101015285611cc4600183615aad565b81518110611cd457611cd4615ac0565b6020026020010151868281518110611cee57611cee615ac0565b602090810291909101015280611d0381615b22565b915050611c6f565b5082868281518110611d1f57611d1f615ac0565b60200260200101818152505081858281518110611d3e57611d3e615ac0565b6020026020010181815250505b505050600101611ba0565b509095945050505050565b600080516020615eea833981519152611d798161358e565b816003541180611d8a575060075482115b15611da857604051633494a40d60e21b815260040160405180910390fd5b60058290556040518281527ff2a6752ea06dfdf93ef2d0ac5db269e4d58636cd56f160ed0c96e0a0a272362a90602001610e74565b600080611de8613922565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b600080516020615eea833981519152611e2b8161358e565b600154821115611e4e57604051633494a40d60e21b815260040160405180910390fd5b60028290556040518281527f8c3ee37d01ee5f42c88d7ff11c34795aa06e1e65f21e3813d00e101f3c3d614f90602001610e74565b60606000611e8f6135e6565b6001600160a01b0316336001600160a01b031614611efa57600036611eb5601482615aad565b611ec0928290615b39565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f0a92505050565b6040805160008152602081019091525b9050826001600160401b03811115611f2457611f24615258565b604051908082528060200260200182016040528015611f5757816020015b6060815260200190600190039081611f425790505b50915060005b83811015611fd957611fb430868684818110611f7b57611f7b615ac0565b9050602002810190611f8d9190615b63565b85604051602001611fa093929190615ba9565b604051602081830303815290604052614588565b838281518110611fc657611fc6615ac0565b6020908102919091010152600101611f5d565b505092915050565b611fe96130cc565b611ff16130f2565b80611ffa6135e6565b6000828152600e60205260409020600201546001600160a01b0390811691161461203757604051633387d70760e01b815260040160405180910390fd5b61204043613128565b6000828152600e602052604090206001600982015460ff1660048111156120695761206961558c565b1415801561209057506002600982015460ff16600481111561208d5761208d61558c565b14155b80156120b557506003600982015460ff1660048111156120b2576120b261558c565b14155b156120d357604051636e1ed6c560e11b815260040160405180910390fd5b60098101805460ff191660041790556120ed6010846145f5565b5060405183907fc3f4c6824ace066416e91f60e8762e0257019e0eb2e83afa4cdf62d23991e73990600090a25050610de5613571565b600080516020615eea83398151915261213b8161358e565b81600554118061214c575060065482115b1561216a57604051633494a40d60e21b815260040160405180910390fd5b600782905560005b61217c6010613acc565b8110156121d7576000612190601083613582565b6000818152600e60205260409020909150846121ab836142c2565b10156121cd5760098101805460ff191660011790556121cb6010836145f5565b505b5050600101612172565b506040518281527f5486872ddb5ca216cd9cb1f6e2e232e468aa32e312fbccba2ffb5edc831cfb2c90602001610e74565b61223c6040518060a00160405280600081526020016000815260200160008152602001600015158152602001606081525090565b6040805160a08101825260008481526013602081815284832080548552600181015482860152600281015495850195909552600385015460ff1615156060850152918690529052906080820190612295906004016130bf565b905292915050565b600080516020615eea8339815191526122b58161358e565b8160075411156122d857604051633494a40d60e21b815260040160405180910390fd5b600682905560005b6122ea6010613acc565b8110156123395760006122fe601083613582565b6000818152600e6020526040902090915084612319836142c2565b101561232f5760098101805460ff191660031790555b50506001016122e0565b506040518281527f97eca98512abc502b3bb1ef19702bf7eb53a988b87fd250138fbbfd1b62782c990602001610e74565b60006123758161358e565b600b8290556040518281527f3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f5890602001610e74565b6123b382610f41565b6123bc8161358e565b6111338383613cd2565b6124196040518061010001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b50600081815260186020908152604080832081516101008101835294855280546001600160a01b03168584015260018101548583018190526002820154606087015260038201546080870152600482015460a0870152600582015460ff16151560c08701528452600e80845282852060069092015485520190915290205460e082015290565b600080516020615eea8339815191526124b78161358e565b6005548211156124da57604051633494a40d60e21b815260040160405180910390fd5b60038290556040518281527f8448c02797b448f4946bc25b3bf925e5556d1df822c944da701c54bab8a3162f90602001610e74565b6125176130f2565b61251f6130cc565b61252843613128565b60125460000361254b576040516312d37ee560e31b815260040160405180910390fd5b60005b8151811015610fb85761258882828151811061256c5761256c615ac0565b602002602001015160016012546125839190615aad565b613869565b60010161254e565b6125986130cc565b6125a06130f2565b816125a96135e6565b6000828152600e60205260409020600201546001600160a01b039081169116146125e657604051633387d70760e01b815260040160405180910390fd5b6125ef43613128565b6000612601604084016020850161551f565b6001600160a01b0316148061262e57506000612623606084016040850161551f565b6001600160a01b0316145b1561264c5760405163e6c4247b60e01b815260040160405180910390fd5b6004548260600135108061266557506019548260600135115b156126835760405163d1be20e560e01b815260040160405180910390fd5b6000838152600e60209081526040909120906126a19084018461551f565b60018201546001600160a01b039081169116146126d15760405163793a3a3d60e11b815260040160405180910390fd5b6126e1604084016020850161551f565b6002820180546001600160a01b0319166001600160a01b0392909216919091179055612713606084016040850161551f565b6003820180546001600160a01b0319166001600160a01b039290921691909117905560608301356127466004830161359f565b6001600160d01b03161461276857612765816004018460600135613db4565b50505b6127756080840184615b63565b6005830191612785919083615c4c565b5061279360a0840184615b63565b60068301916127a3919083615c4c565b506127b160c0840184615b63565b60078301916127c1919083615c4c565b506127cf60e0840184615b63565b60088301916127df919083615c4c565b5083600f60006127f2602087018761551f565b6001600160a01b031681526020808201929092526040016000209190915561281c9084018461551f565b6001600160a01b0316847fdfb704f30cb8b5a69562201718d3bdfd1299983f120f8ff3932b295bfa15aede612857604087016020880161551f565b612867606088016040890161551f565b606088013561287960808a018a615b63565b61288660a08c018c615b63565b61289360c08e018e615b63565b8e8060e001906128a39190615b63565b6040516128ba9b9a99989796959493929190615d34565b60405180910390a35050610f30613571565b600080516020615eea8339815191526128e48161358e565b81600254111561290757604051633494a40d60e21b815260040160405180910390fd5b60018290556040518281527f4396ad8283225f2aee81ccc849dced59dc271fe85e61179ea6a74c854d628b7190602001610e74565b6129446130f2565b61294c6130cc565b61295543613128565b60005b8151811015610fb85761298b61296c6135e6565b83838151811061297e5761297e615ac0565b6020026020010151614601565b600101612958565b600080516020615eea8339815191526129ab8161358e565b6129b6600883613db4565b50506040518281527f5f77bf3bb8edc470b5034e85a2d7123e6578eec3b9705c24d40d2e984d4f2a7690602001610e74565b600080516020615eca833981519152612a008161358e565b60005b825181101561125c57600060136000858481518110612a2457612a24615ac0565b602002602001015160000151815260200190815260200160002090506000816006016000868581518110612a5a57612a5a615ac0565b6020026020010151602001518152602001908152602001600020905060006001600160a01b0316600e6000878681518110612a9757612a97615ac0565b6020908102919091018101518101518252810191909152604001600020600101546001600160a01b031603612adf576040516306358e4f60e11b815260040160405180910390fd5b4382600101541180612af057508154155b15612b0e5760405163756b785760e01b815260040160405180910390fd5b600281015415612b3157604051634d40249960e01b815260040160405180910390fd5b848381518110612b4357612b43615ac0565b6020026020010151604001518160020181905550848381518110612b6957612b69615ac0565b602002602001015160200151858481518110612b8757612b87615ac0565b602002602001015160000151600080516020615e8a833981519152878681518110612bb457612bb4615ac0565b602002602001015160400151604051612bcf91815260200190565b60405180910390a35050600101612a03565b6001600160a01b0381166000908152601660205260408120610da490613acc565b600080516020615eea833981519152612c1a8161358e565b612c25600983613db4565b50506040518281527f4a675b4074075265c6da90abb559f75ec801d6e403d0dd6dde4bb38631929ede90602001610e74565b612c5f6150aa565b6000828152600e602090815260408083206012548452601390925282208054600a8301549293919211612cab57612ca6612c9c8360000154613ad6565b6004850190613b12565b612cbe565b612cb9600484016000613b5d565b602001515b6001600160d01b03169050600083600d01546001600160401b03811115612ce757612ce7615258565b604051908082528060200260200182016040528015612d10578160200160208202803683370190505b50905060015b84600d01548111612d6b576000818152600e8601602052604090205482612d3e600184615aad565b81518110612d4e57612d4e615ac0565b602090810291909101015280612d6381615db7565b915050612d16565b50604080516101c0810182528554815260018601546001600160a01b03908116602083015260028701548116928201929092526003860154909116606082015260808101612dbb6004870161359f565b6001600160d01b03168152602001838152602001856005018054612dde90615bd0565b80601f0160208091040260200160405190810160405280929190818152602001828054612e0a90615bd0565b8015612e575780601f10612e2c57610100808354040283529160200191612e57565b820191906000526020600020905b815481529060010190602001808311612e3a57829003601f168201915b50505050508152602001856006018054612e7090615bd0565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9c90615bd0565b8015612ee95780601f10612ebe57610100808354040283529160200191612ee9565b820191906000526020600020905b815481529060010190602001808311612ecc57829003601f168201915b50505050508152602001856007018054612f0290615bd0565b80601f0160208091040260200160405190810160405280929190818152602001828054612f2e90615bd0565b8015612f7b5780601f10612f5057610100808354040283529160200191612f7b565b820191906000526020600020905b815481529060010190602001808311612f5e57829003601f168201915b50505050508152602001856008018054612f9490615bd0565b80601f0160208091040260200160405190810160405280929190818152602001828054612fc090615bd0565b801561300d5780601f10612fe25761010080835404028352916020019161300d565b820191906000526020600020905b815481529060010190602001808311612ff057829003601f168201915b5050509183525050600986015460209091019060ff1660048111156130345761303461558c565b815260200185600a0154815260200161304c886142c2565b81526020019190915295945050505050565b6130666130f2565b61306e6130cc565b610ddd43821061307e5743613128565b81613128565b600080516020615eea83398151915261309c8161358e565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060600061165383614773565b6130d46116b7565b15611a025760405163d93c066560e01b815260040160405180910390fd5b60006130fc6147cf565b80549091506001190161312257604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60125460009081526013602052604090206001810154431015613149575050565b8181600101541015610f305760038101805460ff19166001179055601254613170906147f3565b60006013600060126000815461318590615db7565b91905081905581526020019081526020016000209050816001015460016131ac9190615b0f565b808255600b546001916131bf9190615b0f565b6131c99190615aad565b6001820155600a5460028201556012546040519081527f0129593a287c7be892e56181ff1238eb466a2c952dc53a3029140d1f3ddc4a8d9060200160405180910390a19050613149565b6000613225604083016020840161551f565b6001600160a01b0316148061325257506000613247606083016040840161551f565b6001600160a01b0316145b156132705760405163e6c4247b60e01b815260040160405180910390fd5b600f6000613281602084018461551f565b6001600160a01b03168152602081019190915260400160002054156132b957604051636e1ed6c560e11b815260040160405180910390fd5b600454816060013510806132d257506019548160600135115b156132f05760405163d1be20e560e01b815260040160405180910390fd5b60055434101561331357604051630103be3b60e21b815260040160405180910390fd5b6000600d6000815461332490615db7565b91829055506000818152600e6020908152604090912082815591925061334c9084018461551f565b6001820180546001600160a01b0319166001600160a01b039290921691909117905561337e604084016020850161551f565b6002820180546001600160a01b0319166001600160a01b03929092169190911790556133b0606084016040850161551f565b6003820180546001600160a01b0319166001600160a01b03929092169190911790556133e3600482016060850135613db4565b506133f390506080840184615b63565b6005830191613403919083615c4c565b5061341160a0840184615b63565b6006830191613421919083615c4c565b5061342f60c0840184615b63565b600783019161343f919083615c4c565b5061344d60e0840184615b63565b600883019161345d919083615c4c565b5060098101805460ff1916600117905543600a82015581600f6000613485602087018761551f565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506134c68360200160208101906134bf919061551f565b83346135f0565b6134d3602084018461551f565b6001600160a01b0316827fb7474aa65f72ae77dbf02c6bd0a0d85749e7101f97fc94d524af373e832dc06a61350e604087016020880161551f565b61351e606088016040890161551f565b606088013561353060808a018a615b63565b61353d60a08c018c615b63565b61354a60c08e018e615b63565b8e8060e0019061355a9190615b63565b60405161120c9b9a99989796959493929190615d34565b600061357b6147cf565b6001905550565b60006116538383614a42565b610de58161359a6135e6565b614a6c565b805460009080156135dd576135c7836135b9600184615aad565b600091825260209091200190565b54600160301b90046001600160d01b0316611653565b60009392505050565b6000610db6614aa5565b6001600160a01b0383166136175760405163e6c4247b60e01b815260040160405180910390fd5b60035481101561363a57604051630103be3b60e21b815260040160405180910390fd5b6000828152600e602052604090206001600982015460ff1660048111156136635761366361558c565b1415801561368a57506002600982015460ff1660048111156136875761368761558c565b14155b80156136af57506003600982015460ff1660048111156136ac576136ac61558c565b14155b156136cd57604051636e1ed6c560e11b815260040160405180910390fd5b6000601860006017600081546136e290615db7565b91829055508152602080820192909252604090810160009081206002810187905543600382015580546001600160a01b0319166001600160a01b038a16908117825560018201899055600d8701546006830155825260169093522090915061374a8186614af7565b50613756601487614b03565b5061376483600b0185614b18565b5060029050600984015460ff1660048111156137825761378261558c565b1415801561379a5750600654613797866142c2565b10155b80156137b057506001546137ae6010613acc565b105b156137fc576137c0601086614af7565b5060098301805460ff1916600217905560405185907fa22b756fb9961f15b7c68b1e8ee6629486ce6d13d0b3b006d1f2381fe491787e90600090a25b84866001600160a01b03167ff234bd1a05f5a6f0b6af3f0c8bacad613635f0022e2ec2162717ef21a1591d6a60175487604051613843929190918252602082015260400190565b60405180910390a3505050505050565b60008183106138625781611653565b5090919050565b600061387783836001614357565b90508060000361389a576040516312d37ee560e31b815260040160405180910390fd5b600083815260186020526040808220805491519092916001600160a01b03169084908381818185875af1925050503d80600081146138f4576040519150601f19603f3d011682016040523d82523d6000602084013e6138f9565b606091505b505090508061391b576040516312171d8360e31b815260040160405180910390fd5b5050505050565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b600081815260186020526040902080546001600160a01b038481169116146139815760405163335e79fb60e21b815260040160405180910390fd5b6004810154156139a457604051638ccbf9a560e01b815260040160405180910390fd5b60018101546000908152600e6020526040902060028201546139ca90600c830190614b18565b505043600483015560018201546000906139e3906142c2565b905060075481108015613a3057506003600983015460ff166004811115613a0c57613a0c61558c565b1480613a3057506002600983015460ff166004811115613a2e57613a2e61558c565b145b15613a5c5760098201805460ff19166001908117909155830154613a56906010906145f5565b50613a9a565b60065481108015613a8557506002600983015460ff166004811115613a8357613a8361558c565b145b15613a9a5760098201805460ff191660031790555b60405184907fc46bc112bb28b616434d6e89582a82bdc7cf9ef52a0b1228d20f5e5ccca7ec4690600090a25050505050565b6000610da4825490565b600065ffffffffffff821115613b0e576040516306dfcc6560e41b815260306004820152602481018390526044015b60405180910390fd5b5090565b815460009081613b2485858385614b43565b90508015613b5157613b3b856135b9600184615aad565b54600160301b90046001600160d01b0316613b54565b60005b95945050505050565b6040805180820190915260008082526020820152826000018263ffffffff1681548110613b8c57613b8c615ac0565b60009182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b6000828152600e60205260408120613be890600c0183613b12565b6000848152600e60205260409020613c0390600b0184613b12565b613c0d9190615dd0565b6001600160d01b03169392505050565b60006116538383614ba5565b600080613c34613922565b9050613c408484611ddd565b613cc1576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055613c776135e6565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610da4565b6000915050610da4565b5092915050565b600080613cdd613922565b9050613ce98484611ddd565b15613cc1576000848152602082815260408083206001600160a01b03871684529091529020805460ff19169055613d1e6135e6565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050610da4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611a02614bbd565b613d9c614bbd565b611a02614be2565b613dac614bbd565b611a02614bea565b600080613dd4613dc343613ad6565b613dcc85614c07565b869190614c3b565b915091505b9250929050565b6000613dea613922565b90506000613df784610f41565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b613e48614c56565b6000613e5261429e565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613e856135e6565b604051613e929190615222565b60405180910390a150565b600060408210613eb0575061012c919050565b60408051610800810182526064815260666020820152606981830152606b6060820152606e6080820152607060a0820152607260c080830191909152607560e08301526077610100830152607961012080840191909152607c610140840152607e610160840152608161018084015260836101a084015260856101c084015260886101e0840152608a610200840152608c610220840152608f6102408401526091610260840152609461028084015260966102a0840152609c6102c084015260a26102e084015260a861030084015260ae61032084015260b461034084015260ba61036084015261038083019190915260c66103a083015260cc6103c083015260d26103e083015260d761040083015260dd61042083015260e361044083015260e961046083015260ef61048083015260f56104a083015260fb6104c08301526101016104e083015261010761050083015261010d6105208301526101136105408301526101146105608301526101156105808301526101176105a08301526101186105c08301526101196105e083015261011a61060083015261011b61062083015261011d61064083015261011e61066083015261011f6106808301526106a08201526101216106c08201526101226106e082015261012461070082015261012561072082015261012661074082015261012761076082015261012861078082015261012a6107a082015261012b6107c082015261012c6107e0820152908190849081106140e1576140e1615ac0565b602002015161ffff169392505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061417857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661416c600080516020615eaa833981519152546001600160a01b031690565b6001600160a01b031614155b15611a025760405163703e46dd60e11b815260040160405180910390fd5b6000610f308161358e565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156141fb575060408051601f3d908101601f191682019092526141f891810190615df0565b60015b61421a5781604051634c9c8ce360e01b8152600401613b059190615222565b600080516020615eaa833981519152811461424b57604051632a87526960e21b815260048101829052602401613b05565b61125c8383614c7b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a025760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b6000818152600e602052604081206142dc90600c0161359f565b6000838152600e602052604090206142f690600b0161359f565b6143009190615dd0565b6001600160d01b031692915050565b6143176130cc565b600061432161429e565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613e856135e6565b60008381526018602090815260408083206001808201548552600e9093529083206006820154919290918491829161438e91615b0f565b6000818152600e850160205260408120549192506143aa611606565b90505b6000821180156143bd5750888211155b1561457a57600082815260136020908152604080832060018a01548452600681019092529091208315806143f357506002810154155b80614414575060008860040154118015614414575087600401548260010154115b1561442057505061457a565b600061443989600201548a600301548560010154611612565b9050600082600201548268056bc75e2d63100000856001015486600001546144619190615af8565b61446b9190615ad6565b6144759190615af8565b61447f9190615ad6565b90506000600c548560010154436144969190615aad565b6144a09190615ad6565b6144ab906001615b0f565b90506000861180156144bc57508581105b156144dd57856144cc8284615af8565b6144d69190615ad6565b91506144eb565b8c156144eb5760068b018890555b600087815260078c016020526040902054821161450c57505050505061457a565b600087815260078c0160205260409020546145279083615aad565b614531908a615b0f565b98508c1561454d57600087815260078c01602052604090208290555b600e8a01600061455c8a615db7565b995089815260200190815260200160002054965050505050506143ad565b509198975050505050505050565b6060600080846001600160a01b0316846040516145a59190615e09565b600060405180830381855af49150503d80600081146145e0576040519150601f19603f3d011682016040523d82523d6000602084013e6145e5565b606091505b5091509150613b54858383614cd1565b60006116538383614d24565b600081815260186020526040902080546001600160a01b0384811691161461463c5760405163335e79fb60e21b815260040160405180910390fd5b600581015460ff16156146625760405163190507cd60e21b815260040160405180910390fd5b8060040154600003614687576040516372728c7960e11b815260040160405180910390fd5b43614690610e80565b826004015461469f9190615b0f565b11156146be57604051630fae9a4560e41b815260040160405180910390fd5b60058101805460ff1916600117905560028101546040516000916001600160a01b038616918381818185875af1925050503d806000811461471b576040519150601f19603f3d011682016040523d82523d6000602084013e614720565b606091505b5050905080614742576040516312171d8360e31b815260040160405180910390fd5b60405183907fa78b9f12a7da0df7ced737c5f83d0c05723bb5f43aab37e233b862710414847290600090a250505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156147c357602002820191906000526020600020905b8154815260200190600101908083116147af575b50505050509050919050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b806000036147fe5750565b600081815260136020526040812060025490919061481b90611ae2565b90506000808080805b85518510156148595761484286868151811061176d5761176d615ac0565b61484c9085615b0f565b6001909501949350614824565b600094505b8551851015614a385785858151811061487957614879615ac0565b602002602001015192506148998388600401614af790919063ffffffff16565b50600e600084815260200190815260200160002090508781600e01600083600d01600081546148c790615db7565b9190508190558152602001908152602001600020819055508660060160008481526020019081526020016000209150866000015481600a0154111561492b57614914600482016000613b5d565b602001516001600160d01b03166001830155614954565b61494561493b8860000154613ad6565b6004830190613b12565b6001600160d01b031660018301555b838760020154614963856142c2565b61496d9190615af8565b6149779190615ad6565b8255600182015468056bc75e2d631000001115614a2d57600381015460018301546000916001600160a01b03169068056bc75e2d63100000906149ba9082615aad565b85546149c69190615af8565b6149d09190615ad6565b604051600081818185875af1925050503d8060008114614a0c576040519150601f19603f3d011682016040523d82523d6000602084013e614a11565b606091505b505090508015614a2b5760038301805460ff191660011790555b505b60019094019361485e565b5050505050505050565b6000826000018281548110614a5957614a59615ac0565b9060005260206000200154905092915050565b614a768282611ddd565b610f305760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401613b05565b6000366014614ab333611692565b8015614abf5750808210155b15614aef57600036614ad18385615aad565b614adc928290615b39565b614ae591615e25565b60601c9250505090565b339250505090565b60006116538383614e0d565b6000611653836001600160a01b038416614e0d565b600080613dd4614b2743613ad6565b614b3085614c07565b614b398761359f565b613dcc9190615e53565b60005b81831015614b9d576000614b5a8484614e57565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff161115614b8957809250614b97565b614b94816001615b0f565b93505b50614b46565b509392505050565b60009081526001919091016020526040902054151590565b614bc5614e72565b611a0257604051631afcd79f60e31b815260040160405180910390fd5b613571614bbd565b614bf2614bbd565b6000614bfc61429e565b805460ff1916905550565b60006001600160d01b03821115613b0e576040516306dfcc6560e41b815260d0600482015260248101839052604401613b05565b600080614c49858585614e8c565b915091505b935093915050565b614c5e6116b7565b611a0257604051638dfc202b60e01b815260040160405180910390fd5b614c8482615006565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115614cc95761125c8282614588565b610f30615062565b606082614ce657614ce182615081565b611653565b8151158015614cfd57506001600160a01b0384163b155b15614d1d5783604051639996b31560e01b8152600401613b059190615222565b5080611653565b60008181526001830160205260408120548015613cc1576000614d48600183615aad565b8554909150600090614d5c90600190615aad565b9050808214614dc1576000866000018281548110614d7c57614d7c615ac0565b9060005260206000200154905080876000018481548110614d9f57614d9f615ac0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614dd257614dd2615e73565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610da4565b6000614e198383614ba5565b614e4f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610da4565b506000610da4565b6000614e666002848418615ad6565b61165390848416615b0f565b6000614e7c613d68565b54600160401b900460ff16919050565b825460009081908015614fab576000614eaa876135b9600185615aad565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b031660208401529192509087161015614efe57604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603614f4a5784614f21886135b9600186615aad565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055614f9b565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b602001519250839150614c4e9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b029190931617920191909155905081614c4e565b806001600160a01b03163b6000036150335780604051634c9c8ce360e01b8152600401613b059190615222565b600080516020615eaa83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b3415611a025760405163b398979f60e01b815260040160405180910390fd5b8051156150915780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806101c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081526020016000600481111561512a5761512a61558c565b81526020016000815260200160008152602001606081525090565b60006020828403121561515757600080fd5b81356001600160e01b03198116811461165357600080fd5b6020808252825182820181905260009190848201906040850190845b818110156119b15783518352928401929184019160010161518b565b600061010082840312156151ba57600080fd5b50919050565b6000602082840312156151d257600080fd5b81356001600160401b038111156151e857600080fd5b6151f4848285016151a7565b949350505050565b60006020828403121561520e57600080fd5b5035919050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6000806040838503121561524957600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b038111828210171561529157615291615258565b60405290565b604051601f8201601f191681016001600160401b03811182821017156152bf576152bf615258565b604052919050565b60006001600160401b038211156152e0576152e0615258565b5060051b60200190565b600060208083850312156152fd57600080fd5b82356001600160401b0381111561531357600080fd5b8301601f8101851361532457600080fd5b8035615337615332826152c7565b615297565b81815260059190911b8201830190838101908783111561535657600080fd5b928401925b828410156153745783358252928401929084019061535b565b979650505050505050565b6001600160a01b0381168114610de557600080fd5b803561539f8161537f565b919050565b600080604083850312156153b757600080fd5b8235915060208301356153c98161537f565b809150509250929050565b6000606082840312156153e657600080fd5b604051606081016001600160401b038111828210171561540857615408615258565b80604052508091508235815260208301356020820152604083013560408201525092915050565b60006060828403121561544157600080fd5b61165383836153d4565b6000610200828403121561545e57600080fd5b61546661526e565b61546f83615394565b815261547d60208401615394565b602082015260408381013590820152606080840135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135908201526101c080840135908201526101e0928301359281019290925250919050565b60006020828403121561553157600080fd5b81356116538161537f565b60005b8381101561555757818101518382015260200161553f565b50506000910152565b6000815180845261557881602086016020860161553c565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600581106155c057634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452602080850194506020840160005b838110156155f5578151875295820195908201906001016155d9565b509495945050505050565b60208152815160208201526000602083015161561f6040840182615215565b5060408301516156326060840182615215565b5060608301516156456080840182615215565b50608083015160a083015260a083015160c083015260c08301516101c08060e08501526156766101e0850183615560565b915060e0850151601f196101008187860301818801526156968584615560565b9450808801519250506101208187860301818801526156b58584615560565b9450808801519250506101408187860301818801526156d48584615560565b9450808801519250506101606156ec818801846155a2565b870151610180878101919091528701516101a08088019190915287015186850390910183870152905061571f83826155c4565b9695505050505050565b60008060006060848603121561573e57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561576857600080fd5b82356157738161537f565b91506020838101356001600160401b038082111561579057600080fd5b818601915086601f8301126157a457600080fd5b8135818111156157b6576157b6615258565b6157c8601f8201601f19168501615297565b915080825287848285010111156157de57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561580f57600080fd5b823561581a8161537f565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156158745781518051855286810151878601528501518585015260609093019290850190600101615845565b5091979650505050505050565b6000806020838503121561589457600080fd5b82356001600160401b03808211156158ab57600080fd5b818501915085601f8301126158bf57600080fd5b8135818111156158ce57600080fd5b8660208260051b85010111156158e357600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561594c57603f1988860301845261593a858351615560565b9450928501929085019060010161591e565b5092979650505050505050565b6020815260006116536020830184615560565b602081528151602082015260208201516040820152604082015160608201526060820151151560808201526000608083015160a0808401526151f460c08401826155c4565b600080604083850312156159c457600080fd5b8235915060208301356001600160401b038111156159e157600080fd5b6159ed858286016151a7565b9150509250929050565b60006020808385031215615a0a57600080fd5b82356001600160401b03811115615a2057600080fd5b8301601f81018513615a3157600080fd5b8035615a3f615332826152c7565b808282526020820191506060602060608502860101935088841115615a6357600080fd5b6020850194505b83851015615a8b57615a7c89866153d4565b83529384019391850191615a6a565b50979650505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610da457610da4615a97565b634e487b7160e01b600052603260045260246000fd5b600082615af357634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610da457610da4615a97565b80820180821115610da457610da4615a97565b600081615b3157615b31615a97565b506000190190565b60008085851115615b4957600080fd5b83861115615b5657600080fd5b5050820193919092039150565b6000808335601e19843603018112615b7a57600080fd5b8301803591506001600160401b03821115615b9457600080fd5b602001915036819003821315613dd957600080fd5b828482376000838201600081528351615bc681836020880161553c565b0195945050505050565b600181811c90821680615be457607f821691505b6020821081036151ba57634e487b7160e01b600052602260045260246000fd5b601f82111561125c576000816000526020600020601f850160051c81016020861015615c2d5750805b601f850160051c820191505b818110156115b457828155600101615c39565b6001600160401b03831115615c6357615c63615258565b615c7783615c718354615bd0565b83615c04565b6000601f841160018114615cab5760008515615c935750838201355b600019600387901b1c1916600186901b17835561391b565b600083815260209020601f19861690835b82811015615cdc5786850135825560209485019460019092019101615cbc565b5086821015615cf95760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038c811682528b166020820152604081018a905260e060608201819052600090615d689083018a8c615d0b565b8281036080840152615d7b81898b615d0b565b905082810360a0840152615d90818789615d0b565b905082810360c0840152615da5818587615d0b565b9e9d5050505050505050505050505050565b600060018201615dc957615dc9615a97565b5060010190565b6001600160d01b03828116828216039080821115613ccb57613ccb615a97565b600060208284031215615e0257600080fd5b5051919050565b60008251615e1b81846020870161553c565b9190910192915050565b6001600160601b03198135818116916014851015611fd95760149490940360031b84901b1690921692915050565b6001600160d01b03818116838216019080821115613ccb57613ccb615a97565b634e487b7160e01b600052603160045260246000fdfe948d378fa4c68569d2ecf922375e8845e879b43a1b882cc2b3aece8b76982f84360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220423185adb2adfa3a69358fd7f84d01744bee69c51f7963014192abc572ce20b764736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106103785760003560e01c806301ffc9a71461037d578063028f31f3146103b257806303a229f6146103d657806305c1c3f4146103f857806306a08b0e1461040d57806307e0cd171461043a578063132c58e91461045057806314973daf14610466578063151db1b9146104865780631bf6ddae1461049b5780631e6760d3146104ae5780632393526f146104ce578063248a9ca3146104ee57806324918d791461050e5780632624cc6f1461052e5780632ae51134146105435780632f2ff15d146105b3578063319fe36b146105d357806336568abe146105f3578063387548b5146106135780633f4ba83a14610633578063439b37561461064857806346582583146106755780634c85c8d91461068a5780634f1ef286146106aa57806352d1902d146106bd57806354fd4d50146106d2578063572b6c05146106e6578063572d356e146107065780635c975abb1461071c578063633e7e541461073157806368ed41ed146107515780636b289f5b146107675780636d352711146107875780636d51fa9d1461079c5780637217d22d146107c957806372c9acdc146107e957806376bc9869146107ff57806377a3b265146108145780637da0a877146108345780638456cb59146108495780638c31cd3e1461085e5780638d8c658f1461087e5780638e991ff31461089e578063901d97f6146108b4578063916e1c57146108d457806391d14854146108ea5780639e8e67171461090a578063a217fddf14610920578063aa37489814610935578063ac9650d814610955578063ad3cb1cc14610982578063b4fcea1d146109c0578063c02b8cf4146109e0578063c06020b014610a00578063c53036f414610a2d578063c6b61e4c14610a43578063cdf2003e14610a70578063d4dc04ba14610a86578063d4e0187214610aa6578063d547741f14610ac6578063d5a44f8614610ae6578063d7033ca014610b6d578063d8060cd514610b83578063dd8c017c14610ba3578063ddadf36914610bc3578063df18328b14610be3578063e1d648d114610c03578063e5331f1714610c23578063e6fe27c414610c39578063e7de504114610c59578063e7ebaa6f14610c79578063e98fa42b14610c99578063ea83e47b14610cb9578063eaeb2ec814610cd9578063ec87621c14610cf9578063f188768414610d1b578063f874225414610d31578063f90b031114610d53575b600080fd5b34801561038957600080fd5b5061039d610398366004615145565b610d73565b60405190151581526020015b60405180910390f35b3480156103be57600080fd5b506103c860045481565b6040519081526020016103a9565b3480156103e257600080fd5b506103eb610daa565b6040516103a9919061516f565b61040b6104063660046151c0565b610dbb565b005b34801561041957600080fd5b5061042d6104283660046151fc565b610de8565b6040516103a99190615222565b34801561044657600080fd5b506103c860075481565b34801561045c57600080fd5b506103c8600a5481565b34801561047257600080fd5b5061040b6104813660046151fc565b610df5565b34801561049257600080fd5b506103c8610e80565b61040b6104a93660046151fc565b610e9a565b3480156104ba57600080fd5b5061040b6104c9366004615236565b610ec5565b3480156104da57600080fd5b506103c86104e93660046151fc565b610f34565b3480156104fa57600080fd5b506103c86105093660046151fc565b610f41565b34801561051a57600080fd5b5061040b6105293660046152ea565b610f61565b34801561053a57600080fd5b506103c8610fc1565b34801561054f57600080fd5b5061056361055e366004615236565b610fcd565b6040516103a99190600060c0820190508251825260208301511515602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b3480156105bf57600080fd5b5061040b6105ce3660046153a4565b611117565b3480156105df57600080fd5b5061040b6105ee36600461542f565b611139565b3480156105ff57600080fd5b5061040b61060e3660046153a4565b611219565b34801561061f57600080fd5b5061040b61062e36600461544b565b611261565b34801561063f57600080fd5b5061040b6115bc565b34801561065457600080fd5b5061066861066336600461551f565b6115dc565b6040516103a99190615600565b34801561068157600080fd5b506103c8611606565b34801561069657600080fd5b506103c86106a5366004615729565b611612565b61040b6106b8366004615755565b61165a565b3480156106c957600080fd5b506103c8611675565b3480156106de57600080fd5b5060016103c8565b3480156106f257600080fd5b5061039d61070136600461551f565b611692565b34801561071257600080fd5b506103c8600b5481565b34801561072857600080fd5b5061039d6116b7565b34801561073d57600080fd5b506103c861074c3660046157fc565b6116cc565b34801561075d57600080fd5b506103c8600d5481565b34801561077357600080fd5b5061040b6107823660046151fc565b6116ee565b34801561079357600080fd5b506103c861172e565b3480156107a857600080fd5b506107bc6107b73660046152ea565b61173a565b6040516103a99190615828565b3480156107d557600080fd5b506103eb6107e436600461551f565b6119bd565b3480156107f557600080fd5b506103c860195481565b34801561080b57600080fd5b5061040b6119e1565b34801561082057600080fd5b5061040b61082f3660046151fc565b611a04565b34801561084057600080fd5b5061042d611a85565b34801561085557600080fd5b5061040b611a94565b34801561086a57600080fd5b506103c86108793660046151fc565b611ab4565b34801561088a57600080fd5b506103eb6108993660046151fc565b611ae2565b3480156108aa57600080fd5b506103c860055481565b3480156108c057600080fd5b5061040b6108cf3660046151fc565b611d61565b3480156108e057600080fd5b506103c860125481565b3480156108f657600080fd5b5061039d6109053660046153a4565b611ddd565b34801561091657600080fd5b506103c860015481565b34801561092c57600080fd5b506103c8600081565b34801561094157600080fd5b5061040b6109503660046151fc565b611e13565b34801561096157600080fd5b50610975610970366004615881565b611e83565b6040516103a991906158f5565b34801561098e57600080fd5b506109b3604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516103a99190615959565b3480156109cc57600080fd5b5061040b6109db3660046151fc565b611fe1565b3480156109ec57600080fd5b5061040b6109fb3660046151fc565b612123565b348015610a0c57600080fd5b506103c8610a1b36600461551f565b600f6020526000908152604090205481565b348015610a3957600080fd5b506103c860025481565b348015610a4f57600080fd5b50610a63610a5e3660046151fc565b612208565b6040516103a9919061596c565b348015610a7c57600080fd5b506103c860065481565b348015610a9257600080fd5b5061040b610aa13660046151fc565b61229d565b348015610ab257600080fd5b5061040b610ac13660046151fc565b61236a565b348015610ad257600080fd5b5061040b610ae13660046153a4565b6123aa565b348015610af257600080fd5b50610b06610b013660046151fc565b6123c6565b6040516103a99190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c08083015115159082015260e091820151918101919091526101000190565b348015610b7957600080fd5b506103c8600c5481565b348015610b8f57600080fd5b5061040b610b9e3660046151fc565b61249f565b348015610baf57600080fd5b5061040b610bbe3660046152ea565b61250f565b348015610bcf57600080fd5b5061040b610bde3660046159b1565b612590565b348015610bef57600080fd5b5061040b610bfe3660046151fc565b6128cc565b348015610c0f57600080fd5b5061040b610c1e3660046152ea565b61293c565b348015610c2f57600080fd5b506103c860175481565b348015610c4557600080fd5b5061040b610c543660046151fc565b612993565b348015610c6557600080fd5b5061040b610c743660046159f7565b6129e8565b348015610c8557600080fd5b506103c8610c9436600461551f565b612be1565b348015610ca557600080fd5b5061040b610cb43660046151fc565b612c02565b348015610cc557600080fd5b50610668610cd43660046151fc565b612c57565b348015610ce557600080fd5b5061040b610cf43660046151fc565b61305e565b348015610d0557600080fd5b506103c8600080516020615eca83398151915281565b348015610d2757600080fd5b506103c860035481565b348015610d3d57600080fd5b506103c8600080516020615eea83398151915281565b348015610d5f57600080fd5b5061040b610d6e36600461551f565b613084565b60006001600160e01b03198216637965db0b60e01b1480610da457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060610db660106130bf565b905090565b610dc36130cc565b610dcb6130f2565b610dd443613128565b610ddd81613213565b610de5613571565b50565b6000610da4601483613582565b600080516020615eea833981519152610e0d8161358e565b68056bc75e2d63100000821180610e25575060045482105b15610e4357604051633494a40d60e21b815260040160405180910390fd5b60198290556040518281527f597ef447da3fcf95d1df392ba918a66ae2de15f4b5f47371c336b4e99a57008f906020015b60405180910390a15050565b6000610e8c600861359f565b6001600160d01b0316905090565b610ea26130f2565b610eaa6130cc565b610eb343613128565b610ddd610ebe6135e6565b82346135f0565b610ecd6130f2565b610ed56130cc565b610ede43613128565b601254600003610f0157604051633494a40d60e21b815260040160405180910390fd5b6000610f1b826001601254610f169190615aad565b613853565b9050610f278382613869565b50610f30613571565b5050565b6000610da4601083613582565b600080610f4c613922565b60009384526020525050604090206001015490565b610f696130f2565b610f716130cc565b610f7a43613128565b60005b8151811015610fb857610fb0610f916135e6565b838381518110610fa357610fa3615ac0565b6020026020010151613946565b600101610f7d565b50610de5613571565b6000610db66014613acc565b61100a6040518060c00160405280600081526020016000151581526020016000815260200160008152602001600081526020016000151581525090565b600082815260136020908152604080832086845260068101835281842082516080810184528154815260018201548186015260028201548185015260039091015460ff1615156060820152878552600e9093529083208154600a820154929491921161108f5761108a6110808560000154613ad6565b6004840190613b12565b6110a2565b61109d600483016000613b5d565b602001515b6001600160d01b031690506040518060c001604052806110ce896110c98860010154613ad6565b613bcd565b81526020016110e0600487018a613c1d565b1515815260200184600001518152602001828152602001846040015181526020018460600151151581525094505050505092915050565b61112082610f41565b6111298161358e565b6111338383613c29565b50505050565b600080516020615eca8339815191526111518161358e565b81516000908152601360209081526040808320828601518452600e909252909120600101546001600160a01b031661119c576040516306358e4f60e11b815260040160405180910390fd5b43816001015411806111ad57508054155b156111cb5760405163756b785760e01b815260040160405180910390fd5b6040838101805160208087018051600090815260068701835285902060020192909255905186519251935193845292600080516020615e8a83398151915291015b60405180910390a3505050565b6112216135e6565b6001600160a01b0316816001600160a01b0316146112525760405163334bd91960e11b815260040160405180910390fd5b61125c8282613cd2565b505050565b600061126b613d68565b805490915060ff600160401b82041615906001600160401b03166000811580156112925750825b90506000826001600160401b031660011480156112ae5750303b155b9050811580156112bc575080155b156112da5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561130357845460ff60401b1916600160401b1785555b61130b613d8c565b611313613d8c565b61131b613d94565b611323613da4565b61132b613d8c565b662386f26fc100008660a001511080611350575068056bc75e2d631000008660c00151115b8061136257508560c001518660a00151115b80611374575085604001518660600151115b8061138657508560e001518660800151115b8061139957508561012001518660e00151115b806113ad5750856101000151866101200151115b156113cb57604051633494a40d60e21b815260040160405180910390fd5b8551600080546001600160a01b0319166001600160a01b0390921691909117905560408601516001556060860151600255608086015160035560a086015160045560c086015160195560e086015160055561010086015160065561012086015160075561014086015161144090600890613db4565b50506114526009876101600151613db4565b50506101a0860151600b556101c0860151600c556101e0860151600a556000805260136020526101808601517f8fa6efc3be94b5b348b21fea823fe8d100408cee9b7f90524494500445d8ff6c906114b6906114b090600290615aad565b43613853565b81556101808701516114ca90600190615aad565b60018083019190915560038201805460ff191690911790556114fb600080516020615eea8339815191526000613de0565b611521600080516020615eca833981519152600080516020615eea833981519152613de0565b6115326000801b8860200151613c29565b5061154f600080516020615eea8339815191528860200151613c29565b5061156c600080516020615eca8339815191528860200151613c29565b505083156115b457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600080516020615eea8339815191526115d48161358e565b610de5613e40565b6115e46150aa565b6001600160a01b0382166000908152600f6020526040902054610da490612c57565b6000610e8c600961359f565b600080600c5484846116249190615aad565b61162e9190615ad6565b9050606461163b82613e9d565b6116459087615af8565b61164f9190615ad6565b9150505b9392505050565b6116626140f1565b61166b82614196565b610f3082826141a1565b600061167f614255565b50600080516020615eaa83398151915290565b600061169c611a85565b6001600160a01b0316826001600160a01b0316149050919050565b6000806116c261429e565b5460ff1692915050565b6001600160a01b03821660009081526016602052604081206116539083613582565b60006116f98161358e565b600a8290556040518281527f2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb90602001610e74565b6000610db66010613acc565b60606000611749600254611ae2565b90506000805b825181101561178e5761177a83828151811061176d5761176d615ac0565b60200260200101516142c2565b6117849083615b0f565b915060010161174f565b508151600090156117be576117bb83600185516117ab9190615aad565b8151811061176d5761176d615ac0565b90505b600085516001600160401b038111156117d9576117d9615258565b60405190808252806020026020018201604052801561182e57816020015b61181b60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816117f75790505b5090506000805b87518110156119b157849150600088828151811061185557611855615ac0565b60200260200101519050611873816010613c1d90919063ffffffff16565b6118b75760405180606001604052808281526020016000815260200160008152508483815181106118a6576118a6615ac0565b6020026020010181905250506119a9565b60006118c2826142c2565b9050858110156118e3576118d68187615b0f565b6118e09085615aad565b93505b6000828152600e602052604081206118fd9060040161359f565b6001600160d01b03169050600085600a54846119199190615af8565b6119239190615ad6565b90506000836119328385615af8565b61193c9190615ad6565b90506000600b54600c548361016d6119549190615af8565b61195e9190615af8565b6119689190615ad6565b905060405180606001604052808781526020018281526020018381525089888151811061199757611997615ac0565b60200260200101819052505050505050505b600101611835565b50909695505050505050565b6001600160a01b0381166000908152601660205260409020606090610da4906130bf565b6119e96130f2565b6119f16130cc565b6119fa43613128565b611a02613571565b565b600080516020615eea833981519152611a1c8161358e565b662386f26fc10000821080611a32575060195482115b15611a5057604051633494a40d60e21b815260040160405180910390fd5b60048290556040518281527fcf130ebf0154d300b5d8c2c20f243f2e34a4dbbd54ddd70492f35f89f5c72e0090602001610e74565b6000546001600160a01b031690565b600080516020615eea833981519152611aac8161358e565b610de561430f565b6000601254600003611ac857506000919050565b610da4826001601254611adb9190615aad565b6000614357565b60606000611af060106130bf565b8051909150611aff8482613853565b93506000846001600160401b03811115611b1b57611b1b615258565b604051908082528060200260200182016040528015611b44578160200160208202803683370190505b50905084600003611b5757949350505050565b6000856001600160401b03811115611b7157611b71615258565b604051908082528060200260200182016040528015611b9a578160200160208202803683370190505b50905060005b83811015611d56576000858281518110611bbc57611bbc615ac0565b602002602001015190506000611bd1826142c2565b90508860005b8a811015611c5657858181518110611bf157611bf1615ac0565b6020026020010151831180611c415750858181518110611c1357611c13615ac0565b602002602001015183148015611c415750868181518110611c3657611c36615ac0565b602002602001015184105b15611c4e57809150611c56565b600101611bd7565b5089811015611d4b576000611c6c60018c615aad565b90505b81811115611d0b5786611c83600183615aad565b81518110611c9357611c93615ac0565b6020026020010151878281518110611cad57611cad615ac0565b602090810291909101015285611cc4600183615aad565b81518110611cd457611cd4615ac0565b6020026020010151868281518110611cee57611cee615ac0565b602090810291909101015280611d0381615b22565b915050611c6f565b5082868281518110611d1f57611d1f615ac0565b60200260200101818152505081858281518110611d3e57611d3e615ac0565b6020026020010181815250505b505050600101611ba0565b509095945050505050565b600080516020615eea833981519152611d798161358e565b816003541180611d8a575060075482115b15611da857604051633494a40d60e21b815260040160405180910390fd5b60058290556040518281527ff2a6752ea06dfdf93ef2d0ac5db269e4d58636cd56f160ed0c96e0a0a272362a90602001610e74565b600080611de8613922565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b600080516020615eea833981519152611e2b8161358e565b600154821115611e4e57604051633494a40d60e21b815260040160405180910390fd5b60028290556040518281527f8c3ee37d01ee5f42c88d7ff11c34795aa06e1e65f21e3813d00e101f3c3d614f90602001610e74565b60606000611e8f6135e6565b6001600160a01b0316336001600160a01b031614611efa57600036611eb5601482615aad565b611ec0928290615b39565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f0a92505050565b6040805160008152602081019091525b9050826001600160401b03811115611f2457611f24615258565b604051908082528060200260200182016040528015611f5757816020015b6060815260200190600190039081611f425790505b50915060005b83811015611fd957611fb430868684818110611f7b57611f7b615ac0565b9050602002810190611f8d9190615b63565b85604051602001611fa093929190615ba9565b604051602081830303815290604052614588565b838281518110611fc657611fc6615ac0565b6020908102919091010152600101611f5d565b505092915050565b611fe96130cc565b611ff16130f2565b80611ffa6135e6565b6000828152600e60205260409020600201546001600160a01b0390811691161461203757604051633387d70760e01b815260040160405180910390fd5b61204043613128565b6000828152600e602052604090206001600982015460ff1660048111156120695761206961558c565b1415801561209057506002600982015460ff16600481111561208d5761208d61558c565b14155b80156120b557506003600982015460ff1660048111156120b2576120b261558c565b14155b156120d357604051636e1ed6c560e11b815260040160405180910390fd5b60098101805460ff191660041790556120ed6010846145f5565b5060405183907fc3f4c6824ace066416e91f60e8762e0257019e0eb2e83afa4cdf62d23991e73990600090a25050610de5613571565b600080516020615eea83398151915261213b8161358e565b81600554118061214c575060065482115b1561216a57604051633494a40d60e21b815260040160405180910390fd5b600782905560005b61217c6010613acc565b8110156121d7576000612190601083613582565b6000818152600e60205260409020909150846121ab836142c2565b10156121cd5760098101805460ff191660011790556121cb6010836145f5565b505b5050600101612172565b506040518281527f5486872ddb5ca216cd9cb1f6e2e232e468aa32e312fbccba2ffb5edc831cfb2c90602001610e74565b61223c6040518060a00160405280600081526020016000815260200160008152602001600015158152602001606081525090565b6040805160a08101825260008481526013602081815284832080548552600181015482860152600281015495850195909552600385015460ff1615156060850152918690529052906080820190612295906004016130bf565b905292915050565b600080516020615eea8339815191526122b58161358e565b8160075411156122d857604051633494a40d60e21b815260040160405180910390fd5b600682905560005b6122ea6010613acc565b8110156123395760006122fe601083613582565b6000818152600e6020526040902090915084612319836142c2565b101561232f5760098101805460ff191660031790555b50506001016122e0565b506040518281527f97eca98512abc502b3bb1ef19702bf7eb53a988b87fd250138fbbfd1b62782c990602001610e74565b60006123758161358e565b600b8290556040518281527f3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f5890602001610e74565b6123b382610f41565b6123bc8161358e565b6111338383613cd2565b6124196040518061010001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b50600081815260186020908152604080832081516101008101835294855280546001600160a01b03168584015260018101548583018190526002820154606087015260038201546080870152600482015460a0870152600582015460ff16151560c08701528452600e80845282852060069092015485520190915290205460e082015290565b600080516020615eea8339815191526124b78161358e565b6005548211156124da57604051633494a40d60e21b815260040160405180910390fd5b60038290556040518281527f8448c02797b448f4946bc25b3bf925e5556d1df822c944da701c54bab8a3162f90602001610e74565b6125176130f2565b61251f6130cc565b61252843613128565b60125460000361254b576040516312d37ee560e31b815260040160405180910390fd5b60005b8151811015610fb85761258882828151811061256c5761256c615ac0565b602002602001015160016012546125839190615aad565b613869565b60010161254e565b6125986130cc565b6125a06130f2565b816125a96135e6565b6000828152600e60205260409020600201546001600160a01b039081169116146125e657604051633387d70760e01b815260040160405180910390fd5b6125ef43613128565b6000612601604084016020850161551f565b6001600160a01b0316148061262e57506000612623606084016040850161551f565b6001600160a01b0316145b1561264c5760405163e6c4247b60e01b815260040160405180910390fd5b6004548260600135108061266557506019548260600135115b156126835760405163d1be20e560e01b815260040160405180910390fd5b6000838152600e60209081526040909120906126a19084018461551f565b60018201546001600160a01b039081169116146126d15760405163793a3a3d60e11b815260040160405180910390fd5b6126e1604084016020850161551f565b6002820180546001600160a01b0319166001600160a01b0392909216919091179055612713606084016040850161551f565b6003820180546001600160a01b0319166001600160a01b039290921691909117905560608301356127466004830161359f565b6001600160d01b03161461276857612765816004018460600135613db4565b50505b6127756080840184615b63565b6005830191612785919083615c4c565b5061279360a0840184615b63565b60068301916127a3919083615c4c565b506127b160c0840184615b63565b60078301916127c1919083615c4c565b506127cf60e0840184615b63565b60088301916127df919083615c4c565b5083600f60006127f2602087018761551f565b6001600160a01b031681526020808201929092526040016000209190915561281c9084018461551f565b6001600160a01b0316847fdfb704f30cb8b5a69562201718d3bdfd1299983f120f8ff3932b295bfa15aede612857604087016020880161551f565b612867606088016040890161551f565b606088013561287960808a018a615b63565b61288660a08c018c615b63565b61289360c08e018e615b63565b8e8060e001906128a39190615b63565b6040516128ba9b9a99989796959493929190615d34565b60405180910390a35050610f30613571565b600080516020615eea8339815191526128e48161358e565b81600254111561290757604051633494a40d60e21b815260040160405180910390fd5b60018290556040518281527f4396ad8283225f2aee81ccc849dced59dc271fe85e61179ea6a74c854d628b7190602001610e74565b6129446130f2565b61294c6130cc565b61295543613128565b60005b8151811015610fb85761298b61296c6135e6565b83838151811061297e5761297e615ac0565b6020026020010151614601565b600101612958565b600080516020615eea8339815191526129ab8161358e565b6129b6600883613db4565b50506040518281527f5f77bf3bb8edc470b5034e85a2d7123e6578eec3b9705c24d40d2e984d4f2a7690602001610e74565b600080516020615eca833981519152612a008161358e565b60005b825181101561125c57600060136000858481518110612a2457612a24615ac0565b602002602001015160000151815260200190815260200160002090506000816006016000868581518110612a5a57612a5a615ac0565b6020026020010151602001518152602001908152602001600020905060006001600160a01b0316600e6000878681518110612a9757612a97615ac0565b6020908102919091018101518101518252810191909152604001600020600101546001600160a01b031603612adf576040516306358e4f60e11b815260040160405180910390fd5b4382600101541180612af057508154155b15612b0e5760405163756b785760e01b815260040160405180910390fd5b600281015415612b3157604051634d40249960e01b815260040160405180910390fd5b848381518110612b4357612b43615ac0565b6020026020010151604001518160020181905550848381518110612b6957612b69615ac0565b602002602001015160200151858481518110612b8757612b87615ac0565b602002602001015160000151600080516020615e8a833981519152878681518110612bb457612bb4615ac0565b602002602001015160400151604051612bcf91815260200190565b60405180910390a35050600101612a03565b6001600160a01b0381166000908152601660205260408120610da490613acc565b600080516020615eea833981519152612c1a8161358e565b612c25600983613db4565b50506040518281527f4a675b4074075265c6da90abb559f75ec801d6e403d0dd6dde4bb38631929ede90602001610e74565b612c5f6150aa565b6000828152600e602090815260408083206012548452601390925282208054600a8301549293919211612cab57612ca6612c9c8360000154613ad6565b6004850190613b12565b612cbe565b612cb9600484016000613b5d565b602001515b6001600160d01b03169050600083600d01546001600160401b03811115612ce757612ce7615258565b604051908082528060200260200182016040528015612d10578160200160208202803683370190505b50905060015b84600d01548111612d6b576000818152600e8601602052604090205482612d3e600184615aad565b81518110612d4e57612d4e615ac0565b602090810291909101015280612d6381615db7565b915050612d16565b50604080516101c0810182528554815260018601546001600160a01b03908116602083015260028701548116928201929092526003860154909116606082015260808101612dbb6004870161359f565b6001600160d01b03168152602001838152602001856005018054612dde90615bd0565b80601f0160208091040260200160405190810160405280929190818152602001828054612e0a90615bd0565b8015612e575780601f10612e2c57610100808354040283529160200191612e57565b820191906000526020600020905b815481529060010190602001808311612e3a57829003601f168201915b50505050508152602001856006018054612e7090615bd0565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9c90615bd0565b8015612ee95780601f10612ebe57610100808354040283529160200191612ee9565b820191906000526020600020905b815481529060010190602001808311612ecc57829003601f168201915b50505050508152602001856007018054612f0290615bd0565b80601f0160208091040260200160405190810160405280929190818152602001828054612f2e90615bd0565b8015612f7b5780601f10612f5057610100808354040283529160200191612f7b565b820191906000526020600020905b815481529060010190602001808311612f5e57829003601f168201915b50505050508152602001856008018054612f9490615bd0565b80601f0160208091040260200160405190810160405280929190818152602001828054612fc090615bd0565b801561300d5780601f10612fe25761010080835404028352916020019161300d565b820191906000526020600020905b815481529060010190602001808311612ff057829003601f168201915b5050509183525050600986015460209091019060ff1660048111156130345761303461558c565b815260200185600a0154815260200161304c886142c2565b81526020019190915295945050505050565b6130666130f2565b61306e6130cc565b610ddd43821061307e5743613128565b81613128565b600080516020615eea83398151915261309c8161358e565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060600061165383614773565b6130d46116b7565b15611a025760405163d93c066560e01b815260040160405180910390fd5b60006130fc6147cf565b80549091506001190161312257604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60125460009081526013602052604090206001810154431015613149575050565b8181600101541015610f305760038101805460ff19166001179055601254613170906147f3565b60006013600060126000815461318590615db7565b91905081905581526020019081526020016000209050816001015460016131ac9190615b0f565b808255600b546001916131bf9190615b0f565b6131c99190615aad565b6001820155600a5460028201556012546040519081527f0129593a287c7be892e56181ff1238eb466a2c952dc53a3029140d1f3ddc4a8d9060200160405180910390a19050613149565b6000613225604083016020840161551f565b6001600160a01b0316148061325257506000613247606083016040840161551f565b6001600160a01b0316145b156132705760405163e6c4247b60e01b815260040160405180910390fd5b600f6000613281602084018461551f565b6001600160a01b03168152602081019190915260400160002054156132b957604051636e1ed6c560e11b815260040160405180910390fd5b600454816060013510806132d257506019548160600135115b156132f05760405163d1be20e560e01b815260040160405180910390fd5b60055434101561331357604051630103be3b60e21b815260040160405180910390fd5b6000600d6000815461332490615db7565b91829055506000818152600e6020908152604090912082815591925061334c9084018461551f565b6001820180546001600160a01b0319166001600160a01b039290921691909117905561337e604084016020850161551f565b6002820180546001600160a01b0319166001600160a01b03929092169190911790556133b0606084016040850161551f565b6003820180546001600160a01b0319166001600160a01b03929092169190911790556133e3600482016060850135613db4565b506133f390506080840184615b63565b6005830191613403919083615c4c565b5061341160a0840184615b63565b6006830191613421919083615c4c565b5061342f60c0840184615b63565b600783019161343f919083615c4c565b5061344d60e0840184615b63565b600883019161345d919083615c4c565b5060098101805460ff1916600117905543600a82015581600f6000613485602087018761551f565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506134c68360200160208101906134bf919061551f565b83346135f0565b6134d3602084018461551f565b6001600160a01b0316827fb7474aa65f72ae77dbf02c6bd0a0d85749e7101f97fc94d524af373e832dc06a61350e604087016020880161551f565b61351e606088016040890161551f565b606088013561353060808a018a615b63565b61353d60a08c018c615b63565b61354a60c08e018e615b63565b8e8060e0019061355a9190615b63565b60405161120c9b9a99989796959493929190615d34565b600061357b6147cf565b6001905550565b60006116538383614a42565b610de58161359a6135e6565b614a6c565b805460009080156135dd576135c7836135b9600184615aad565b600091825260209091200190565b54600160301b90046001600160d01b0316611653565b60009392505050565b6000610db6614aa5565b6001600160a01b0383166136175760405163e6c4247b60e01b815260040160405180910390fd5b60035481101561363a57604051630103be3b60e21b815260040160405180910390fd5b6000828152600e602052604090206001600982015460ff1660048111156136635761366361558c565b1415801561368a57506002600982015460ff1660048111156136875761368761558c565b14155b80156136af57506003600982015460ff1660048111156136ac576136ac61558c565b14155b156136cd57604051636e1ed6c560e11b815260040160405180910390fd5b6000601860006017600081546136e290615db7565b91829055508152602080820192909252604090810160009081206002810187905543600382015580546001600160a01b0319166001600160a01b038a16908117825560018201899055600d8701546006830155825260169093522090915061374a8186614af7565b50613756601487614b03565b5061376483600b0185614b18565b5060029050600984015460ff1660048111156137825761378261558c565b1415801561379a5750600654613797866142c2565b10155b80156137b057506001546137ae6010613acc565b105b156137fc576137c0601086614af7565b5060098301805460ff1916600217905560405185907fa22b756fb9961f15b7c68b1e8ee6629486ce6d13d0b3b006d1f2381fe491787e90600090a25b84866001600160a01b03167ff234bd1a05f5a6f0b6af3f0c8bacad613635f0022e2ec2162717ef21a1591d6a60175487604051613843929190918252602082015260400190565b60405180910390a3505050505050565b60008183106138625781611653565b5090919050565b600061387783836001614357565b90508060000361389a576040516312d37ee560e31b815260040160405180910390fd5b600083815260186020526040808220805491519092916001600160a01b03169084908381818185875af1925050503d80600081146138f4576040519150601f19603f3d011682016040523d82523d6000602084013e6138f9565b606091505b505090508061391b576040516312171d8360e31b815260040160405180910390fd5b5050505050565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b600081815260186020526040902080546001600160a01b038481169116146139815760405163335e79fb60e21b815260040160405180910390fd5b6004810154156139a457604051638ccbf9a560e01b815260040160405180910390fd5b60018101546000908152600e6020526040902060028201546139ca90600c830190614b18565b505043600483015560018201546000906139e3906142c2565b905060075481108015613a3057506003600983015460ff166004811115613a0c57613a0c61558c565b1480613a3057506002600983015460ff166004811115613a2e57613a2e61558c565b145b15613a5c5760098201805460ff19166001908117909155830154613a56906010906145f5565b50613a9a565b60065481108015613a8557506002600983015460ff166004811115613a8357613a8361558c565b145b15613a9a5760098201805460ff191660031790555b60405184907fc46bc112bb28b616434d6e89582a82bdc7cf9ef52a0b1228d20f5e5ccca7ec4690600090a25050505050565b6000610da4825490565b600065ffffffffffff821115613b0e576040516306dfcc6560e41b815260306004820152602481018390526044015b60405180910390fd5b5090565b815460009081613b2485858385614b43565b90508015613b5157613b3b856135b9600184615aad565b54600160301b90046001600160d01b0316613b54565b60005b95945050505050565b6040805180820190915260008082526020820152826000018263ffffffff1681548110613b8c57613b8c615ac0565b60009182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b6000828152600e60205260408120613be890600c0183613b12565b6000848152600e60205260409020613c0390600b0184613b12565b613c0d9190615dd0565b6001600160d01b03169392505050565b60006116538383614ba5565b600080613c34613922565b9050613c408484611ddd565b613cc1576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055613c776135e6565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610da4565b6000915050610da4565b5092915050565b600080613cdd613922565b9050613ce98484611ddd565b15613cc1576000848152602082815260408083206001600160a01b03871684529091529020805460ff19169055613d1e6135e6565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050610da4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611a02614bbd565b613d9c614bbd565b611a02614be2565b613dac614bbd565b611a02614bea565b600080613dd4613dc343613ad6565b613dcc85614c07565b869190614c3b565b915091505b9250929050565b6000613dea613922565b90506000613df784610f41565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b613e48614c56565b6000613e5261429e565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613e856135e6565b604051613e929190615222565b60405180910390a150565b600060408210613eb0575061012c919050565b60408051610800810182526064815260666020820152606981830152606b6060820152606e6080820152607060a0820152607260c080830191909152607560e08301526077610100830152607961012080840191909152607c610140840152607e610160840152608161018084015260836101a084015260856101c084015260886101e0840152608a610200840152608c610220840152608f6102408401526091610260840152609461028084015260966102a0840152609c6102c084015260a26102e084015260a861030084015260ae61032084015260b461034084015260ba61036084015261038083019190915260c66103a083015260cc6103c083015260d26103e083015260d761040083015260dd61042083015260e361044083015260e961046083015260ef61048083015260f56104a083015260fb6104c08301526101016104e083015261010761050083015261010d6105208301526101136105408301526101146105608301526101156105808301526101176105a08301526101186105c08301526101196105e083015261011a61060083015261011b61062083015261011d61064083015261011e61066083015261011f6106808301526106a08201526101216106c08201526101226106e082015261012461070082015261012561072082015261012661074082015261012761076082015261012861078082015261012a6107a082015261012b6107c082015261012c6107e0820152908190849081106140e1576140e1615ac0565b602002015161ffff169392505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061417857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661416c600080516020615eaa833981519152546001600160a01b031690565b6001600160a01b031614155b15611a025760405163703e46dd60e11b815260040160405180910390fd5b6000610f308161358e565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156141fb575060408051601f3d908101601f191682019092526141f891810190615df0565b60015b61421a5781604051634c9c8ce360e01b8152600401613b059190615222565b600080516020615eaa833981519152811461424b57604051632a87526960e21b815260048101829052602401613b05565b61125c8383614c7b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a025760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b6000818152600e602052604081206142dc90600c0161359f565b6000838152600e602052604090206142f690600b0161359f565b6143009190615dd0565b6001600160d01b031692915050565b6143176130cc565b600061432161429e565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613e856135e6565b60008381526018602090815260408083206001808201548552600e9093529083206006820154919290918491829161438e91615b0f565b6000818152600e850160205260408120549192506143aa611606565b90505b6000821180156143bd5750888211155b1561457a57600082815260136020908152604080832060018a01548452600681019092529091208315806143f357506002810154155b80614414575060008860040154118015614414575087600401548260010154115b1561442057505061457a565b600061443989600201548a600301548560010154611612565b9050600082600201548268056bc75e2d63100000856001015486600001546144619190615af8565b61446b9190615ad6565b6144759190615af8565b61447f9190615ad6565b90506000600c548560010154436144969190615aad565b6144a09190615ad6565b6144ab906001615b0f565b90506000861180156144bc57508581105b156144dd57856144cc8284615af8565b6144d69190615ad6565b91506144eb565b8c156144eb5760068b018890555b600087815260078c016020526040902054821161450c57505050505061457a565b600087815260078c0160205260409020546145279083615aad565b614531908a615b0f565b98508c1561454d57600087815260078c01602052604090208290555b600e8a01600061455c8a615db7565b995089815260200190815260200160002054965050505050506143ad565b509198975050505050505050565b6060600080846001600160a01b0316846040516145a59190615e09565b600060405180830381855af49150503d80600081146145e0576040519150601f19603f3d011682016040523d82523d6000602084013e6145e5565b606091505b5091509150613b54858383614cd1565b60006116538383614d24565b600081815260186020526040902080546001600160a01b0384811691161461463c5760405163335e79fb60e21b815260040160405180910390fd5b600581015460ff16156146625760405163190507cd60e21b815260040160405180910390fd5b8060040154600003614687576040516372728c7960e11b815260040160405180910390fd5b43614690610e80565b826004015461469f9190615b0f565b11156146be57604051630fae9a4560e41b815260040160405180910390fd5b60058101805460ff1916600117905560028101546040516000916001600160a01b038616918381818185875af1925050503d806000811461471b576040519150601f19603f3d011682016040523d82523d6000602084013e614720565b606091505b5050905080614742576040516312171d8360e31b815260040160405180910390fd5b60405183907fa78b9f12a7da0df7ced737c5f83d0c05723bb5f43aab37e233b862710414847290600090a250505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156147c357602002820191906000526020600020905b8154815260200190600101908083116147af575b50505050509050919050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b806000036147fe5750565b600081815260136020526040812060025490919061481b90611ae2565b90506000808080805b85518510156148595761484286868151811061176d5761176d615ac0565b61484c9085615b0f565b6001909501949350614824565b600094505b8551851015614a385785858151811061487957614879615ac0565b602002602001015192506148998388600401614af790919063ffffffff16565b50600e600084815260200190815260200160002090508781600e01600083600d01600081546148c790615db7565b9190508190558152602001908152602001600020819055508660060160008481526020019081526020016000209150866000015481600a0154111561492b57614914600482016000613b5d565b602001516001600160d01b03166001830155614954565b61494561493b8860000154613ad6565b6004830190613b12565b6001600160d01b031660018301555b838760020154614963856142c2565b61496d9190615af8565b6149779190615ad6565b8255600182015468056bc75e2d631000001115614a2d57600381015460018301546000916001600160a01b03169068056bc75e2d63100000906149ba9082615aad565b85546149c69190615af8565b6149d09190615ad6565b604051600081818185875af1925050503d8060008114614a0c576040519150601f19603f3d011682016040523d82523d6000602084013e614a11565b606091505b505090508015614a2b5760038301805460ff191660011790555b505b60019094019361485e565b5050505050505050565b6000826000018281548110614a5957614a59615ac0565b9060005260206000200154905092915050565b614a768282611ddd565b610f305760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401613b05565b6000366014614ab333611692565b8015614abf5750808210155b15614aef57600036614ad18385615aad565b614adc928290615b39565b614ae591615e25565b60601c9250505090565b339250505090565b60006116538383614e0d565b6000611653836001600160a01b038416614e0d565b600080613dd4614b2743613ad6565b614b3085614c07565b614b398761359f565b613dcc9190615e53565b60005b81831015614b9d576000614b5a8484614e57565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff161115614b8957809250614b97565b614b94816001615b0f565b93505b50614b46565b509392505050565b60009081526001919091016020526040902054151590565b614bc5614e72565b611a0257604051631afcd79f60e31b815260040160405180910390fd5b613571614bbd565b614bf2614bbd565b6000614bfc61429e565b805460ff1916905550565b60006001600160d01b03821115613b0e576040516306dfcc6560e41b815260d0600482015260248101839052604401613b05565b600080614c49858585614e8c565b915091505b935093915050565b614c5e6116b7565b611a0257604051638dfc202b60e01b815260040160405180910390fd5b614c8482615006565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115614cc95761125c8282614588565b610f30615062565b606082614ce657614ce182615081565b611653565b8151158015614cfd57506001600160a01b0384163b155b15614d1d5783604051639996b31560e01b8152600401613b059190615222565b5080611653565b60008181526001830160205260408120548015613cc1576000614d48600183615aad565b8554909150600090614d5c90600190615aad565b9050808214614dc1576000866000018281548110614d7c57614d7c615ac0565b9060005260206000200154905080876000018481548110614d9f57614d9f615ac0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614dd257614dd2615e73565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610da4565b6000614e198383614ba5565b614e4f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610da4565b506000610da4565b6000614e666002848418615ad6565b61165390848416615b0f565b6000614e7c613d68565b54600160401b900460ff16919050565b825460009081908015614fab576000614eaa876135b9600185615aad565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b031660208401529192509087161015614efe57604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603614f4a5784614f21886135b9600186615aad565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055614f9b565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b602001519250839150614c4e9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b029190931617920191909155905081614c4e565b806001600160a01b03163b6000036150335780604051634c9c8ce360e01b8152600401613b059190615222565b600080516020615eaa83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b3415611a025760405163b398979f60e01b815260040160405180910390fd5b8051156150915780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806101c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081526020016000600481111561512a5761512a61558c565b81526020016000815260200160008152602001606081525090565b60006020828403121561515757600080fd5b81356001600160e01b03198116811461165357600080fd5b6020808252825182820181905260009190848201906040850190845b818110156119b15783518352928401929184019160010161518b565b600061010082840312156151ba57600080fd5b50919050565b6000602082840312156151d257600080fd5b81356001600160401b038111156151e857600080fd5b6151f4848285016151a7565b949350505050565b60006020828403121561520e57600080fd5b5035919050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6000806040838503121561524957600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b038111828210171561529157615291615258565b60405290565b604051601f8201601f191681016001600160401b03811182821017156152bf576152bf615258565b604052919050565b60006001600160401b038211156152e0576152e0615258565b5060051b60200190565b600060208083850312156152fd57600080fd5b82356001600160401b0381111561531357600080fd5b8301601f8101851361532457600080fd5b8035615337615332826152c7565b615297565b81815260059190911b8201830190838101908783111561535657600080fd5b928401925b828410156153745783358252928401929084019061535b565b979650505050505050565b6001600160a01b0381168114610de557600080fd5b803561539f8161537f565b919050565b600080604083850312156153b757600080fd5b8235915060208301356153c98161537f565b809150509250929050565b6000606082840312156153e657600080fd5b604051606081016001600160401b038111828210171561540857615408615258565b80604052508091508235815260208301356020820152604083013560408201525092915050565b60006060828403121561544157600080fd5b61165383836153d4565b6000610200828403121561545e57600080fd5b61546661526e565b61546f83615394565b815261547d60208401615394565b602082015260408381013590820152606080840135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135908201526101c080840135908201526101e0928301359281019290925250919050565b60006020828403121561553157600080fd5b81356116538161537f565b60005b8381101561555757818101518382015260200161553f565b50506000910152565b6000815180845261557881602086016020860161553c565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600581106155c057634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452602080850194506020840160005b838110156155f5578151875295820195908201906001016155d9565b509495945050505050565b60208152815160208201526000602083015161561f6040840182615215565b5060408301516156326060840182615215565b5060608301516156456080840182615215565b50608083015160a083015260a083015160c083015260c08301516101c08060e08501526156766101e0850183615560565b915060e0850151601f196101008187860301818801526156968584615560565b9450808801519250506101208187860301818801526156b58584615560565b9450808801519250506101408187860301818801526156d48584615560565b9450808801519250506101606156ec818801846155a2565b870151610180878101919091528701516101a08088019190915287015186850390910183870152905061571f83826155c4565b9695505050505050565b60008060006060848603121561573e57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561576857600080fd5b82356157738161537f565b91506020838101356001600160401b038082111561579057600080fd5b818601915086601f8301126157a457600080fd5b8135818111156157b6576157b6615258565b6157c8601f8201601f19168501615297565b915080825287848285010111156157de57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561580f57600080fd5b823561581a8161537f565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156158745781518051855286810151878601528501518585015260609093019290850190600101615845565b5091979650505050505050565b6000806020838503121561589457600080fd5b82356001600160401b03808211156158ab57600080fd5b818501915085601f8301126158bf57600080fd5b8135818111156158ce57600080fd5b8660208260051b85010111156158e357600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b8281101561594c57603f1988860301845261593a858351615560565b9450928501929085019060010161591e565b5092979650505050505050565b6020815260006116536020830184615560565b602081528151602082015260208201516040820152604082015160608201526060820151151560808201526000608083015160a0808401526151f460c08401826155c4565b600080604083850312156159c457600080fd5b8235915060208301356001600160401b038111156159e157600080fd5b6159ed858286016151a7565b9150509250929050565b60006020808385031215615a0a57600080fd5b82356001600160401b03811115615a2057600080fd5b8301601f81018513615a3157600080fd5b8035615a3f615332826152c7565b808282526020820191506060602060608502860101935088841115615a6357600080fd5b6020850194505b83851015615a8b57615a7c89866153d4565b83529384019391850191615a6a565b50979650505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610da457610da4615a97565b634e487b7160e01b600052603260045260246000fd5b600082615af357634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610da457610da4615a97565b80820180821115610da457610da4615a97565b600081615b3157615b31615a97565b506000190190565b60008085851115615b4957600080fd5b83861115615b5657600080fd5b5050820193919092039150565b6000808335601e19843603018112615b7a57600080fd5b8301803591506001600160401b03821115615b9457600080fd5b602001915036819003821315613dd957600080fd5b828482376000838201600081528351615bc681836020880161553c565b0195945050505050565b600181811c90821680615be457607f821691505b6020821081036151ba57634e487b7160e01b600052602260045260246000fd5b601f82111561125c576000816000526020600020601f850160051c81016020861015615c2d5750805b601f850160051c820191505b818110156115b457828155600101615c39565b6001600160401b03831115615c6357615c63615258565b615c7783615c718354615bd0565b83615c04565b6000601f841160018114615cab5760008515615c935750838201355b600019600387901b1c1916600186901b17835561391b565b600083815260209020601f19861690835b82811015615cdc5786850135825560209485019460019092019101615cbc565b5086821015615cf95760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038c811682528b166020820152604081018a905260e060608201819052600090615d689083018a8c615d0b565b8281036080840152615d7b81898b615d0b565b905082810360a0840152615d90818789615d0b565b905082810360c0840152615da5818587615d0b565b9e9d5050505050505050505050505050565b600060018201615dc957615dc9615a97565b5060010190565b6001600160d01b03828116828216039080821115613ccb57613ccb615a97565b600060208284031215615e0257600080fd5b5051919050565b60008251615e1b81846020870161553c565b9190910192915050565b6001600160601b03198135818116916014851015611fd95760149490940360031b84901b1690921692915050565b6001600160d01b03818116838216019080821115613ccb57613ccb615a97565b634e487b7160e01b600052603160045260246000fdfe948d378fa4c68569d2ecf922375e8845e879b43a1b882cc2b3aece8b76982f84360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220423185adb2adfa3a69358fd7f84d01744bee69c51f7963014192abc572ce20b764736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "CheckpointUnorderedInsertion()": [
        {
          "details": "A value was attempted to be inserted on a past checkpoint."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "calculateStakeClaimableAmount(uint256)": {
        "details": "Takes into account stake duration, score, and reward distributionThis method is not marked as view because is using a method that modifies state to call it as a view, please using static call"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deregisterDlp(uint256)": {
        "details": "Only owner can deregister, must be in valid status"
      },
      "estimatedDlpRewardPercentages(uint256[])": {
        "details": "Calculates based on stake amounts and current epoch parameters"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "topDlpIds(uint256)": {
        "details": "Uses insertion sort to maintain ordered list"
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "updateDlp(uint256,(address,address,address,uint256,string,string,string,string))": {
        "details": "Only DLP owner can update"
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateStakeClaimableAmount(uint256)": {
        "notice": "Calculates claimable rewards for a stake"
      },
      "calculateStakeScore(uint256,uint256,uint256)": {
        "notice": "Calculates stake score based on amount and duration"
      },
      "claimStakeRewardUntilEpoch(uint256,uint256)": {
        "notice": "Claims rewards for a stake up to specified epoch"
      },
      "claimStakesReward(uint256[])": {
        "notice": "Claims rewards for multiple stakes"
      },
      "closeStakes(uint256[])": {
        "notice": "Closes multiple stakes"
      },
      "createEpochs()": {
        "notice": "Creates epochs up to current block"
      },
      "createEpochsUntilBlockNumber(uint256)": {
        "notice": "Creates epochs up to specified block"
      },
      "createStake(uint256)": {
        "notice": "Creates a new stake for a DLP"
      },
      "deregisterDlp(uint256)": {
        "notice": "Deregisters a DLP"
      },
      "dlps(uint256)": {
        "notice": "Gets DLP information including current stake and status"
      },
      "estimatedDlpRewardPercentages(uint256[])": {
        "notice": "Estimates reward percentages for given DLPs"
      },
      "overrideEpochDlpsTotalStakesScore((uint256,uint256,uint256))": {
        "notice": "Overrides stake scores for DLPs in past epochs"
      },
      "registerDlp((address,address,address,uint256,string,string,string,string))": {
        "notice": "Registers a new DLP with initial stake"
      },
      "saveEpochDlpsTotalStakesScore((uint256,uint256,uint256)[])": {
        "notice": "Updates stake scores for DLPs in past epochs"
      },
      "topDlpIds(uint256)": {
        "notice": "Gets top DLP IDs by stake amount"
      },
      "updateDlp(uint256,(address,address,address,uint256,string,string,string,string))": {
        "notice": "Updates DLP information"
      },
      "updateDlpEligibilityThreshold(uint256)": {
        "notice": "Updates eligibility threshold and adjusts DLP statuses"
      },
      "updateDlpSubEligibilityThreshold(uint256)": {
        "notice": "Updates sub-eligibility threshold and adjusts DLP statuses"
      },
      "withdrawStakes(uint256[])": {
        "notice": "Withdraws multiple closed stakes"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25088,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25091,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "eligibleDlpsLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 25094,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "epochDlpsLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25097,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 25100,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "minDlpStakersPercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 25103,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "minDlpRegistrationStake",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 25106,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpEligibilityThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 25109,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpSubEligibilityThreshold",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 25112,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_stakeWithdrawalDelayCheckpoints",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Trace208)9576_storage"
      },
      {
        "astId": 25115,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_rewardClaimDelayCheckpoints",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Trace208)9576_storage"
      },
      {
        "astId": 25118,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "epochRewardAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 25121,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "epochSize",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 25124,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "daySize",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 25127,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpsCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 25132,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_dlps",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Dlp)25215_storage)"
      },
      {
        "astId": 25137,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpIds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25140,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_eligibleDlpsList",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(UintSet)11097_storage"
      },
      {
        "astId": 25143,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "epochsCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 25148,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_epochs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(Epoch)25241_storage)"
      },
      {
        "astId": 25151,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_stakersList",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(AddressSet)10940_storage"
      },
      {
        "astId": 25156,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_stakers",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_struct(Staker)25264_storage)"
      },
      {
        "astId": 25159,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "stakesCount",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 25164,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_stakes",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(Stake)25260_storage)"
      },
      {
        "astId": 25167,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "maxDlpStakersPercentage",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Checkpoint208)9581_storage)dyn_storage": {
        "base": "t_struct(Checkpoint208)9581_storage",
        "encoding": "dynamic_array",
        "label": "struct Checkpoints.Checkpoint208[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(DlpStatus)25178": {
        "encoding": "inplace",
        "label": "enum IDLPRoot.DlpStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Staker)25264_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDLPRoot.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)25264_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Dlp)25215_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRoot.Dlp)",
        "numberOfBytes": "32",
        "value": "t_struct(Dlp)25215_storage"
      },
      "t_mapping(t_uint256,t_struct(Epoch)25241_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRoot.Epoch)",
        "numberOfBytes": "32",
        "value": "t_struct(Epoch)25241_storage"
      },
      "t_mapping(t_uint256,t_struct(EpochDlp)25224_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRoot.EpochDlp)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochDlp)25224_storage"
      },
      "t_mapping(t_uint256,t_struct(Stake)25260_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRoot.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)25260_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)10940_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 10939,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10625_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint208)9581_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Checkpoint208",
        "members": [
          {
            "astId": 9578,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9580,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_value",
            "offset": 6,
            "slot": "0",
            "type": "t_uint208"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Dlp)25215_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRoot.Dlp",
        "members": [
          {
            "astId": 25180,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25182,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 25184,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 25186,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 25189,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakersPercentageCheckpoints",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Trace208)9576_storage"
          },
          {
            "astId": 25191,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 25193,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "iconUrl",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 25195,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "website",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 25197,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "metadata",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 25200,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(DlpStatus)25178"
          },
          {
            "astId": 25202,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "registrationBlockNumber",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 25205,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakeAmountCheckpoints",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(Trace208)9576_storage"
          },
          {
            "astId": 25208,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "unstakeAmountCheckpoints",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Trace208)9576_storage"
          },
          {
            "astId": 25210,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "epochIdsCount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 25214,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "epochIds",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Epoch)25241_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRoot.Epoch",
        "members": [
          {
            "astId": 25226,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25228,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 25230,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 25232,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "isFinalised",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 25235,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpIds",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(UintSet)11097_storage"
          },
          {
            "astId": 25240,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlps",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(EpochDlp)25224_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(EpochDlp)25224_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRoot.EpochDlp",
        "members": [
          {
            "astId": 25217,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25219,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakersPercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 25221,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "totalStakesScore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 25223,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "rewardClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)10625_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10620,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10624,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)25260_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRoot.Stake",
        "members": [
          {
            "astId": 25243,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25245,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 25247,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 25249,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 25251,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 25253,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "withdrawn",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 25255,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "lastClaimedIndexEpochId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 25259,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "claimedAmounts",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Staker)25264_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRoot.Staker",
        "members": [
          {
            "astId": 25263,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpIds",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(UintSet)11097_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trace208)9576_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Trace208",
        "members": [
          {
            "astId": 9575,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_checkpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint208)9581_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)11097_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 11096,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10625_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}