{
  "address": "0x45869CeFA87bfEA07a6cB817687D6C64334c0032",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotRemoveRegistrationStake",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EntityNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EntityNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEntity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEntityOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "EntityStakeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinStake",
          "type": "uint256"
        }
      ],
      "name": "MinStakeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesIssued",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesBurned",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VANA_POOL_ENTITY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "activeStakersListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeStakersListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "activeStakersListValues",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "inactiveStakersListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inactiveStakersListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "inactiveStakersListValues",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialMinStake",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "registrationStake",
          "type": "uint256"
        }
      ],
      "name": "registerEntityStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareAmountMin",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "stakerEntities",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVanaPoolStaking.StakerEntity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vanaAmountMin",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinStake",
          "type": "uint256"
        }
      ],
      "name": "updateMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "updateTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVanaPoolEntityAddress",
          "type": "address"
        }
      ],
      "name": "updateVanaPoolEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVanaPoolTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "updateVanaPoolTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vanaPoolEntity",
      "outputs": [
        {
          "internalType": "contract IVanaPoolEntity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vanaPoolTreasury",
      "outputs": [
        {
          "internalType": "contract IVanaPoolTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x97dc8c995a2ab458b7ecb8f11ef837eb64b20ca61cef7715d41a99296cd81a70",
  "receipt": {
    "to": null,
    "from": "0x2AC93684679a5bdA03C6160def908CdB8D46792f",
    "contractAddress": "0x45869CeFA87bfEA07a6cB817687D6C64334c0032",
    "transactionIndex": 3,
    "gasUsed": "2328320",
    "logsBloom": "0x
    "blockHash": "0x29353acf68fce2fc58f938f6ec8aefe5ba958a0da42b34834893660804100906",
    "transactionHash": "0x97dc8c995a2ab458b7ecb8f11ef837eb64b20ca61cef7715d41a99296cd81a70",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 2639888,
        "transactionHash": "0x97dc8c995a2ab458b7ecb8f11ef837eb64b20ca61cef7715d41a99296cd81a70",
        "address": "0x45869CeFA87bfEA07a6cB817687D6C64334c0032",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x29353acf68fce2fc58f938f6ec8aefe5ba958a0da42b34834893660804100906"
      }
    ],
    "blockNumber": 2639888,
    "cumulativeGasUsed": "3745435",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "f5f8770f322809b5277da5e801e95845",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveRegistrationStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EntityNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EntityNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEntity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEntityOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"EntityStakeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"MinStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesIssued\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBurned\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VANA_POOL_ENTITY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"activeStakersListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStakersListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"activeStakersListValues\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"inactiveStakersListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inactiveStakersListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"inactiveStakersListValues\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialMinStake\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registrationStake\",\"type\":\"uint256\"}],\"name\":\"registerEntityStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareAmountMin\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"stakerEntities\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct IVanaPoolStaking.StakerEntity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vanaAmountMin\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"updateTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVanaPoolEntityAddress\",\"type\":\"address\"}],\"name\":\"updateVanaPoolEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVanaPoolTreasuryAddress\",\"type\":\"address\"}],\"name\":\"updateVanaPoolTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vanaPoolEntity\",\"outputs\":[{\"internalType\":\"contract IVanaPoolEntity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vanaPoolTreasury\",\"outputs\":[{\"internalType\":\"contract IVanaPoolTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"EntityStakeRegistered(uint256,address)\":{\"params\":{\"entityId\":\"ID of the entity\",\"ownerAddress\":\"address of the owner\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MinStakeUpdated(uint256)\":{\"params\":{\"newMinStake\":\"new minimum stake amount\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Staked(uint256,address,uint256,uint256)\":{\"params\":{\"amount\":\"amount staked\",\"entityId\":\"ID of the entity\",\"sharesIssued\":\"shares issued\",\"staker\":\"address of the staker\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Unstaked(uint256,address,uint256,uint256)\":{\"params\":{\"amount\":\"amount unstaked\",\"entityId\":\"ID of the entity\",\"sharesBurned\":\"shares burned\",\"staker\":\"address of the staker\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256)\":{\"params\":{\"initialMinStake\":\"initial minimum stake amount (in wei)\",\"ownerAddress\":\"address of the owner\",\"trustedForwarderAddress\":\"address of the trusted forwarder\"}},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registerEntityStake(uint256,address,uint256)\":{\"params\":{\"entityId\":\"ID of the entity\",\"ownerAddress\":\"Address of the entity owner\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"stake(uint256,address,uint256)\":{\"params\":{\"entityId\":\"ID of the entity to stake into\",\"recipient\":\"Address of the recipient who will receive the stake\",\"shareAmountMin\":\"Minimum amount of share to receive\"}},\"stakerEntities(address,uint256)\":{\"params\":{\"entityId\":\"ID of the entity\",\"staker\":\"address of the staker\"},\"returns\":{\"_0\":\"uint256                         shares owned by staker in the entity\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"unstake(uint256,uint256,uint256)\":{\"params\":{\"entityId\":\"ID of the entity to unstake from\",\"shareAmount\":\"shareAmount to unstake\",\"vanaAmountMin\":\"minimum amount of VANA to receive\"}},\"updateMinStakeAmount(uint256)\":{\"params\":{\"newMinStake\":\"new minimum stake amount in wei\"}},\"updateTrustedForwarder(address)\":{\"params\":{\"trustedForwarderAddress\":\"address of the trusted forwarder\"}},\"updateVanaPoolEntity(address)\":{\"params\":{\"newVanaPoolEntityAddress\":\"new VanaPoolEntity contract address\"}},\"updateVanaPoolTreasury(address)\":{\"params\":{\"newVanaPoolTreasuryAddress\":\"new VanaPoolTreasury contract address\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"EntityStakeRegistered(uint256,address)\":{\"notice\":\"Triggered when an entity stake is registered\"},\"MinStakeUpdated(uint256)\":{\"notice\":\"Triggered when minimum stake amount is updated\"},\"Staked(uint256,address,uint256,uint256)\":{\"notice\":\"Triggered when a user stakes VANA to an entity\"},\"Unstaked(uint256,address,uint256,uint256)\":{\"notice\":\"Triggered when a user unstakes VANA from an entity\"}},\"kind\":\"user\",\"methods\":{\"initialize(address,address,uint256)\":{\"notice\":\"Initialize the contract\"},\"registerEntityStake(uint256,address,uint256)\":{\"notice\":\"Register stake for a new entity (called by VanaPoolEntity contract)\"},\"stake(uint256,address,uint256)\":{\"notice\":\"Stake VANA into a specific entity and allocate it to a recipient\"},\"stakerEntities(address,uint256)\":{\"notice\":\"Returns staker info for a specific entity\"},\"unstake(uint256,uint256,uint256)\":{\"notice\":\"Unstake VANA from a specific entity\"},\"updateMinStakeAmount(uint256)\":{\"notice\":\"Updates the minimum stake amount\"},\"updateTrustedForwarder(address)\":{\"notice\":\"Update the trusted forwarder\"},\"updateVanaPoolEntity(address)\":{\"notice\":\"Update the VanaPoolEntity contract address\"},\"updateVanaPoolTreasury(address)\":{\"notice\":\"Update the VanaPoolTreasury contract\"},\"version()\":{\"notice\":\"Returns the version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol\":\"VanaPoolStakingImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *\\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\\n * function only accessible if `msg.data.length == 0`.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /**\\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\\n     * invoke functions on this contract on behalf of other accounts.\\n     *\\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder_) {\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any particular address is the trusted forwarder.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder();\\n    }\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0x14b59e8cd5720c9cd31616450874b462f575bb52b387df2a54dbd26f9a07adf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ContextUpgradeable} from \\\"./ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x1545b1796f0b94f811d95b8b208c0668dacfc7768247d22b63161a47c4c5ef4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/vanaPoolEntity/interfaces/IVanaPoolEntity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IVanaPoolStaking} from \\\"../../vanaPoolStaking/interfaces/IVanaPoolStaking.sol\\\";\\n\\ninterface IVanaPoolEntity {\\n    enum EntityStatus {\\n        None,\\n        Active,\\n        Removed\\n    }\\n\\n    struct Entity {\\n        address ownerAddress;\\n        EntityStatus status;\\n        string name;\\n        uint256 maxAPY; // Maximum APY for this entity (in basis points, 1% = 100)\\n        uint256 lockedRewardPool; // Locked rewards for this entity\\n        uint256 activeRewardPool; // Active rewards available for distribution\\n        uint256 totalShares; // Total shares for this entity\\n        uint256 lastUpdateTimestamp; // When rewards were last processed\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function vanaPoolStaking() external view returns (IVanaPoolStaking);\\n    function minRegistrationStake() external view returns (uint256);\\n    function maxAPYDefault() external view returns (uint256);\\n\\n    struct EntityInfo {\\n        uint256 entityId;\\n        address ownerAddress;\\n        EntityStatus status;\\n        string name;\\n        uint256 maxAPY;\\n        uint256 lockedRewardPool;\\n        uint256 activeRewardPool;\\n        uint256 totalShares;\\n        uint256 lastUpdateTimestamp;\\n    }\\n\\n    function entitiesCount() external view returns (uint256);\\n    function entities(uint256 entityId) external view returns (EntityInfo memory);\\n    function entityByName(string calldata entityName) external view returns (EntityInfo memory);\\n    function entityNameToId(string calldata entityName) external view returns (uint256);\\n\\n    function entityShareToVana(uint256 entityId) external view returns (uint256);\\n    function vanaToEntityShare(uint256 entityId) external view returns (uint256);\\n\\n    function pause() external;\\n    function unpause() external;\\n    function updateVanaPool(address vanaPoolStakingAddress) external;\\n    function updateMinRegistrationStake(uint256 newMinRegistrationStake) external;\\n\\n    struct EntityRegistrationInfo {\\n        address ownerAddress;\\n        string name;\\n    }\\n\\n    function createEntity(EntityRegistrationInfo calldata entityRegistrationInfo) external payable;\\n    function updateEntity(uint256 entityId, EntityRegistrationInfo calldata entityRegistrationInfo) external;\\n    //    function removeEntity(uint256 entityId) external;\\n\\n    // Entity reward management\\n    function addRewards(uint256 entityId) external payable;\\n    function processRewards(uint256 entityId) external;\\n    function updateEntityMaxAPY(uint256 entityId, uint256 newMaxAPY) external;\\n\\n    // Get entities\\n    function activeEntitiesValues() external view returns (uint256[] memory);\\n\\n    function updateEntityPool(uint256 entityId, uint256 shares, uint256 amount, bool isStake) external;\\n\\n    function calculateYield(uint256 apy, uint256 principal, uint256 time) external pure returns (uint256);\\n\\n    function calculateContinuousAPYByEntity(uint256 entityId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4fc0fafd4e3ad9ebccb5a0779f35bfdec15bdea3e08c41bd2bb48a50cf1d5fe3\",\"license\":\"MIT\"},\"contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/VanaPoolStakingStorageV1.sol\\\";\\n\\ncontract VanaPoolStakingImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    MulticallUpgradeable,\\n    ERC2771ContextUpgradeable,\\n    VanaPoolStakingStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    bytes32 public constant VANA_POOL_ENTITY_ROLE = keccak256(\\\"VANA_POOL_ENTITY_ROLE\\\");\\n\\n    /**\\n     * @notice Triggered when a user stakes VANA to an entity\\n     *\\n     * @param entityId                         ID of the entity\\n     * @param staker                           address of the staker\\n     * @param amount                           amount staked\\n     * @param sharesIssued                     shares issued\\n     */\\n    event Staked(uint256 indexed entityId, address indexed staker, uint256 amount, uint256 sharesIssued);\\n\\n    /**\\n     * @notice Triggered when a user unstakes VANA from an entity\\n     *\\n     * @param entityId                         ID of the entity\\n     * @param staker                           address of the staker\\n     * @param amount                           amount unstaked\\n     * @param sharesBurned                     shares burned\\n     */\\n    event Unstaked(uint256 indexed entityId, address indexed staker, uint256 amount, uint256 sharesBurned);\\n\\n    /**\\n     * @notice Triggered when minimum stake amount is updated\\n     *\\n     * @param newMinStake                      new minimum stake amount\\n     */\\n    event MinStakeUpdated(uint256 newMinStake);\\n\\n    /**\\n     * @notice Triggered when an entity stake is registered\\n     *\\n     * @param entityId                         ID of the entity\\n     * @param ownerAddress                     address of the owner\\n     */\\n    event EntityStakeRegistered(uint256 indexed entityId, address indexed ownerAddress);\\n\\n    error InsufficientStakeAmount();\\n    error InvalidRecipient();\\n    error InsufficientShares();\\n    error TransferFailed();\\n    error InvalidAmount();\\n    error EntityNotFound();\\n    error EntityNotActive();\\n    error InvalidAddress();\\n    error InvalidEntity();\\n    error NotEntityOwner();\\n    error CannotRemoveRegistrationStake();\\n    error NotAuthorized();\\n    error InvalidSlippage();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() ERC2771ContextUpgradeable(address(0)) {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initialize the contract\\n     *\\n     * @param trustedForwarderAddress           address of the trusted forwarder\\n     * @param ownerAddress                      address of the owner\\n     * @param initialMinStake                   initial minimum stake amount (in wei)\\n     */\\n    function initialize(\\n        address trustedForwarderAddress,\\n        address ownerAddress,\\n        uint256 initialMinStake\\n    ) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        __Multicall_init();\\n\\n        _trustedForwarder = trustedForwarderAddress;\\n        minStakeAmount = initialMinStake;\\n\\n        _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    function _contextSuffixLength()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (uint256)\\n    {\\n        return ERC2771ContextUpgradeable._contextSuffixLength();\\n    }\\n\\n    function _checkRole(bytes32 role) internal view override {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    function trustedForwarder() public view virtual override returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns staker info for a specific entity\\n     *\\n     * @param staker                           address of the staker\\n     * @param entityId                         ID of the entity\\n     * @return uint256                         shares owned by staker in the entity\\n     */\\n    function stakerEntities(address staker, uint256 entityId) external view override returns (StakerEntity memory) {\\n        return StakerEntity({shares: _stakers[staker].entities[entityId].shares});\\n    }\\n\\n    function activeStakersListCount() external view returns (uint256) {\\n        return _activeStakersList.length();\\n    }\\n    function activeStakersListValues(uint256 from, uint256 to) external view returns (address[] memory) {\\n        uint256 count = _activeStakersList.length();\\n        if (to > count) {\\n            to = count;\\n        }\\n        address[] memory stakers = new address[](to - from);\\n        for (uint256 i = from; i < to; i++) {\\n            stakers[i - from] = _activeStakersList.at(i);\\n        }\\n        return stakers;\\n    }\\n\\n    function activeStakersListAt(uint256 index) external view returns (address) {\\n        return _activeStakersList.at(index);\\n    }\\n\\n    function inactiveStakersListCount() external view returns (uint256) {\\n        return _inactiveStakersList.length();\\n    }\\n    function inactiveStakersListValues(uint256 from, uint256 to) external view returns (address[] memory) {\\n        uint256 count = _inactiveStakersList.length();\\n        if (to > count) {\\n            to = count;\\n        }\\n        address[] memory stakers = new address[](to - from);\\n        for (uint256 i = from; i < to; i++) {\\n            stakers[i - from] = _inactiveStakersList.at(i);\\n        }\\n        return stakers;\\n    }\\n\\n    function inactiveStakersListAt(uint256 index) external view returns (address) {\\n        return _inactiveStakersList.at(index);\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Updates the minimum stake amount\\n     *\\n     * @param newMinStake                       new minimum stake amount in wei\\n     */\\n    function updateMinStakeAmount(uint256 newMinStake) external override onlyRole(MAINTAINER_ROLE) {\\n        minStakeAmount = newMinStake;\\n        emit MinStakeUpdated(newMinStake);\\n    }\\n\\n    /**\\n     * @notice Update the trusted forwarder\\n     *\\n     * @param trustedForwarderAddress           address of the trusted forwarder\\n     */\\n    function updateTrustedForwarder(address trustedForwarderAddress) external onlyRole(MAINTAINER_ROLE) {\\n        _trustedForwarder = trustedForwarderAddress;\\n    }\\n\\n    /**\\n     * @notice Update the VanaPoolEntity contract address\\n     *\\n     * @param newVanaPoolEntityAddress                new VanaPoolEntity contract address\\n     */\\n    function updateVanaPoolEntity(address newVanaPoolEntityAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newVanaPoolEntityAddress == address(0) || newVanaPoolEntityAddress == address(vanaPoolEntity)) {\\n            revert InvalidAddress();\\n        }\\n\\n        if (address(vanaPoolEntity) != address(0)) {\\n            _revokeRole(VANA_POOL_ENTITY_ROLE, address(vanaPoolEntity));\\n        }\\n        _grantRole(VANA_POOL_ENTITY_ROLE, newVanaPoolEntityAddress);\\n\\n        vanaPoolEntity = IVanaPoolEntity(newVanaPoolEntityAddress);\\n    }\\n\\n    /**\\n     * @notice Update the VanaPoolTreasury contract\\n     *\\n     * @param newVanaPoolTreasuryAddress                new VanaPoolTreasury contract address\\n     */\\n    function updateVanaPoolTreasury(address newVanaPoolTreasuryAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newVanaPoolTreasuryAddress == address(0) || newVanaPoolTreasuryAddress == address(vanaPoolTreasury)) {\\n            revert InvalidAddress();\\n        }\\n\\n        vanaPoolTreasury = IVanaPoolTreasury(newVanaPoolTreasuryAddress);\\n    }\\n\\n    /**\\n     * @notice Stake VANA into a specific entity and allocate it to a recipient\\n     *\\n     * @param entityId   ID of the entity to stake into\\n     * @param recipient  Address of the recipient who will receive the stake\\n     * @param shareAmountMin  Minimum amount of share to receive\\n     */\\n    function stake(\\n        uint256 entityId,\\n        address recipient,\\n        uint256 shareAmountMin\\n    ) external payable override nonReentrant whenNotPaused {\\n        if (!_isValidEntity(entityId)) {\\n            revert EntityNotActive();\\n        }\\n\\n        uint256 stakeAmount = msg.value;\\n\\n        //todo: block users from staking below min stake after the DLPStakes are migrated\\n        //        if (stakeAmount < minStakeAmount) {\\n        //            revert InsufficientStakeAmount();\\n        //        }\\n\\n        if (recipient == address(0)) {\\n            revert InvalidRecipient();\\n        }\\n\\n        // Process entity rewards through VanaPoolEntity to ensure current share price is used\\n        vanaPoolEntity.processRewards(entityId);\\n\\n        // Calculate shares\\n        uint256 vanaToShare = vanaPoolEntity.vanaToEntityShare(entityId);\\n        uint256 sharesIssued = (vanaToShare * stakeAmount) / 1e18;\\n\\n        if (sharesIssued < shareAmountMin) {\\n            revert InvalidSlippage();\\n        }\\n\\n        // Update recipient's position instead of the sender's\\n        _stakers[recipient].entities[entityId].shares += sharesIssued;\\n\\n        _addStaker(recipient);\\n\\n        // Update entity staking data in VanaPoolEntity contract\\n        vanaPoolEntity.updateEntityPool(entityId, sharesIssued, stakeAmount, true);\\n\\n        (bool success, ) = payable(address(vanaPoolTreasury)).call{value: stakeAmount}(\\\"\\\");\\n\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit Staked(entityId, recipient, stakeAmount, sharesIssued);\\n    }\\n\\n    /**\\n     * @notice Unstake VANA from a specific entity\\n     *\\n     * @param entityId                          ID of the entity to unstake from\\n     * @param shareAmount                       shareAmount to unstake\\n     * @param vanaAmountMin                     minimum amount of VANA to receive\\n     */\\n    function unstake(\\n        uint256 entityId,\\n        uint256 shareAmount,\\n        uint256 vanaAmountMin\\n    ) external override nonReentrant whenNotPaused {\\n        StakerEntity storage stakerEntity = _stakers[_msgSender()].entities[entityId];\\n        if (stakerEntity.shares == 0 || shareAmount == 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        // Process entity rewards through VanaPoolEntity to ensure current share price is used\\n        vanaPoolEntity.processRewards(entityId);\\n\\n        //todo: block owner from unstaking below registration stake\\n        //        uint256 vanaToShare = vanaPoolEntity.vanaToEntityShare(entityId);\\n        //\\n        //        // Get entity info from VanaPoolEntity\\n        //        IVanaPoolEntity.EntityInfo memory entityInfo = vanaPoolEntity.entities(entityId);\\n        //        // If this is the entity owner, ensure they can't unstake below the registration stake\\n        //        if (entityInfo.ownerAddress == _msgSender()) {\\n        //            uint256 ownerMinShares = (vanaToShare * vanaPoolEntity.minRegistrationStake()) / 1e18;\\n        //\\n        //            if (stakerShares - shareAmount < ownerMinShares) {\\n        //                revert CannotRemoveRegistrationStake();\\n        //            }\\n        //        }\\n\\n        uint256 shareToVana = vanaPoolEntity.entityShareToVana(entityId);\\n\\n        // Store the exact VANA amount corresponding to shares at this point\\n        uint256 exactVanaAmount = (shareAmount * shareToVana) / 1e18;\\n\\n        if (exactVanaAmount < vanaAmountMin) {\\n            revert InvalidSlippage();\\n        }\\n\\n        // Update staker's position\\n        stakerEntity.shares -= shareAmount;\\n\\n        _removeStaker(_msgSender());\\n\\n        // Update entity staking data in VanaPoolEntity contract\\n        vanaPoolEntity.updateEntityPool(entityId, shareAmount, exactVanaAmount, false);\\n\\n        bool success = vanaPoolTreasury.transferVana(payable(_msgSender()), exactVanaAmount);\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit Unstaked(entityId, _msgSender(), exactVanaAmount, shareAmount);\\n    }\\n\\n    /**\\n     * @notice Register stake for a new entity (called by VanaPoolEntity contract)\\n     *\\n     * @param entityId                          ID of the entity\\n     * @param ownerAddress                      Address of the entity owner\\n     */\\n    function registerEntityStake(\\n        uint256 entityId,\\n        address ownerAddress,\\n        uint256 registrationStake\\n    ) external override nonReentrant whenNotPaused onlyRole(VANA_POOL_ENTITY_ROLE) {\\n        // Register shares for the owner\\n        _stakers[ownerAddress].entities[entityId].shares = registrationStake;\\n\\n        _addStaker(ownerAddress);\\n\\n        emit Staked(entityId, ownerAddress, registrationStake, registrationStake);\\n    }\\n\\n    /**\\n     * @notice Checks if entity exists and is active\\n     *\\n     * @param entityId                         ID of the entity\\n     * @return bool                            true if entity exists and is active\\n     */\\n    function _isValidEntity(uint256 entityId) internal view returns (bool) {\\n        // Check if entity exists in VanaPoolEntity contract\\n        IVanaPoolEntity.EntityInfo memory entityInfo = vanaPoolEntity.entities(entityId);\\n        return entityInfo.status == IVanaPoolEntity.EntityStatus.Active;\\n    }\\n\\n    function _addStaker(address staker) internal {\\n        _activeStakersList.add(staker);\\n        _inactiveStakersList.remove(staker);\\n    }\\n\\n    function _removeStaker(address staker) internal {\\n        uint256 entitiesCount = vanaPoolEntity.entitiesCount();\\n\\n        bool hasStake = false;\\n\\n        for (uint256 i = 1; i <= entitiesCount; i++) {\\n            if (_stakers[staker].entities[i].shares > 0) {\\n                hasStake = true;\\n                break;\\n            }\\n        }\\n\\n        if (!hasStake) {\\n            _activeStakersList.remove(staker);\\n            _inactiveStakersList.add(staker);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2460e624ca6aae97725ec11c8c09fdd06856f107174a50f9f86eee0c9078a462\",\"license\":\"MIT\"},\"contracts/vanaPoolStaking/interfaces/IVanaPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IVanaPoolEntity} from \\\"../../vanaPoolEntity/interfaces/IVanaPoolEntity.sol\\\";\\nimport {IVanaPoolTreasury} from \\\"../../vanaPoolTreasury/interfaces/IVanaPoolTreasury.sol\\\";\\n\\ninterface IVanaPoolStaking {\\n    struct StakerEntity {\\n        uint256 shares;\\n    }\\n\\n    struct Staker {\\n        mapping(uint256 entityId => StakerEntity entity) entities;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function vanaPoolEntity() external view returns (IVanaPoolEntity);\\n    function vanaPoolTreasury() external view returns (IVanaPoolTreasury);\\n    function minStakeAmount() external view returns (uint256);\\n\\n    function stake(uint256 entityId, address recipient, uint256 shareAmountMin) external payable;\\n    function unstake(uint256 entityId, uint256 amount, uint256 vanaAmountMin) external;\\n\\n    function activeStakersListCount() external view returns (uint256);\\n    function activeStakersListValues(uint256 from, uint256 to) external view returns (address[] memory);\\n    function activeStakersListAt(uint256 index) external view returns (address);\\n    function inactiveStakersListCount() external view returns (uint256);\\n    function inactiveStakersListValues(uint256 from, uint256 to) external view returns (address[] memory);\\n    function inactiveStakersListAt(uint256 index) external view returns (address);\\n    function stakerEntities(address staker, uint256 entityId) external view returns (StakerEntity memory);\\n\\n    function pause() external;\\n    function unpause() external;\\n    function updateVanaPoolEntity(address newVanaPoolEntityAddress) external;\\n    function updateVanaPoolTreasury(address newVanaPoolTreasuryAddress) external;\\n    function updateMinStakeAmount(uint256 newMinStake) external;\\n\\n    function registerEntityStake(uint256 entityId, address ownerAddress, uint256 registrationStake) external;\\n}\\n\",\"keccak256\":\"0x933deaf50786566411e0ec116b53c7c7ba1294f45187132045d1aa04850574a3\",\"license\":\"MIT\"},\"contracts/vanaPoolStaking/interfaces/VanaPoolStakingStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./IVanaPoolStaking.sol\\\";\\n\\n/**\\n * @title Storage for VanaPool\\n * @notice For future upgrades, do not change VanaPoolStorageV1. Create a new\\n * contract which implements VanaPoolStorageV1\\n */\\nabstract contract VanaPoolStakingStorageV1 is IVanaPoolStaking {\\n    address internal _trustedForwarder;\\n\\n    IVanaPoolEntity public override vanaPoolEntity;\\n    IVanaPoolTreasury public override vanaPoolTreasury;\\n\\n    uint256 public override minStakeAmount;\\n\\n    EnumerableSet.AddressSet internal _activeStakersList;\\n    mapping(address => Staker) internal _stakers;\\n    EnumerableSet.AddressSet internal _inactiveStakersList;\\n}\\n\",\"keccak256\":\"0x526433a26aa054ebb28faa709121e9b6992a120779c7ba1e14d8d40ad9445ca8\",\"license\":\"MIT\"},\"contracts/vanaPoolTreasury/interfaces/IVanaPoolTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IVanaPoolTreasury {\\n    function version() external pure returns (uint256);\\n    function vanaPool() external view returns (address);\\n    function updateVanaPool(address vanaPoolAddress) external;\\n    function transferVana(address payable to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf5ea7e2f20f6416b2231539cdaf3145bfca259270adfffc17b255d7fd67d5bae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052306080523480156200001557600080fd5b50600060a052620000256200002b565b620000df565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007c5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dc5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b60805160a0516128b16200011060003960005050600081816117ae015281816117d7015261191b01526128b16000f3fe6080604052600436106101aa5760003560e01c806301ffc9a7146101af5780631794bb3c146101e4578063248a9ca3146102065780632ac3bde9146102345780632f2ff15d1461024957806335a8977c1461026957806336568abe146102965780633f4ba83a146102b657806349b5df08146102cb5780634f1ef286146102ed57806352d1902d1461030057806354fd4d5014610315578063572b6c05146103295780635a762513146103495780635c82aa67146103695780635c975abb146103895780636e9c931c1461039e5780637da0a877146103b15780638456cb59146103c6578063899ac34f146103db57806389de1184146103fb57806391d14854146104105780639828ce861461043057806399a9ec8614610450578063a217fddf146104b6578063ac9650d8146104cb578063ad3cb1cc146104f8578063bd97b37514610536578063c9a56cee14610556578063d547741f14610583578063d8060cd5146105a3578063e7a6b784146105c3578063f1887684146105e3578063f6dcf74c146105f9578063f874225414610619578063f90b03111461063b578063ff037e8e1461065b575b600080fd5b3480156101bb57600080fd5b506101cf6101ca36600461204a565b61067b565b60405190151581526020015b60405180910390f35b3480156101f057600080fd5b506102046101ff366004612089565b6106b2565b005b34801561021257600080fd5b506102266102213660046120ca565b61082a565b6040519081526020016101db565b34801561024057600080fd5b5061022661084a565b34801561025557600080fd5b506102046102643660046120e3565b61085b565b34801561027557600080fd5b50600154610289906001600160a01b031681565b6040516101db9190612113565b3480156102a257600080fd5b506102046102b13660046120e3565b61087d565b3480156102c257600080fd5b506102046108c5565b3480156102d757600080fd5b5061022660008051602061285c83398151915281565b6102046102fb3660046121bd565b6108e8565b34801561030c57600080fd5b50610226610907565b34801561032157600080fd5b506001610226565b34801561033557600080fd5b506101cf61034436600461224f565b610924565b34801561035557600080fd5b506102896103643660046120ca565b610949565b34801561037557600080fd5b506102896103843660046120ca565b610956565b34801561039557600080fd5b506101cf610963565b6102046103ac36600461226c565b610978565b3480156103bd57600080fd5b50610289610c48565b3480156103d257600080fd5b50610204610c57565b3480156103e757600080fd5b506102046103f636600461224f565b610c77565b34801561040757600080fd5b50610226610cf3565b34801561041c57600080fd5b506101cf61042b3660046120e3565b610cff565b34801561043c57600080fd5b5061020461044b36600461226c565b610d35565b34801561045c57600080fd5b506104a761046b366004612293565b6040805160208082018352600091829052825180820184526001600160a01b039590951682526006815282822093825292909252902054815290565b604051905181526020016101db565b3480156104c257600080fd5b50610226600081565b3480156104d757600080fd5b506104eb6104e63660046122bf565b610dc9565b6040516101db9190612383565b34801561050457600080fd5b50610529604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101db91906123e7565b34801561054257600080fd5b506102046105513660046123fa565b610f27565b34801561056257600080fd5b50610576610571366004612426565b611227565b6040516101db9190612448565b34801561058f57600080fd5b5061020461059e3660046120e3565b6112eb565b3480156105af57600080fd5b506102046105be3660046120ca565b611307565b3480156105cf57600080fd5b50600254610289906001600160a01b031681565b3480156105ef57600080fd5b5061022660035481565b34801561060557600080fd5b50610576610614366004612426565b61135b565b34801561062557600080fd5b5061022660008051602061283c83398151915281565b34801561064757600080fd5b5061020461065636600461224f565b611416565b34801561066757600080fd5b5061020461067636600461224f565b611451565b60006001600160e01b03198216637965db0b60e01b14806106ac57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106bc61151e565b805490915060ff600160401b82041615906001600160401b03166000811580156106e35750825b90506000826001600160401b031660011480156106ff5750303b155b90508115801561070d575080155b1561072b5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561075457845460ff60401b1916600160401b1785555b61075c611542565b610764611542565b61076c61154c565b61077461155c565b61077c611542565b600080546001600160a01b0319166001600160a01b038a1617815560038790556107b59060008051602061283c8339815191529061156c565b6107c06000886115cc565b506107d960008051602061283c833981519152886115cc565b50831561082057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b60008061083561166e565b60009384526020525050604090206001015490565b60006108566004611692565b905090565b6108648261082a565b61086d8161169c565b61087783836115cc565b50505050565b6108856116a6565b6001600160a01b0316816001600160a01b0316146108b65760405163334bd91960e11b815260040160405180910390fd5b6108c082826116b0565b505050565b60008051602061283c8339815191526108dd8161169c565b6108e5611746565b50565b6108f06117a3565b6108f982611848565b6109038282611853565b5050565b6000610911611910565b5060008051602061281c83398151915290565b600061092e610c48565b6001600160a01b0316826001600160a01b0316149050919050565b60006106ac600783611959565b60006106ac600483611959565b60008061096e61196c565b5460ff1692915050565b610980611990565b6109886119c6565b610991836119ec565b6109ae576040516305d06f5560e51b815260040160405180910390fd5b346001600160a01b0383166109d657604051634e46966960e11b815260040160405180910390fd5b60015460405163e6ef675b60e01b8152600481018690526001600160a01b039091169063e6ef675b90602401600060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b50506001546040516350d211cd60e11b815260048101889052600093506001600160a01b03909116915063a1a4239a90602401602060405180830381865afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa49190612495565b90506000670de0b6b3a7640000610abb84846124c4565b610ac591906124db565b905083811015610ae85760405163334ee9a160e01b815260040160405180910390fd5b6001600160a01b038516600090815260066020908152604080832089845290915281208054839290610b1b9084906124fd565b90915550610b2a905085611a84565b60018054604051636f11853360e11b81526001600160a01b039091169163de230a6691610b5f918a9186918991600401612510565b600060405180830381600087803b158015610b7957600080fd5b505af1158015610b8d573d6000803e3d6000fd5b5050600254604051600093506001600160a01b03909116915085908381818185875af1925050503d8060008114610be0576040519150601f19603f3d011682016040523d82523d6000602084013e610be5565b606091505b5050905080610c07576040516312171d8360e31b815260040160405180910390fd5b60408051858152602081018490526001600160a01b0388169189916000805160206127fc83398151915291015b60405180910390a3505050506108c0611a9b565b6000546001600160a01b031690565b60008051602061283c833981519152610c6f8161169c565b6108e5611aac565b60008051602061283c833981519152610c8f8161169c565b6001600160a01b0382161580610cb257506002546001600160a01b038381169116145b15610cd05760405163e6c4247b60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006108566007611692565b600080610d0a61166e565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b610d3d611990565b610d456119c6565b60008051602061285c833981519152610d5d8161169c565b6001600160a01b03831660009081526006602090815260408083208784529091529020829055610d8c83611a84565b60408051838152602081018490526001600160a01b0385169186916000805160206127fc833981519152910160405180910390a3506108c0611a9b565b60606000610dd56116a6565b6001600160a01b0316336001600160a01b031614610e4057600036610dfb60148261252d565b610e06928290612540565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e5092505050565b6040805160008152602081019091525b9050826001600160401b03811115610e6a57610e6a612127565b604051908082528060200260200182016040528015610e9d57816020015b6060815260200190600190039081610e885790505b50915060005b83811015610f1f57610efa30868684818110610ec157610ec161256a565b9050602002810190610ed39190612580565b85604051602001610ee6939291906125cd565b604051602081830303815290604052611af4565b838281518110610f0c57610f0c61256a565b6020908102919091010152600101610ea3565b505092915050565b610f2f611990565b610f376119c6565b600060066000610f456116a6565b6001600160a01b0316815260208082019290925260409081016000908120878252909252902080549091501580610f7a575082155b15610f985760405163162908e360e11b815260040160405180910390fd5b60015460405163e6ef675b60e01b8152600481018690526001600160a01b039091169063e6ef675b90602401600060405180830381600087803b158015610fde57600080fd5b505af1158015610ff2573d6000803e3d6000fd5b5050600154604051633428229b60e21b815260048101889052600093506001600160a01b03909116915063d0a08a6c90602401602060405180830381865afa158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110669190612495565b90506000670de0b6b3a764000061107d83876124c4565b61108791906124db565b9050838110156110aa5760405163334ee9a160e01b815260040160405180910390fd5b848360000160008282546110be919061252d565b909155506110d490506110cf6116a6565b611b6a565b600154604051636f11853360e11b81526001600160a01b039091169063de230a669061110b90899089908690600090600401612510565b600060405180830381600087803b15801561112557600080fd5b505af1158015611139573d6000803e3d6000fd5b5050600254600092506001600160a01b0316905063117511c961115a6116a6565b846040518363ffffffff1660e01b81526004016111789291906125f4565b6020604051808303816000875af1158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb919061260d565b9050806111db576040516312171d8360e31b815260040160405180910390fd5b6111e36116a6565b6001600160a01b0316877fffdaf13b1d96bfc2213355f353f84c19493e0681eb0df26f83d862acd266750a8489604051610c34929190918252602082015260400190565b606060006112356007611692565b905080831115611243578092505b600061124f858561252d565b6001600160401b0381111561126657611266612127565b60405190808252806020026020018201604052801561128f578160200160208202803683370190505b509050845b848110156112e2576112a7600782611959565b826112b2888461252d565b815181106112c2576112c261256a565b6001600160a01b0390921660209283029190910190910152600101611294565b50949350505050565b6112f48261082a565b6112fd8161169c565b61087783836116b0565b60008051602061283c83398151915261131f8161169c565b60038290556040518281527f47ab46f2c8d4258304a2f5551c1cbdb6981be49631365d1ba7191288a73f39ef9060200160405180910390a15050565b606060006113696004611692565b905080831115611377578092505b6000611383858561252d565b6001600160401b0381111561139a5761139a612127565b6040519080825280602002602001820160405280156113c3578160200160208202803683370190505b509050845b848110156112e2576113db600482611959565b826113e6888461252d565b815181106113f6576113f661256a565b6001600160a01b03909216602092830291909101909101526001016113c8565b60008051602061283c83398151915261142e8161169c565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602061283c8339815191526114698161169c565b6001600160a01b038216158061148c57506001546001600160a01b038381169116145b156114aa5760405163e6c4247b60e01b815260040160405180910390fd5b6001546001600160a01b0316156114e2576001546114e09060008051602061285c833981519152906001600160a01b03166116b0565b505b6114fa60008051602061285c833981519152836115cc565b5050600180546001600160a01b0319166001600160a01b0392909216919091179055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b61154a611c47565b565b611554611c47565b61154a611c6c565b611564611c47565b61154a611c89565b600061157661166e565b905060006115838461082a565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b6000806115d761166e565b90506115e38484610cff565b611664576000848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561161a6116a6565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106ac565b60009150506106ac565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b60006106ac825490565b6108e58133611c91565b6000610856611cbc565b6000806116bb61166e565b90506116c78484610cff565b15611664576000848152602082815260408083206001600160a01b03871684529091529020805460ff191690556116fc6116a6565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019150506106ac565b61174e611d0e565b600061175861196c565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61178b6116a6565b6040516117989190612113565b60405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061182a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661181e60008051602061281c833981519152546001600160a01b031690565b6001600160a01b031614155b1561154a5760405163703e46dd60e11b815260040160405180910390fd5b60006109038161169c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156118ad575060408051601f3d908101601f191682019092526118aa91810190612495565b60015b6118d55781604051634c9c8ce360e01b81526004016118cc9190612113565b60405180910390fd5b60008051602061281c833981519152811461190657604051632a87526960e21b8152600481018290526024016118cc565b6108c08383611d33565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461154a5760405163703e46dd60e11b815260040160405180910390fd5b60006119658383611d89565b9392505050565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b600061199a611db3565b8054909150600119016119c057604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6119ce610963565b1561154a5760405163d93c066560e01b815260040160405180910390fd5b600154604051636331883b60e01b81526004810183905260009182916001600160a01b0390911690636331883b90602401600060405180830381865afa158015611a3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a62919081019061269b565b9050600181604001516002811115611a7c57611a7c61276c565b149392505050565b611a8f600482611dd7565b50610903600782611dec565b6000611aa5611db3565b6001905550565b611ab46119c6565b6000611abe61196c565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861178b6116a6565b6060600080846001600160a01b031684604051611b119190612782565b600060405180830381855af49150503d8060008114611b4c576040519150601f19603f3d011682016040523d82523d6000602084013e611b51565b606091505b5091509150611b61858383611e01565b95945050505050565b6001546040805163c04f712f60e01b815290516000926001600160a01b03169163c04f712f9160048083019260209291908290030181865afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190612495565b9050600060015b828111611c2a576001600160a01b038416600090815260066020908152604080832084845290915290205415611c185760019150611c2a565b80611c228161279e565b915050611bdf565b50806108c057611c3b600484611dec565b50610877600784611dd7565b611c4f611e54565b61154a57604051631afcd79f60e31b815260040160405180910390fd5b611c74611c47565b6000611c7e61196c565b805460ff1916905550565b611a9b611c47565b611c9b8282610cff565b61090357808260405163e2517d3f60e01b81526004016118cc9291906125f4565b6000366014611cca33610924565b8015611cd65750808210155b15611d0657600036611ce8838561252d565b611cf3928290612540565b611cfc916127b7565b60601c9250505090565b339250505090565b611d16610963565b61154a57604051638dfc202b60e01b815260040160405180910390fd5b611d3c82611e6e565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611d81576108c08282611af4565b610903611eca565b6000826000018281548110611da057611da061256a565b9060005260206000200154905092915050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b6000611965836001600160a01b038416611ee9565b6000611965836001600160a01b038416611f38565b606082611e1657611e1182612021565b611965565b8151158015611e2d57506001600160a01b0384163b155b15611e4d5783604051639996b31560e01b81526004016118cc9190612113565b5092915050565b6000611e5e61151e565b54600160401b900460ff16919050565b806001600160a01b03163b600003611e9b5780604051634c9c8ce360e01b81526004016118cc9190612113565b60008051602061281c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b341561154a5760405163b398979f60e01b815260040160405180910390fd5b6000818152600183016020526040812054611f30575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106ac565b5060006106ac565b60008181526001830160205260408120548015611664576000611f5c60018361252d565b8554909150600090611f709060019061252d565b9050808214611fd5576000866000018281548110611f9057611f9061256a565b9060005260206000200154905080876000018481548110611fb357611fb361256a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fe657611fe66127e5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106ac565b8051156120315780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561205c57600080fd5b81356001600160e01b03198116811461196557600080fd5b6001600160a01b03811681146108e557600080fd5b60008060006060848603121561209e57600080fd5b83356120a981612074565b925060208401356120b981612074565b929592945050506040919091013590565b6000602082840312156120dc57600080fd5b5035919050565b600080604083850312156120f657600080fd5b82359150602083013561210881612074565b809150509250929050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171561216057612160612127565b60405290565b604051601f8201601f191681016001600160401b038111828210171561218e5761218e612127565b604052919050565b60006001600160401b038211156121af576121af612127565b50601f01601f191660200190565b600080604083850312156121d057600080fd5b82356121db81612074565b915060208301356001600160401b038111156121f657600080fd5b8301601f8101851361220757600080fd5b803561221a61221582612196565b612166565b81815286602083850101111561222f57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60006020828403121561226157600080fd5b813561196581612074565b60008060006060848603121561228157600080fd5b8335925060208401356120b981612074565b600080604083850312156122a657600080fd5b82356122b181612074565b946020939093013593505050565b600080602083850312156122d257600080fd5b82356001600160401b03808211156122e957600080fd5b818501915085601f8301126122fd57600080fd5b81358181111561230c57600080fd5b8660208260051b850101111561232157600080fd5b60209290920196919550909350505050565b60005b8381101561234e578181015183820152602001612336565b50506000910152565b6000815180845261236f816020860160208601612333565b601f01601f19169290920160200192915050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156123da57603f198886030184526123c8858351612357565b945092850192908501906001016123ac565b5092979650505050505050565b6020815260006119656020830184612357565b60008060006060848603121561240f57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561243957600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156124895783516001600160a01b031683529284019291840191600101612464565b50909695505050505050565b6000602082840312156124a757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106ac576106ac6124ae565b6000826124f857634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106ac576106ac6124ae565b938452602084019290925260408301521515606082015260800190565b818103818111156106ac576106ac6124ae565b6000808585111561255057600080fd5b8386111561255d57600080fd5b5050820193919092039150565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261259757600080fd5b8301803591506001600160401b038211156125b157600080fd5b6020019150368190038213156125c657600080fd5b9250929050565b8284823760008382016000815283516125ea818360208801612333565b0195945050505050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561261f57600080fd5b8151801515811461196557600080fd5b805161263a81612074565b919050565b80516003811061263a57600080fd5b600082601f83011261265f57600080fd5b815161266d61221582612196565b81815284602083860101111561268257600080fd5b612693826020830160208701612333565b949350505050565b6000602082840312156126ad57600080fd5b81516001600160401b03808211156126c457600080fd5b9083019061012082860312156126d957600080fd5b6126e161213d565b825181526126f16020840161262f565b60208201526127026040840161263f565b604082015260608301518281111561271957600080fd5b6127258782860161264e565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101009150818301518282015280935050505092915050565b634e487b7160e01b600052602160045260246000fd5b60008251612794818460208701612333565b9190910192915050565b6000600182016127b0576127b06124ae565b5060010190565b6001600160601b03198135818116916014851015610f1f5760149490940360031b84901b1690921692915050565b634e487b7160e01b600052603160045260246000fdfe17700ceb1658b18206f427c1578048e87504106b14ec69e9b4586d9a95174a32360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab959fe32e53aa9381b7f44f013dfd62f90c179e5510d76d4c813325c4b6b3f2d973a2646970667358221220322a572b15bca277a3049759ca8781fd08f9f4aa79ac7522441a7add4e5324e864736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101aa5760003560e01c806301ffc9a7146101af5780631794bb3c146101e4578063248a9ca3146102065780632ac3bde9146102345780632f2ff15d1461024957806335a8977c1461026957806336568abe146102965780633f4ba83a146102b657806349b5df08146102cb5780634f1ef286146102ed57806352d1902d1461030057806354fd4d5014610315578063572b6c05146103295780635a762513146103495780635c82aa67146103695780635c975abb146103895780636e9c931c1461039e5780637da0a877146103b15780638456cb59146103c6578063899ac34f146103db57806389de1184146103fb57806391d14854146104105780639828ce861461043057806399a9ec8614610450578063a217fddf146104b6578063ac9650d8146104cb578063ad3cb1cc146104f8578063bd97b37514610536578063c9a56cee14610556578063d547741f14610583578063d8060cd5146105a3578063e7a6b784146105c3578063f1887684146105e3578063f6dcf74c146105f9578063f874225414610619578063f90b03111461063b578063ff037e8e1461065b575b600080fd5b3480156101bb57600080fd5b506101cf6101ca36600461204a565b61067b565b60405190151581526020015b60405180910390f35b3480156101f057600080fd5b506102046101ff366004612089565b6106b2565b005b34801561021257600080fd5b506102266102213660046120ca565b61082a565b6040519081526020016101db565b34801561024057600080fd5b5061022661084a565b34801561025557600080fd5b506102046102643660046120e3565b61085b565b34801561027557600080fd5b50600154610289906001600160a01b031681565b6040516101db9190612113565b3480156102a257600080fd5b506102046102b13660046120e3565b61087d565b3480156102c257600080fd5b506102046108c5565b3480156102d757600080fd5b5061022660008051602061285c83398151915281565b6102046102fb3660046121bd565b6108e8565b34801561030c57600080fd5b50610226610907565b34801561032157600080fd5b506001610226565b34801561033557600080fd5b506101cf61034436600461224f565b610924565b34801561035557600080fd5b506102896103643660046120ca565b610949565b34801561037557600080fd5b506102896103843660046120ca565b610956565b34801561039557600080fd5b506101cf610963565b6102046103ac36600461226c565b610978565b3480156103bd57600080fd5b50610289610c48565b3480156103d257600080fd5b50610204610c57565b3480156103e757600080fd5b506102046103f636600461224f565b610c77565b34801561040757600080fd5b50610226610cf3565b34801561041c57600080fd5b506101cf61042b3660046120e3565b610cff565b34801561043c57600080fd5b5061020461044b36600461226c565b610d35565b34801561045c57600080fd5b506104a761046b366004612293565b6040805160208082018352600091829052825180820184526001600160a01b039590951682526006815282822093825292909252902054815290565b604051905181526020016101db565b3480156104c257600080fd5b50610226600081565b3480156104d757600080fd5b506104eb6104e63660046122bf565b610dc9565b6040516101db9190612383565b34801561050457600080fd5b50610529604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101db91906123e7565b34801561054257600080fd5b506102046105513660046123fa565b610f27565b34801561056257600080fd5b50610576610571366004612426565b611227565b6040516101db9190612448565b34801561058f57600080fd5b5061020461059e3660046120e3565b6112eb565b3480156105af57600080fd5b506102046105be3660046120ca565b611307565b3480156105cf57600080fd5b50600254610289906001600160a01b031681565b3480156105ef57600080fd5b5061022660035481565b34801561060557600080fd5b50610576610614366004612426565b61135b565b34801561062557600080fd5b5061022660008051602061283c83398151915281565b34801561064757600080fd5b5061020461065636600461224f565b611416565b34801561066757600080fd5b5061020461067636600461224f565b611451565b60006001600160e01b03198216637965db0b60e01b14806106ac57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106bc61151e565b805490915060ff600160401b82041615906001600160401b03166000811580156106e35750825b90506000826001600160401b031660011480156106ff5750303b155b90508115801561070d575080155b1561072b5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561075457845460ff60401b1916600160401b1785555b61075c611542565b610764611542565b61076c61154c565b61077461155c565b61077c611542565b600080546001600160a01b0319166001600160a01b038a1617815560038790556107b59060008051602061283c8339815191529061156c565b6107c06000886115cc565b506107d960008051602061283c833981519152886115cc565b50831561082057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b60008061083561166e565b60009384526020525050604090206001015490565b60006108566004611692565b905090565b6108648261082a565b61086d8161169c565b61087783836115cc565b50505050565b6108856116a6565b6001600160a01b0316816001600160a01b0316146108b65760405163334bd91960e11b815260040160405180910390fd5b6108c082826116b0565b505050565b60008051602061283c8339815191526108dd8161169c565b6108e5611746565b50565b6108f06117a3565b6108f982611848565b6109038282611853565b5050565b6000610911611910565b5060008051602061281c83398151915290565b600061092e610c48565b6001600160a01b0316826001600160a01b0316149050919050565b60006106ac600783611959565b60006106ac600483611959565b60008061096e61196c565b5460ff1692915050565b610980611990565b6109886119c6565b610991836119ec565b6109ae576040516305d06f5560e51b815260040160405180910390fd5b346001600160a01b0383166109d657604051634e46966960e11b815260040160405180910390fd5b60015460405163e6ef675b60e01b8152600481018690526001600160a01b039091169063e6ef675b90602401600060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b50506001546040516350d211cd60e11b815260048101889052600093506001600160a01b03909116915063a1a4239a90602401602060405180830381865afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa49190612495565b90506000670de0b6b3a7640000610abb84846124c4565b610ac591906124db565b905083811015610ae85760405163334ee9a160e01b815260040160405180910390fd5b6001600160a01b038516600090815260066020908152604080832089845290915281208054839290610b1b9084906124fd565b90915550610b2a905085611a84565b60018054604051636f11853360e11b81526001600160a01b039091169163de230a6691610b5f918a9186918991600401612510565b600060405180830381600087803b158015610b7957600080fd5b505af1158015610b8d573d6000803e3d6000fd5b5050600254604051600093506001600160a01b03909116915085908381818185875af1925050503d8060008114610be0576040519150601f19603f3d011682016040523d82523d6000602084013e610be5565b606091505b5050905080610c07576040516312171d8360e31b815260040160405180910390fd5b60408051858152602081018490526001600160a01b0388169189916000805160206127fc83398151915291015b60405180910390a3505050506108c0611a9b565b6000546001600160a01b031690565b60008051602061283c833981519152610c6f8161169c565b6108e5611aac565b60008051602061283c833981519152610c8f8161169c565b6001600160a01b0382161580610cb257506002546001600160a01b038381169116145b15610cd05760405163e6c4247b60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006108566007611692565b600080610d0a61166e565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b610d3d611990565b610d456119c6565b60008051602061285c833981519152610d5d8161169c565b6001600160a01b03831660009081526006602090815260408083208784529091529020829055610d8c83611a84565b60408051838152602081018490526001600160a01b0385169186916000805160206127fc833981519152910160405180910390a3506108c0611a9b565b60606000610dd56116a6565b6001600160a01b0316336001600160a01b031614610e4057600036610dfb60148261252d565b610e06928290612540565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e5092505050565b6040805160008152602081019091525b9050826001600160401b03811115610e6a57610e6a612127565b604051908082528060200260200182016040528015610e9d57816020015b6060815260200190600190039081610e885790505b50915060005b83811015610f1f57610efa30868684818110610ec157610ec161256a565b9050602002810190610ed39190612580565b85604051602001610ee6939291906125cd565b604051602081830303815290604052611af4565b838281518110610f0c57610f0c61256a565b6020908102919091010152600101610ea3565b505092915050565b610f2f611990565b610f376119c6565b600060066000610f456116a6565b6001600160a01b0316815260208082019290925260409081016000908120878252909252902080549091501580610f7a575082155b15610f985760405163162908e360e11b815260040160405180910390fd5b60015460405163e6ef675b60e01b8152600481018690526001600160a01b039091169063e6ef675b90602401600060405180830381600087803b158015610fde57600080fd5b505af1158015610ff2573d6000803e3d6000fd5b5050600154604051633428229b60e21b815260048101889052600093506001600160a01b03909116915063d0a08a6c90602401602060405180830381865afa158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110669190612495565b90506000670de0b6b3a764000061107d83876124c4565b61108791906124db565b9050838110156110aa5760405163334ee9a160e01b815260040160405180910390fd5b848360000160008282546110be919061252d565b909155506110d490506110cf6116a6565b611b6a565b600154604051636f11853360e11b81526001600160a01b039091169063de230a669061110b90899089908690600090600401612510565b600060405180830381600087803b15801561112557600080fd5b505af1158015611139573d6000803e3d6000fd5b5050600254600092506001600160a01b0316905063117511c961115a6116a6565b846040518363ffffffff1660e01b81526004016111789291906125f4565b6020604051808303816000875af1158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb919061260d565b9050806111db576040516312171d8360e31b815260040160405180910390fd5b6111e36116a6565b6001600160a01b0316877fffdaf13b1d96bfc2213355f353f84c19493e0681eb0df26f83d862acd266750a8489604051610c34929190918252602082015260400190565b606060006112356007611692565b905080831115611243578092505b600061124f858561252d565b6001600160401b0381111561126657611266612127565b60405190808252806020026020018201604052801561128f578160200160208202803683370190505b509050845b848110156112e2576112a7600782611959565b826112b2888461252d565b815181106112c2576112c261256a565b6001600160a01b0390921660209283029190910190910152600101611294565b50949350505050565b6112f48261082a565b6112fd8161169c565b61087783836116b0565b60008051602061283c83398151915261131f8161169c565b60038290556040518281527f47ab46f2c8d4258304a2f5551c1cbdb6981be49631365d1ba7191288a73f39ef9060200160405180910390a15050565b606060006113696004611692565b905080831115611377578092505b6000611383858561252d565b6001600160401b0381111561139a5761139a612127565b6040519080825280602002602001820160405280156113c3578160200160208202803683370190505b509050845b848110156112e2576113db600482611959565b826113e6888461252d565b815181106113f6576113f661256a565b6001600160a01b03909216602092830291909101909101526001016113c8565b60008051602061283c83398151915261142e8161169c565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602061283c8339815191526114698161169c565b6001600160a01b038216158061148c57506001546001600160a01b038381169116145b156114aa5760405163e6c4247b60e01b815260040160405180910390fd5b6001546001600160a01b0316156114e2576001546114e09060008051602061285c833981519152906001600160a01b03166116b0565b505b6114fa60008051602061285c833981519152836115cc565b5050600180546001600160a01b0319166001600160a01b0392909216919091179055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b61154a611c47565b565b611554611c47565b61154a611c6c565b611564611c47565b61154a611c89565b600061157661166e565b905060006115838461082a565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b6000806115d761166e565b90506115e38484610cff565b611664576000848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561161a6116a6565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106ac565b60009150506106ac565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b60006106ac825490565b6108e58133611c91565b6000610856611cbc565b6000806116bb61166e565b90506116c78484610cff565b15611664576000848152602082815260408083206001600160a01b03871684529091529020805460ff191690556116fc6116a6565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019150506106ac565b61174e611d0e565b600061175861196c565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61178b6116a6565b6040516117989190612113565b60405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061182a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661181e60008051602061281c833981519152546001600160a01b031690565b6001600160a01b031614155b1561154a5760405163703e46dd60e11b815260040160405180910390fd5b60006109038161169c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156118ad575060408051601f3d908101601f191682019092526118aa91810190612495565b60015b6118d55781604051634c9c8ce360e01b81526004016118cc9190612113565b60405180910390fd5b60008051602061281c833981519152811461190657604051632a87526960e21b8152600481018290526024016118cc565b6108c08383611d33565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461154a5760405163703e46dd60e11b815260040160405180910390fd5b60006119658383611d89565b9392505050565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b600061199a611db3565b8054909150600119016119c057604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6119ce610963565b1561154a5760405163d93c066560e01b815260040160405180910390fd5b600154604051636331883b60e01b81526004810183905260009182916001600160a01b0390911690636331883b90602401600060405180830381865afa158015611a3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a62919081019061269b565b9050600181604001516002811115611a7c57611a7c61276c565b149392505050565b611a8f600482611dd7565b50610903600782611dec565b6000611aa5611db3565b6001905550565b611ab46119c6565b6000611abe61196c565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861178b6116a6565b6060600080846001600160a01b031684604051611b119190612782565b600060405180830381855af49150503d8060008114611b4c576040519150601f19603f3d011682016040523d82523d6000602084013e611b51565b606091505b5091509150611b61858383611e01565b95945050505050565b6001546040805163c04f712f60e01b815290516000926001600160a01b03169163c04f712f9160048083019260209291908290030181865afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190612495565b9050600060015b828111611c2a576001600160a01b038416600090815260066020908152604080832084845290915290205415611c185760019150611c2a565b80611c228161279e565b915050611bdf565b50806108c057611c3b600484611dec565b50610877600784611dd7565b611c4f611e54565b61154a57604051631afcd79f60e31b815260040160405180910390fd5b611c74611c47565b6000611c7e61196c565b805460ff1916905550565b611a9b611c47565b611c9b8282610cff565b61090357808260405163e2517d3f60e01b81526004016118cc9291906125f4565b6000366014611cca33610924565b8015611cd65750808210155b15611d0657600036611ce8838561252d565b611cf3928290612540565b611cfc916127b7565b60601c9250505090565b339250505090565b611d16610963565b61154a57604051638dfc202b60e01b815260040160405180910390fd5b611d3c82611e6e565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611d81576108c08282611af4565b610903611eca565b6000826000018281548110611da057611da061256a565b9060005260206000200154905092915050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b6000611965836001600160a01b038416611ee9565b6000611965836001600160a01b038416611f38565b606082611e1657611e1182612021565b611965565b8151158015611e2d57506001600160a01b0384163b155b15611e4d5783604051639996b31560e01b81526004016118cc9190612113565b5092915050565b6000611e5e61151e565b54600160401b900460ff16919050565b806001600160a01b03163b600003611e9b5780604051634c9c8ce360e01b81526004016118cc9190612113565b60008051602061281c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b341561154a5760405163b398979f60e01b815260040160405180910390fd5b6000818152600183016020526040812054611f30575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106ac565b5060006106ac565b60008181526001830160205260408120548015611664576000611f5c60018361252d565b8554909150600090611f709060019061252d565b9050808214611fd5576000866000018281548110611f9057611f9061256a565b9060005260206000200154905080876000018481548110611fb357611fb361256a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fe657611fe66127e5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106ac565b8051156120315780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60006020828403121561205c57600080fd5b81356001600160e01b03198116811461196557600080fd5b6001600160a01b03811681146108e557600080fd5b60008060006060848603121561209e57600080fd5b83356120a981612074565b925060208401356120b981612074565b929592945050506040919091013590565b6000602082840312156120dc57600080fd5b5035919050565b600080604083850312156120f657600080fd5b82359150602083013561210881612074565b809150509250929050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171561216057612160612127565b60405290565b604051601f8201601f191681016001600160401b038111828210171561218e5761218e612127565b604052919050565b60006001600160401b038211156121af576121af612127565b50601f01601f191660200190565b600080604083850312156121d057600080fd5b82356121db81612074565b915060208301356001600160401b038111156121f657600080fd5b8301601f8101851361220757600080fd5b803561221a61221582612196565b612166565b81815286602083850101111561222f57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60006020828403121561226157600080fd5b813561196581612074565b60008060006060848603121561228157600080fd5b8335925060208401356120b981612074565b600080604083850312156122a657600080fd5b82356122b181612074565b946020939093013593505050565b600080602083850312156122d257600080fd5b82356001600160401b03808211156122e957600080fd5b818501915085601f8301126122fd57600080fd5b81358181111561230c57600080fd5b8660208260051b850101111561232157600080fd5b60209290920196919550909350505050565b60005b8381101561234e578181015183820152602001612336565b50506000910152565b6000815180845261236f816020860160208601612333565b601f01601f19169290920160200192915050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156123da57603f198886030184526123c8858351612357565b945092850192908501906001016123ac565b5092979650505050505050565b6020815260006119656020830184612357565b60008060006060848603121561240f57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561243957600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156124895783516001600160a01b031683529284019291840191600101612464565b50909695505050505050565b6000602082840312156124a757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106ac576106ac6124ae565b6000826124f857634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106ac576106ac6124ae565b938452602084019290925260408301521515606082015260800190565b818103818111156106ac576106ac6124ae565b6000808585111561255057600080fd5b8386111561255d57600080fd5b5050820193919092039150565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261259757600080fd5b8301803591506001600160401b038211156125b157600080fd5b6020019150368190038213156125c657600080fd5b9250929050565b8284823760008382016000815283516125ea818360208801612333565b0195945050505050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561261f57600080fd5b8151801515811461196557600080fd5b805161263a81612074565b919050565b80516003811061263a57600080fd5b600082601f83011261265f57600080fd5b815161266d61221582612196565b81815284602083860101111561268257600080fd5b612693826020830160208701612333565b949350505050565b6000602082840312156126ad57600080fd5b81516001600160401b03808211156126c457600080fd5b9083019061012082860312156126d957600080fd5b6126e161213d565b825181526126f16020840161262f565b60208201526127026040840161263f565b604082015260608301518281111561271957600080fd5b6127258782860161264e565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101009150818301518282015280935050505092915050565b634e487b7160e01b600052602160045260246000fd5b60008251612794818460208701612333565b9190910192915050565b6000600182016127b0576127b06124ae565b5060010190565b6001600160601b03198135818116916014851015610f1f5760149490940360031b84901b1690921692915050565b634e487b7160e01b600052603160045260246000fdfe17700ceb1658b18206f427c1578048e87504106b14ec69e9b4586d9a95174a32360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab959fe32e53aa9381b7f44f013dfd62f90c179e5510d76d4c813325c4b6b3f2d973a2646970667358221220322a572b15bca277a3049759ca8781fd08f9f4aa79ac7522441a7add4e5324e864736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "EntityStakeRegistered(uint256,address)": {
        "params": {
          "entityId": "ID of the entity",
          "ownerAddress": "address of the owner"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MinStakeUpdated(uint256)": {
        "params": {
          "newMinStake": "new minimum stake amount"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Staked(uint256,address,uint256,uint256)": {
        "params": {
          "amount": "amount staked",
          "entityId": "ID of the entity",
          "sharesIssued": "shares issued",
          "staker": "address of the staker"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Unstaked(uint256,address,uint256,uint256)": {
        "params": {
          "amount": "amount unstaked",
          "entityId": "ID of the entity",
          "sharesBurned": "shares burned",
          "staker": "address of the staker"
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256)": {
        "params": {
          "initialMinStake": "initial minimum stake amount (in wei)",
          "ownerAddress": "address of the owner",
          "trustedForwarderAddress": "address of the trusted forwarder"
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registerEntityStake(uint256,address,uint256)": {
        "params": {
          "entityId": "ID of the entity",
          "ownerAddress": "Address of the entity owner"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "stake(uint256,address,uint256)": {
        "params": {
          "entityId": "ID of the entity to stake into",
          "recipient": "Address of the recipient who will receive the stake",
          "shareAmountMin": "Minimum amount of share to receive"
        }
      },
      "stakerEntities(address,uint256)": {
        "params": {
          "entityId": "ID of the entity",
          "staker": "address of the staker"
        },
        "returns": {
          "_0": "uint256                         shares owned by staker in the entity"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      },
      "unstake(uint256,uint256,uint256)": {
        "params": {
          "entityId": "ID of the entity to unstake from",
          "shareAmount": "shareAmount to unstake",
          "vanaAmountMin": "minimum amount of VANA to receive"
        }
      },
      "updateMinStakeAmount(uint256)": {
        "params": {
          "newMinStake": "new minimum stake amount in wei"
        }
      },
      "updateTrustedForwarder(address)": {
        "params": {
          "trustedForwarderAddress": "address of the trusted forwarder"
        }
      },
      "updateVanaPoolEntity(address)": {
        "params": {
          "newVanaPoolEntityAddress": "new VanaPoolEntity contract address"
        }
      },
      "updateVanaPoolTreasury(address)": {
        "params": {
          "newVanaPoolTreasuryAddress": "new VanaPoolTreasury contract address"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "EntityStakeRegistered(uint256,address)": {
        "notice": "Triggered when an entity stake is registered"
      },
      "MinStakeUpdated(uint256)": {
        "notice": "Triggered when minimum stake amount is updated"
      },
      "Staked(uint256,address,uint256,uint256)": {
        "notice": "Triggered when a user stakes VANA to an entity"
      },
      "Unstaked(uint256,address,uint256,uint256)": {
        "notice": "Triggered when a user unstakes VANA from an entity"
      }
    },
    "kind": "user",
    "methods": {
      "initialize(address,address,uint256)": {
        "notice": "Initialize the contract"
      },
      "registerEntityStake(uint256,address,uint256)": {
        "notice": "Register stake for a new entity (called by VanaPoolEntity contract)"
      },
      "stake(uint256,address,uint256)": {
        "notice": "Stake VANA into a specific entity and allocate it to a recipient"
      },
      "stakerEntities(address,uint256)": {
        "notice": "Returns staker info for a specific entity"
      },
      "unstake(uint256,uint256,uint256)": {
        "notice": "Unstake VANA from a specific entity"
      },
      "updateMinStakeAmount(uint256)": {
        "notice": "Updates the minimum stake amount"
      },
      "updateTrustedForwarder(address)": {
        "notice": "Update the trusted forwarder"
      },
      "updateVanaPoolEntity(address)": {
        "notice": "Update the VanaPoolEntity contract address"
      },
      "updateVanaPoolTreasury(address)": {
        "notice": "Update the VanaPoolTreasury contract"
      },
      "version()": {
        "notice": "Returns the version of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4158,
        "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4162,
        "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
        "label": "vanaPoolEntity",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVanaPoolEntity)3031"
      },
      {
        "astId": 4166,
        "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
        "label": "vanaPoolTreasury",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVanaPoolTreasury)4208"
      },
      {
        "astId": 4169,
        "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4172,
        "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
        "label": "_activeStakersList",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)2546_storage"
      },
      {
        "astId": 4177,
        "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
        "label": "_stakers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Staker)4024_storage)"
      },
      {
        "astId": 4180,
        "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
        "label": "_inactiveStakersList",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)2546_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVanaPoolEntity)3031": {
        "encoding": "inplace",
        "label": "contract IVanaPoolEntity",
        "numberOfBytes": "20"
      },
      "t_contract(IVanaPoolTreasury)4208": {
        "encoding": "inplace",
        "label": "contract IVanaPoolTreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Staker)4024_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IVanaPoolStaking.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)4024_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(StakerEntity)4018_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVanaPoolStaking.StakerEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(StakerEntity)4018_storage"
      },
      "t_struct(AddressSet)2546_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2545,
            "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2231_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2231_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2226,
            "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2230,
            "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Staker)4024_storage": {
        "encoding": "inplace",
        "label": "struct IVanaPoolStaking.Staker",
        "members": [
          {
            "astId": 4023,
            "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
            "label": "entities",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(StakerEntity)4018_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakerEntity)4018_storage": {
        "encoding": "inplace",
        "label": "struct IVanaPoolStaking.StakerEntity",
        "members": [
          {
            "astId": 4017,
            "contract": "contracts/vanaPoolStaking/VanaPoolStakingImplementation.sol:VanaPoolStakingImplementation",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}