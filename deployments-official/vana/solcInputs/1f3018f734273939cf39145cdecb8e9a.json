{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n *\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\n * function only accessible if `msg.data.length == 0`.\n *\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\n * recovery.\n */\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /**\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\n     * invoke functions on this contract on behalf of other accounts.\n     *\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\n     */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder_) {\n        _trustedForwarder = trustedForwarder_;\n    }\n\n    /**\n     * @dev Returns the address of the trusted forwarder.\n     */\n    function trustedForwarder() public view virtual returns (address) {\n        return _trustedForwarder;\n    }\n\n    /**\n     * @dev Indicates whether any particular address is the trusted forwarder.\n     */\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder();\n    }\n\n    /**\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgSender() internal view virtual override returns (address) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    /**\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return msg.data[:calldataLength - contextSuffixLength];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    /**\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\n     */\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\n        return 20;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/utils/IVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n */\ninterface IVotes {\n    /**\n     * @dev The signature used has expired.\n     */\n    error VotesExpiredSignature(uint256 expiry);\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     */\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "@openzeppelin/contracts/governance/utils/Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/Votes.sol)\npragma solidity ^0.8.20;\n\nimport {IERC5805} from \"../../interfaces/IERC5805.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Nonces} from \"../../utils/Nonces.sol\";\nimport {EIP712} from \"../../utils/cryptography/EIP712.sol\";\nimport {Checkpoints} from \"../../utils/structs/Checkpoints.sol\";\nimport {SafeCast} from \"../../utils/math/SafeCast.sol\";\nimport {ECDSA} from \"../../utils/cryptography/ECDSA.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\n/**\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\n * \"representative\" that will pool delegated voting units from different accounts and can then use it to vote in\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\n *\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\n * example, see {ERC721Votes}.\n *\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\n * cost of this history tracking optional.\n *\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\n * previous example, it would be included in {ERC721-_update}).\n */\nabstract contract Votes is Context, EIP712, Nonces, IERC5805 {\n    using Checkpoints for Checkpoints.Trace208;\n\n    bytes32 private constant DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address account => address) private _delegatee;\n\n    mapping(address delegatee => Checkpoints.Trace208) private _delegateCheckpoints;\n\n    Checkpoints.Trace208 private _totalCheckpoints;\n\n    /**\n     * @dev The clock was incorrectly modified.\n     */\n    error ERC6372InconsistentClock();\n\n    /**\n     * @dev Lookup to future votes is not available.\n     */\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\n\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\n     */\n    function clock() public view virtual returns (uint48) {\n        return Time.blockNumber();\n    }\n\n    /**\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual returns (string memory) {\n        // Check that the clock was not modified\n        if (clock() != Time.blockNumber()) {\n            revert ERC6372InconsistentClock();\n        }\n        return \"mode=blocknumber&from=default\";\n    }\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) public view virtual returns (uint256) {\n        return _delegateCheckpoints[account].latest();\n    }\n\n    /**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\n        uint48 currentTimepoint = clock();\n        if (timepoint >= currentTimepoint) {\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\n        }\n        return _delegateCheckpoints[account].upperLookupRecent(SafeCast.toUint48(timepoint));\n    }\n\n    /**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\n        uint48 currentTimepoint = clock();\n        if (timepoint >= currentTimepoint) {\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\n        }\n        return _totalCheckpoints.upperLookupRecent(SafeCast.toUint48(timepoint));\n    }\n\n    /**\n     * @dev Returns the current total supply of votes.\n     */\n    function _getTotalSupply() internal view virtual returns (uint256) {\n        return _totalCheckpoints.latest();\n    }\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegatee[account];\n    }\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        address account = _msgSender();\n        _delegate(account, delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > expiry) {\n            revert VotesExpiredSignature(expiry);\n        }\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        _useCheckedNonce(signer, nonce);\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n    function _delegate(address account, address delegatee) internal virtual {\n        address oldDelegate = delegates(account);\n        _delegatee[account] = delegatee;\n\n        emit DelegateChanged(account, oldDelegate, delegatee);\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\n    }\n\n    /**\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\n     */\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\n        if (from == address(0)) {\n            _push(_totalCheckpoints, _add, SafeCast.toUint208(amount));\n        }\n        if (to == address(0)) {\n            _push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount));\n        }\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Moves delegated votes from one delegate to another.\n     */\n    function _moveDelegateVotes(address from, address to, uint256 amount) private {\n        if (from != to && amount > 0) {\n            if (from != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[from],\n                    _subtract,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(from, oldValue, newValue);\n            }\n            if (to != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[to],\n                    _add,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(to, oldValue, newValue);\n            }\n        }\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\n        return SafeCast.toUint32(_delegateCheckpoints[account].length());\n    }\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function _checkpoints(\n        address account,\n        uint32 pos\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _delegateCheckpoints[account].at(pos);\n    }\n\n    function _push(\n        Checkpoints.Trace208 storage store,\n        function(uint208, uint208) view returns (uint208) op,\n        uint208 delta\n    ) private returns (uint208, uint208) {\n        return store.push(clock(), op(store.latest(), delta));\n    }\n\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\n        return a + b;\n    }\n\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\n        return a - b;\n    }\n\n    /**\n     * @dev Must return the voting units held by an account.\n     */\n    function _getVotingUnits(address) internal view virtual returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5805.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\n\npragma solidity ^0.8.20;\n\nimport {IVotes} from \"../governance/utils/IVotes.sol\";\nimport {IERC6372} from \"./IERC6372.sol\";\n\ninterface IERC5805 is IERC6372, IVotes {}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC6372.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC6372 {\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\n     */\n    function clock() external view returns (uint48);\n\n    /**\n     * @dev Description of the clock\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Votes} from \"../../../governance/utils/Votes.sol\";\nimport {Checkpoints} from \"../../../utils/structs/Checkpoints.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n */\nabstract contract ERC20Votes is ERC20, Votes {\n    /**\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\n     */\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\n     *\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\n     * so that checkpoints can be stored in the Trace208 structure used by {{Votes}}. Increasing this value will not\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\n     * {_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\n     * returned.\n     */\n    function _maxSupply() internal view virtual returns (uint256) {\n        return type(uint208).max;\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n        if (from == address(0)) {\n            uint256 supply = totalSupply();\n            uint256 cap = _maxSupply();\n            if (supply > cap) {\n                revert ERC20ExceededSafeSupply(supply, cap);\n            }\n        }\n        _transferVotingUnits(from, to, value);\n    }\n\n    /**\n     * @dev Returns the voting units of an `account`.\n     *\n     * WARNING: Overriding this function may compromise the internal vote accounting.\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\n     */\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\n        return balanceOf(account);\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return _numCheckpoints(account);\n    }\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _checkpoints(account, pos);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Nonces.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/Checkpoints.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\n\n/**\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n */\nlibrary Checkpoints {\n    /**\n     * @dev A value was attempted to be inserted on a past checkpoint.\n     */\n    error CheckpointUnorderedInsertion();\n\n    struct Trace224 {\n        Checkpoint224[] _checkpoints;\n    }\n\n    struct Checkpoint224 {\n        uint32 _key;\n        uint224 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\n     * library.\n     */\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace224 storage self) internal view returns (uint224) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace224 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            if (last._key > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint224({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint224({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\n     * exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint224[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint224 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace208 {\n        Checkpoint208[] _checkpoints;\n    }\n\n    struct Checkpoint208 {\n        uint48 _key;\n        uint208 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\n     * library.\n     */\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace208 storage self) internal view returns (uint208) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace208 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            if (last._key > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint208({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint208({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\n     * exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint208[] storage self,\n        uint48 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint208[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint208 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace160 {\n        Checkpoint160[] _checkpoints;\n    }\n\n    struct Checkpoint160 {\n        uint96 _key;\n        uint160 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     *\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\n     * library.\n     */\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\n     * there is none.\n     */\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     */\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\n     * if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high\n     * keys).\n     */\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace160 storage self) internal view returns (uint160) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace160 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Returns checkpoint at given position.\n     */\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\n        return self._checkpoints[pos];\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            if (last._key > key) {\n                revert CheckpointUnorderedInsertion();\n            }\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint160({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint160({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\n     * `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\n     * exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint160[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint160 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/types/Time.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {SafeCast} from \"../math/SafeCast.sol\";\n\n/**\n * @dev This library provides helpers for manipulating time-related objects.\n *\n * It uses the following types:\n * - `uint48` for timepoints\n * - `uint32` for durations\n *\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n * - additional helper functions\n */\nlibrary Time {\n    using Time for *;\n\n    /**\n     * @dev Get the block timestamp as a Timepoint.\n     */\n    function timestamp() internal view returns (uint48) {\n        return SafeCast.toUint48(block.timestamp);\n    }\n\n    /**\n     * @dev Get the block number as a Timepoint.\n     */\n    function blockNumber() internal view returns (uint48) {\n        return SafeCast.toUint48(block.number);\n    }\n\n    // ==================================================== Delay =====================================================\n    /**\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\n     * future. The \"effect\" timepoint describes when the transitions happens from the \"old\" value to the \"new\" value.\n     * This allows updating the delay applied to some operation while keeping some guarantees.\n     *\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\n     * still apply for some time.\n     *\n     *\n     * The `Delay` type is 112 bits long, and packs the following:\n     *\n     * ```\n     *   | [uint48]: effect date (timepoint)\n     *   |           | [uint32]: value before (duration)\n     *   ↓           ↓       ↓ [uint32]: value after (duration)\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\n     * ```\n     *\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\n     * supported.\n     */\n    type Delay is uint112;\n\n    /**\n     * @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature\n     */\n    function toDelay(uint32 duration) internal pure returns (Delay) {\n        return Delay.wrap(duration);\n    }\n\n    /**\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\n     */\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n     * effect timepoint is 0, then the pending value should not be considered.\n     */\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\n        return _getFullAt(self, timestamp());\n    }\n\n    /**\n     * @dev Get the current value.\n     */\n    function get(Delay self) internal view returns (uint32) {\n        (uint32 delay, , ) = self.getFull();\n        return delay;\n    }\n\n    /**\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n     * new delay becomes effective.\n     */\n    function withUpdate(\n        Delay self,\n        uint32 newValue,\n        uint32 minSetback\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\n        uint32 value = self.get();\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\n        effect = timestamp() + setback;\n        return (pack(value, newValue, effect), effect);\n    }\n\n    /**\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\n     */\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        uint112 raw = Delay.unwrap(self);\n\n        valueAfter = uint32(raw);\n        valueBefore = uint32(raw >> 32);\n        effect = uint48(raw >> 64);\n\n        return (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev pack the components into a Delay object.\n     */\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\n    }\n}\n"
    },
    "contracts/mocks/root/DLPRootImplementationV2Mock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.24;\n\nimport {DLPRootImplementation} from \"../../root/DLPRootImplementation.sol\";\n\ncontract DLPRootImplementationV2Mock is DLPRootImplementation {\n    /**\n     * @notice Upgrade the contract\n     * This function is required by OpenZeppelin's UUPSUpgradeable\n     *\n     * @param newImplementation                  new implementation\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    /**\n     * return the version of the contract\n     */\n    function version() external pure virtual override returns (uint256) {\n        return 2;\n    }\n\n    /**\n     * @notice Tests the contract upgradeability\n     */\n    function test() external pure returns (string memory) {\n        return \"test\";\n    }\n}\n"
    },
    "contracts/mocks/rootCore/DLPRootCoreImplementationV2Mock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.24;\n\nimport {DLPRootCoreImplementation} from \"../../rootCore/DLPRootCoreImplementation.sol\";\n\ncontract DLPRootCoreImplementationV2Mock is DLPRootCoreImplementation {\n    /**\n     * @notice Upgrade the contract\n     * This function is required by OpenZeppelin's UUPSUpgradeable\n     *\n     * @param newImplementation                  new implementation\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    /**\n     * return the version of the contract\n     */\n    function version() external pure virtual override returns (uint256) {\n        return 2;\n    }\n\n    /**\n     * @notice Tests the contract upgradeability\n     */\n    function test() external pure returns (string memory) {\n        return \"test\";\n    }\n}\n"
    },
    "contracts/mocks/rootMetrics/DLPRootMetricsImplementationV2Mock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.24;\n\nimport {DLPRootMetricsImplementation} from \"../../rootMetrics/DLPRootMetricsImplementation.sol\";\n\ncontract DLPRootMetricsImplementationV2Mock is DLPRootMetricsImplementation {\n    /**\n     * @notice Upgrade the contract\n     * This function is required by OpenZeppelin's UUPSUpgradeable\n     *\n     * @param newImplementation                  new implementation\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    /**\n     * return the version of the contract\n     */\n    function version() external pure virtual override returns (uint256) {\n        return 2;\n    }\n\n    /**\n     * @notice Tests the contract upgradeability\n     */\n    function test() external pure returns (string memory) {\n        return \"test\";\n    }\n}\n"
    },
    "contracts/mocks/rootTreasury/DLPRootTreasuryImplementationV2Mock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.24;\n\nimport {DLPRootTreasuryImplementation} from \"../../rootTreasury/DLPRootTreasuryImplementation.sol\";\n\ncontract DLPRootTreasuryImplementationV2Mock is DLPRootTreasuryImplementation {\n    /**\n     * @notice Upgrade the contract\n     * This function is required by OpenZeppelin's UUPSUpgradeable\n     *\n     * @param newImplementation                  new implementation\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    /**\n     * return the version of the contract\n     */\n    function version() external pure virtual override returns (uint256) {\n        return 2;\n    }\n\n    /**\n     * @notice Tests the contract upgradeability\n     */\n    function test() external pure returns (string memory) {\n        return \"test\";\n    }\n}\n"
    },
    "contracts/root/DLPRootImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"./interfaces/DLPRootStorageV1.sol\";\n\ncontract DLPRootImplementation is\n    UUPSUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    ERC2771ContextUpgradeable,\n    DLPRootStorageV1\n{\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Checkpoints for Checkpoints.Trace208;\n\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n\n    uint256 public constant NEW_MULTIPLIER_EPOCH = 3;\n\n    event MinStakeAmountUpdated(uint256 newMinStakeAmount);\n    event StakeWithdrawalDelayUpdated(uint256 newStakeWithdrawalDelay);\n    event RewardClaimDelayUpdated(uint256 newRewardClaimDelay);\n    event StakeCreated(uint256 stakeId, address indexed staker, uint256 indexed dlpId, uint256 amount);\n    event StakeClosed(uint256 indexed stakeId);\n    event StakeWithdrawn(uint256 indexed stakeId);\n    event StakeMigrated(uint256 oldStakeId, uint256 newStakeId, uint256 indexed newDlpId, uint256 newAmount);\n    event StakeRewardClaimed(uint256 indexed stakeId, uint256 indexed epochId, uint256 amount, bool isFinal);\n\n    // Custom errors\n    error InvalidParam();\n    error InvalidStakeAmount();\n    error StakeAlreadyWithdrawn();\n    error StakeNotClosed();\n    error StakeAlreadyClosed();\n    error StakeWithdrawalTooEarly();\n    error InvalidDlpId();\n    error InvalidDlpStatus();\n    error InvalidAddress();\n    error NotStakeOwner();\n    error NothingToClaim();\n    error InvalidStakersPercentage();\n    error TransferFailed();\n    error EpochNotEnded();\n    error LastEpochMustBeFinalised();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() ERC2771ContextUpgradeable(address(0)) {\n        _disableInitializers();\n    }\n\n    function initialize(address ownerAddress) external initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n        __ReentrancyGuard_init();\n        __Pausable_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    function _msgSender()\n        internal\n        view\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\n        returns (address sender)\n    {\n        return ERC2771ContextUpgradeable._msgSender();\n    }\n\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\n        return ERC2771ContextUpgradeable._msgData();\n    }\n\n    function _contextSuffixLength()\n        internal\n        view\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\n        returns (uint256)\n    {\n        return ERC2771ContextUpgradeable._contextSuffixLength();\n    }\n\n    function _checkRole(bytes32 role) internal view override {\n        _checkRole(role, msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the trusted forwarder.\n     */\n    function trustedForwarder() public view virtual override returns (address) {\n        return _trustedForwarder;\n    }\n\n    function version() external pure virtual override returns (uint256) {\n        return 4;\n    }\n\n    function stakeWithdrawalDelay() public view returns (uint256) {\n        return _stakeWithdrawalDelayCheckpoints.latest();\n    }\n\n    function rewardClaimDelay() public view returns (uint256) {\n        return _rewardClaimDelayCheckpoints.latest();\n    }\n\n    function stakes(uint256 stakeId) external view override returns (StakeInfo memory) {\n        Stake storage stake = _stakes[stakeId];\n\n        return\n            StakeInfo({\n                id: stakeId,\n                stakerAddress: stake.stakerAddress,\n                dlpId: stake.dlpId,\n                amount: stake.amount,\n                startBlock: stake.startBlock,\n                withdrawn: stake.withdrawn,\n                endBlock: stake.endBlock,\n                lastClaimedEpochId: stake.lastClaimedIndexEpochId\n            });\n    }\n\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view override returns (uint256) {\n        return _stakes[stakeId].claimedAmounts[epochId];\n    }\n\n    function stakersListCount() external view returns (uint256) {\n        return _stakersList.length();\n    }\n    function stakersListAt(uint256 index) external view returns (address) {\n        return _stakersList.at(index);\n    }\n\n    function stakerDlpsListCount(address staker) external view override returns (uint256) {\n        return _stakers[staker].dlpIds.length();\n    }\n\n    function stakerDlpsListAt(address staker, uint256 index) external view override returns (uint256) {\n        return _stakers[staker].dlpIds.at(index);\n    }\n\n    function stakerDlpsListValues(address staker) external view override returns (uint256[] memory) {\n        return _stakers[staker].dlpIds.values();\n    }\n\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256) {\n        return _stakers[stakerAddress].stakeIds.length();\n    }\n\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256) {\n        return _stakers[stakerAddress].stakeIds.at(index);\n    }\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory) {\n        return _stakers[stakerAddress].stakeIds.values();\n    }\n\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256) {\n        return _stakers[stakerAddress].totalStakeAmount;\n    }\n\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256) {\n        return _stakers[stakerAddress].dlpStakeAmounts[dlpId];\n    }\n\n    /**\n     * @notice Calculates claimable rewards for a stake\n     * @dev Takes into account stake duration, score, and reward distribution\n     * @dev This method is not marked as view because is using a method that modifies state\n     * to call it as a view, please using static call\n     */\n    function calculateStakeClaimableAmount(uint256 stakeId) external override returns (uint256) {\n        return _calculateStakeRewardUntilEpoch(stakeId, dlpRootEpoch.epochsCount() - 1, false);\n    }\n\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\n        _unpause();\n    }\n\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external override onlyRole(MAINTAINER_ROLE) {\n        if (newMinStakeAmount > dlpRootCore.minDlpRegistrationStake()) {\n            revert InvalidParam();\n        }\n\n        minStakeAmount = newMinStakeAmount;\n        emit MinStakeAmountUpdated(newMinStakeAmount);\n    }\n\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external override onlyRole(MAINTAINER_ROLE) {\n        _checkpointPush(_stakeWithdrawalDelayCheckpoints, newStakeWithdrawalDelay);\n        emit StakeWithdrawalDelayUpdated(newStakeWithdrawalDelay);\n    }\n\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external override onlyRole(MAINTAINER_ROLE) {\n        _checkpointPush(_rewardClaimDelayCheckpoints, newRewardClaimDelay);\n        emit RewardClaimDelayUpdated(newRewardClaimDelay);\n    }\n\n    function updateTrustedForwarder(address trustedForwarderAddress) external onlyRole(MAINTAINER_ROLE) {\n        _trustedForwarder = trustedForwarderAddress;\n    }\n\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external override onlyRole(MAINTAINER_ROLE) {\n        dlpRootMetrics = IDLPRootMetrics(newDlpRootMetricsAddress);\n    }\n\n    function updateDlpRootCore(address newDlpRootCoreAddress) external override onlyRole(MAINTAINER_ROLE) {\n        dlpRootCore = IDLPRootCore(newDlpRootCoreAddress);\n    }\n    function updateDlpRootEpoch(address newDlpRootEpochAddress) external override onlyRole(MAINTAINER_ROLE) {\n        dlpRootEpoch = IDLPRootEpoch(newDlpRootEpochAddress);\n    }\n\n    function updateDlpRootRewardsTreasury(\n        address newDlpRootRewardsTreasuryAddress\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        dlpRootRewardsTreasury = IDLPRootTreasury(newDlpRootRewardsTreasuryAddress);\n    }\n\n    function updateDlpRootStakesTreasury(\n        address newDlpRootStakesTreasuryAddress\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        dlpRootStakesTreasury = IDLPRootTreasury(newDlpRootStakesTreasuryAddress);\n    }\n\n    function createStake(uint256 dlpId) external payable override nonReentrant whenNotPaused {\n        dlpRootEpoch.createEpochs();\n\n        _createStake(_msgSender(), dlpId, msg.value, block.number);\n    }\n\n    function createStakeOnBehalf(\n        uint256 dlpId,\n        address stakeOwner\n    ) external payable override nonReentrant whenNotPaused {\n        dlpRootEpoch.createEpochs();\n\n        _createStake(stakeOwner, dlpId, msg.value, block.number);\n    }\n\n    /**\n     * @notice Closes multiple stakes\n     */\n    function closeStakes(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\n        dlpRootEpoch.createEpochs();\n        for (uint256 i = 0; i < stakeIds.length; ) {\n            _closeStake(_msgSender(), stakeIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Withdraws multiple closed stakes\n     */\n    function withdrawStakes(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\n        dlpRootEpoch.createEpochs();\n        for (uint256 i = 0; i < stakeIds.length; ) {\n            _withdrawStake(_msgSender(), stakeIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function migrateStake(\n        uint256 stakeId,\n        uint256 newDlpId,\n        uint256 newAmount\n    ) external override nonReentrant whenNotPaused {\n        dlpRootEpoch.createEpochs();\n\n        Stake storage stake = _stakes[stakeId];\n\n        if (newDlpId != stake.dlpId) {\n            revert InvalidDlpId();\n        }\n\n        if (newAmount > stake.amount) {\n            revert InvalidStakeAmount();\n        }\n\n        stake.movedAmount = newAmount;\n        _closeStake(_msgSender(), stakeId);\n\n        _createStake(_msgSender(), newDlpId, newAmount, stake.startBlock);\n\n        emit StakeMigrated(stakeId, stakesCount, newDlpId, newAmount);\n    }\n\n    /**\n     * @notice Claims rewards for multiple stakes\n     */\n    function claimStakesReward(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\n        dlpRootEpoch.createEpochs();\n\n        for (uint256 i = 0; i < stakeIds.length; ) {\n            _claimStakeRewardUntilEpoch(stakeIds[i], dlpRootEpoch.epochsCount() - 1);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Claims rewards for a stake up to specified epoch\n     */\n    function claimStakeRewardUntilEpoch(\n        uint256 stakeId,\n        uint256 lastEpochToClaim\n    ) external override nonReentrant whenNotPaused {\n        dlpRootEpoch.createEpochs();\n        uint256 epochsCount = dlpRootEpoch.epochsCount();\n        uint256 maxEpoch = lastEpochToClaim < epochsCount - 1 ? lastEpochToClaim : epochsCount - 1;\n        _claimStakeRewardUntilEpoch(stakeId, maxEpoch);\n    }\n\n    /**\n     * @notice Calculates stake score based on amount and duration\n     */\n    function calculateStakeScore(\n        uint256 stakeAmount,\n        uint256 stakeStartBlock,\n        uint256 blockNumber\n    ) public view override returns (uint256) {\n        uint256 daySize = dlpRootEpoch.daySize();\n        uint256 daysStaked = (blockNumber - stakeStartBlock) / daySize;\n        // changed the multiplier formula but we want to keep the same behavior for stakes before epoch3\n        if (stakeStartBlock <= dlpRootEpoch.epochs(NEW_MULTIPLIER_EPOCH - 1).endBlock) {\n            daysStaked += dlpRootEpoch.epochSize() / daySize - 1;\n        }\n        return (stakeAmount * dlpRootMetrics.getMultiplier(daysStaked)) / 10000;\n    }\n\n    /**\n     * @notice Calculates reward for a stake up to specified epoch\n     */\n    function _calculateStakeRewardUntilEpoch(\n        uint256 stakeId,\n        uint256 lastEpochToClaim,\n        bool isClaim\n    ) internal returns (uint256) {\n        Stake storage stake = _stakes[stakeId];\n\n        uint256 totalRewardAmount;\n        uint256 epochToClaim = stake.lastClaimedIndexEpochId + 1;\n\n        while (epochToClaim <= lastEpochToClaim) {\n            totalRewardAmount += _calculateStakeRewardByEpoch(stakeId, epochToClaim, isClaim);\n\n            ++epochToClaim;\n        }\n\n        return totalRewardAmount;\n    }\n\n    /**\n     * @notice Calculates reward for a stake up to specified epoch\n     */\n    function _calculateStakeRewardByEpoch(uint256 stakeId, uint256 epochId, bool isClaim) internal returns (uint256) {\n        Stake storage stake = _stakes[stakeId];\n        uint256 epochToClaim = stake.lastClaimedIndexEpochId + 1;\n        uint256 rewardClaimDelayTmp = rewardClaimDelay();\n\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRootEpoch.epochs(epochId);\n        IDLPRootEpoch.EpochDlpInfo memory epochDlp = dlpRootEpoch.epochDlps(epochId, stake.dlpId);\n\n        if (\n            epochId == 0 ||\n            epochDlp.totalStakesScore == 0 ||\n            stake.startBlock > epoch.endBlock ||\n            (stake.endBlock > 0 && epoch.endBlock > stake.endBlock)\n        ) {\n            return 0;\n        }\n\n        uint256 stakeScore = calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock);\n\n        uint256 rewardAmount = (epochDlp.stakersRewardAmount * stakeScore) / epochDlp.totalStakesScore;\n\n        uint256 numberOfBlocks = block.number - epoch.endBlock;\n\n        bool fullRewardAmount = true;\n\n        if (rewardClaimDelayTmp > 0 && numberOfBlocks < rewardClaimDelayTmp) {\n            rewardAmount = (rewardAmount * numberOfBlocks) / rewardClaimDelayTmp;\n            fullRewardAmount = false;\n        }\n\n        if (stake.claimedAmounts[epochId] >= rewardAmount) {\n            return 0;\n        }\n\n        uint256 claimableAmount = rewardAmount - stake.claimedAmounts[epochId];\n        if (isClaim) {\n            stake.claimedAmounts[epochId] = rewardAmount;\n            emit StakeRewardClaimed(stakeId, epochId, rewardAmount, fullRewardAmount);\n\n            if (fullRewardAmount) {\n                stake.lastClaimedIndexEpochId = epochToClaim;\n            }\n        }\n\n        return claimableAmount;\n    }\n\n    /**\n     * @notice Creates a new stake for a DLP\n     * @dev Validates stake amount and DLP status before creating\n     */\n    function _createStake(address stakerAddress, uint256 dlpId, uint256 amount, uint256 startBlock) internal {\n        if (stakerAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (amount < minStakeAmount) {\n            revert InvalidStakeAmount();\n        }\n\n        IDLPRootCore.DlpInfo memory dlp = dlpRootCore.dlps(dlpId);\n\n        if (dlp.status == IDLPRootCore.DlpStatus.None || dlp.status == IDLPRootCore.DlpStatus.Deregistered) {\n            revert InvalidDlpStatus();\n        }\n\n        uint256 epochsCount = dlpRootEpoch.epochsCount();\n\n        Stake storage stake = _stakes[++stakesCount];\n        stake.amount = amount;\n        stake.startBlock = startBlock;\n        stake.stakerAddress = stakerAddress;\n        stake.dlpId = dlpId;\n        stake.lastClaimedIndexEpochId = epochsCount > 1 ? epochsCount - 1 : 0;\n\n        Staker storage staker = _stakers[stakerAddress];\n        staker.dlpIds.add(dlpId);\n        staker.dlpStakeAmounts[dlpId] += amount;\n        staker.stakeIds.add(stakesCount);\n        staker.totalStakeAmount += amount;\n\n        _stakersList.add(stakerAddress);\n\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRootEpoch.epochs(epochsCount);\n        if (startBlock >= epoch.startBlock && epochsCount >= NEW_MULTIPLIER_EPOCH) {\n            // we know that amount > calculateStakeScore(amount, startBlock, _epochs[epochsCount].endBlock\n            // because the multiplier during the current epoch is less than 10000\n            dlpRootMetrics.updateEpochDlpStakeAmountAdjustment(\n                epochsCount,\n                dlpId,\n                amount - calculateStakeScore(amount, startBlock, dlpRootEpoch.epochs(epochsCount).endBlock),\n                true\n            );\n        }\n\n        (bool success, ) = payable(address(dlpRootStakesTreasury)).call{value: msg.value}(\"\");\n\n        if (!success) {\n            revert TransferFailed();\n        }\n\n        emit StakeCreated(stakesCount, stakerAddress, dlpId, amount);\n\n        dlpRootCore.addDlpStake(dlpId, amount);\n\n        //this part is only for transition from dlRoot -> dlpRootCore\n        _checkpointAdd(_dlps[dlpId].stakeAmountCheckpoints, amount);\n    }\n\n    /**\n     * @notice Closes a stake and updates DLP status if needed\n     */\n    function _closeStake(address stakerAddress, uint256 stakeId) internal {\n        Stake storage stake = _stakes[stakeId];\n\n        if (stake.stakerAddress != stakerAddress) {\n            revert NotStakeOwner();\n        }\n\n        if (stake.endBlock != 0) {\n            revert StakeAlreadyClosed();\n        }\n\n        Staker storage staker = _stakers[stakerAddress];\n        staker.dlpStakeAmounts[stake.dlpId] -= stake.amount;\n        staker.totalStakeAmount -= stake.amount;\n\n        stake.endBlock = block.number;\n\n        uint256 epochsCount = dlpRootEpoch.epochsCount();\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRootEpoch.epochs(epochsCount);\n\n        //we need to subtract the epoch dlp stake amount adjustment if the stake was created and closed in the current epoch\n        if (epochsCount >= NEW_MULTIPLIER_EPOCH && stake.startBlock > epoch.startBlock) {\n            dlpRootMetrics.updateEpochDlpStakeAmountAdjustment(\n                epochsCount,\n                stake.dlpId,\n                stake.amount - calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock),\n                false\n            );\n        }\n\n        emit StakeClosed(stakeId);\n\n        dlpRootCore.removeDlpStake(stake.dlpId, stake.amount);\n\n        if (stakeWithdrawalDelay() == 0) {\n            _executeStakeWithdrawal(stakeId);\n        }\n\n        //this part is only for transition from dlRoot -> dlpRootCore\n        _checkpointAdd(_dlps[stake.dlpId].unstakeAmountCheckpoints, stake.amount);\n    }\n\n    /**\n     * @notice Withdraws a closed stake after delay period\n     */\n    function _withdrawStake(address stakerAddress, uint256 stakeId) internal {\n        Stake storage stake = _stakes[stakeId];\n\n        if (stake.stakerAddress != stakerAddress) {\n            revert NotStakeOwner();\n        }\n\n        if (stake.withdrawn) {\n            revert StakeAlreadyWithdrawn();\n        }\n\n        if (stake.endBlock == 0) {\n            revert StakeNotClosed();\n        }\n\n        if (stake.endBlock + stakeWithdrawalDelay() > block.number) {\n            revert StakeWithdrawalTooEarly();\n        }\n\n        _executeStakeWithdrawal(stakeId);\n    }\n\n    function _executeStakeWithdrawal(uint256 stakeId) internal {\n        Stake storage stake = _stakes[stakeId];\n\n        stake.withdrawn = true;\n\n        bool success = dlpRootStakesTreasury.transferVana(\n            payable(stake.stakerAddress),\n            stake.amount - stake.movedAmount\n        );\n        if (!success) {\n            revert TransferFailed();\n        }\n\n        emit StakeWithdrawn(stakeId);\n    }\n\n    /**\n     * @notice Claims reward for a stake up to specified epoch\n     * @dev Calculates and distributes rewards based on stake score\n     */\n    function _claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) internal {\n        uint256 totalRewardAmount = _calculateStakeRewardUntilEpoch(stakeId, lastEpochToClaim, true);\n\n        if (totalRewardAmount == 0) {\n            revert NothingToClaim();\n        }\n\n        Stake storage stake = _stakes[stakeId];\n\n        bool success = dlpRootRewardsTreasury.transferVana(payable(stake.stakerAddress), totalRewardAmount);\n        if (!success) {\n            revert TransferFailed();\n        }\n    }\n\n    /**\n     * @notice Helper function to add value to checkpoint\n     */\n    function _checkpointAdd(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\n        return store.push(uint48(block.number), store.latest() + uint208(delta));\n    }\n\n    /**\n     * @notice Helper function to set checkpoint value\n     */\n    function _checkpointPush(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\n        return store.push(uint48(block.number), uint208(delta));\n    }\n\n    function stakeEpochReward(uint256 stakeId, uint256 epochId) external view returns (uint256) {\n        Stake storage stake = _stakes[stakeId];\n\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRootEpoch.epochs(epochId);\n        IDLPRootEpoch.EpochDlpInfo memory epochDlp = dlpRootEpoch.epochDlps(epochId, stake.dlpId);\n\n        if (\n            epochId == 0 ||\n            epochDlp.totalStakesScore == 0 ||\n            stake.startBlock > epoch.endBlock ||\n            (stake.endBlock > 0 && epoch.endBlock > stake.endBlock)\n        ) {\n            return 0;\n        }\n\n        uint256 stakeScore = calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock);\n\n        return (epochDlp.stakersRewardAmount * stakeScore) / epochDlp.totalStakesScore;\n    }\n}\n"
    },
    "contracts/root/interfaces/DLPRootStorageV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"./IDLPRoot.sol\";\nimport \"@openzeppelin/contracts/utils/structs/Checkpoints.sol\";\nimport {IDLPRootDeprecated} from \"./IDLPRootDeprecated.sol\";\n\n/**\n * @notice For future upgrades, do not change DLPRootStorageV1. Create a new\n * contract which implements DLPRootStorageV1\n */\nabstract contract DLPRootStorageV1 is IDLPRoot, IDLPRootDeprecated {\n    address internal _trustedForwarder;\n    uint256 private eligibleDlpsLimit; // not used anymore\n    uint256 private epochDlpsLimit; // moved to DLPRootEpoch\n    uint256 public override minStakeAmount; // Minimum stake allowed\n    uint256 private minDlpStakersPercentage; // moved to DLPRootCore\n    uint256 private minDlpRegistrationStake; // moved to DLPRootCore\n    uint256 private dlpEligibilityThreshold; //moved to DLPRootCore\n    uint256 private dlpSubEligibilityThreshold; // moved to DLPRootCore\n\n    // Historical values tracked using checkpoints\n    Checkpoints.Trace208 internal _stakeWithdrawalDelayCheckpoints;\n    Checkpoints.Trace208 internal _rewardClaimDelayCheckpoints;\n\n    uint256 private epochRewardAmount; // moved to DLPRootEpoch\n    uint256 private epochSize; // moved to DLPRootEpoch\n    uint256 private daySize; // moved to DLPRootCore\n\n    // DLP management\n    uint256 private dlpsCount; // moved to DLPRootCore\n    mapping(uint256 dlpId => Dlp dlp) internal _dlps; // moved to DLPRootCore\n    mapping(address dlpAddress => uint256 dlpId) private dlpIds; // moved to DLPRootCore\n    EnumerableSet.UintSet private _eligibleDlpsList; // moved to DLPRootCore\n\n    // Epoch tracking\n    uint256 private epochsCount; // moved to DLPRootEpoch\n    mapping(uint256 epochId => Epoch epoch) private _epochs; // moved to DLPRootEpoch\n\n    // Staker management\n    EnumerableSet.AddressSet internal _stakersList;\n    mapping(address stakerAddress => Staker staker) internal _stakers;\n\n    // Stake tracking\n    uint256 public override stakesCount;\n    mapping(uint256 stakeId => Stake stake) internal _stakes;\n\n    uint256 private maxDlpStakersPercentage; // moved to DLPRootCore\n\n    mapping(string dlpName => uint256 dlpId) private dlpNameToId; // moved to DLPRootCore\n\n    IDLPRootMetrics public override dlpRootMetrics;\n    IDLPRootTreasury public override dlpRootRewardsTreasury;\n    IDLPRootTreasury public override dlpRootStakesTreasury;\n    IDLPRootCore public override dlpRootCore;\n    IDLPRootEpoch public override dlpRootEpoch;\n}\n"
    },
    "contracts/root/interfaces/IDLPRoot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {IDLPRootCore} from \"../../rootCore/interfaces/IDLPRootCore.sol\";\nimport {IDLPRootEpoch} from \"../../rootEpoch/interfaces/IDLPRootEpoch.sol\";\nimport {IDLPRootMetrics} from \"../../rootMetrics/interfaces/IDLPRootMetrics.sol\";\nimport {IDLPRootTreasury} from \"../../rootTreasury/interfaces/IDLPRootTreasury.sol\";\n\ninterface IDLPRoot {\n    struct Stake {\n        address stakerAddress;\n        uint256 dlpId;\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock; // 0 if active\n        bool withdrawn;\n        uint256 lastClaimedIndexEpochId; //todo: rename to lastClaimedEpochId\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\n        uint256 movedAmount; // Amount moved to new stake\n    }\n\n    struct Staker {\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\n        uint256 totalStakeAmount;\n    }\n\n    // View functions for contract state and configuration\n    function version() external pure returns (uint256);\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\n    function dlpRootCore() external view returns (IDLPRootCore);\n    function dlpRootEpoch() external view returns (IDLPRootEpoch);\n\n    // Additional view functions\n    function minStakeAmount() external view returns (uint256);\n    function stakeWithdrawalDelay() external view returns (uint256);\n    function rewardClaimDelay() external view returns (uint256);\n\n    function stakersListCount() external view returns (uint256);\n    function stakersListAt(uint256 index) external view returns (address);\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\n    function stakesCount() external view returns (uint256);\n\n    struct StakeInfo {\n        uint256 id;\n        address stakerAddress;\n        uint256 dlpId;\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock;\n        bool withdrawn;\n        uint256 lastClaimedEpochId;\n    }\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\n\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\n    function calculateStakeScore(\n        uint256 stakeAmount,\n        uint256 stakeStartBlock,\n        uint256 blockNumber\n    ) external view returns (uint256);\n\n    // Admin functions\n    function pause() external;\n    function unpause() external;\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\n    function updateDlpRootCore(address newDlpRootCoreAddress) external;\n    function updateDlpRootEpoch(address newDlpRootEpochAddress) external;\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\n\n    // Staking and rewards\n    function createStake(uint256 dlpId) external payable;\n    function createStakeOnBehalf(uint256 dlpId, address stakeOwner) external payable;\n    function closeStakes(uint256[] memory stakeIds) external;\n    function withdrawStakes(uint256[] memory stakeIds) external;\n    function migrateStake(uint256 stakeId, uint256 newDlpId, uint256 newAmount) external;\n    function claimStakesReward(uint256[] memory stakeIds) external;\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\n}\n"
    },
    "contracts/root/interfaces/IDLPRootDeprecated.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/structs/Checkpoints.sol\";\n\ninterface IDLPRootDeprecated {\n    enum DlpStatus {\n        None,\n        Registered,\n        Eligible, // Can participate in epochs\n        SubEligible, // Below threshold but above minimum\n        Deregistered\n    }\n\n    struct Dlp {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress; // Receives non-staker rewards\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\n        Checkpoints.Trace208 unstakeAmountCheckpoints; // Historical unstake amounts\n        uint256 epochIdsCount; // Number of participated epochs\n        mapping(uint256 index => uint256 epochIds) epochIds;\n        bool isVerified;\n    }\n\n    struct EpochDlp {\n        uint256 rewardAmount; // Rewards allocated to the DLP owner\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\n        uint256 totalStakesScore; // Sum of weighted stake scores\n        bool rewardClaimed; // True if reward has been claimed\n    }\n\n    struct Epoch {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 rewardAmount;\n        bool isFinalised;\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\n    }\n}\n"
    },
    "contracts/root/interfaces/IDLPRootOld.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/structs/Checkpoints.sol\";\nimport {IDLPRootMetrics} from \"../../rootMetrics/interfaces/IDLPRootMetrics.sol\";\nimport {IDLPRootTreasury} from \"../../rootTreasury/interfaces/IDLPRootTreasury.sol\";\n\ninterface IDLPRootOld {\n    // DLP lifecycle states from registration to deregistration\n    enum DlpStatus {\n        None,\n        Registered,\n        Eligible, // Can participate in epochs\n        SubEligible, // Below threshold but above minimum\n        Deregistered\n    }\n\n    struct Dlp {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress; // Receives non-staker rewards\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\n        Checkpoints.Trace208 unstakeAmountCheckpoints; // Historical unstake amounts\n        uint256 epochIdsCount; // Number of participated epochs\n        mapping(uint256 index => uint256 epochIds) epochIds;\n        bool isVerified;\n    }\n\n    struct EpochDlp {\n        uint256 rewardAmount; // Rewards allocated to the DLP owner\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\n        uint256 totalStakesScore; // Sum of weighted stake scores\n        bool rewardClaimed; // True if reward has been claimed\n    }\n\n    struct Epoch {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 rewardAmount;\n        bool isFinalised;\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\n    }\n\n    struct Stake {\n        address stakerAddress;\n        uint256 dlpId;\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock; // 0 if active\n        bool withdrawn;\n        uint256 lastClaimedIndexEpochId;\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\n    }\n\n    struct Staker {\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\n        uint256 totalStakeAmount;\n    }\n\n    // View functions for contract state and configuration\n    function version() external pure returns (uint256);\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\n    function epochDlpsLimit() external view returns (uint256);\n    function eligibleDlps() external view returns (uint256);\n    function epochSize() external view returns (uint256);\n    function daySize() external view returns (uint256);\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\n    function eligibleDlpsListCount() external view returns (uint256);\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\n    function epochsCount() external view returns (uint256);\n\n    // Read-only struct views\n    struct EpochInfo {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 rewardAmount;\n        bool isFinalised;\n        uint256[] dlpIds;\n    }\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\n\n    // Additional view functions\n    function minStakeAmount() external view returns (uint256);\n    function minDlpStakersPercentage() external view returns (uint256);\n    function maxDlpStakersPercentage() external view returns (uint256);\n    function minDlpRegistrationStake() external view returns (uint256);\n    function dlpEligibilityThreshold() external view returns (uint256);\n    function dlpSubEligibilityThreshold() external view returns (uint256);\n    function eligibleDlpsLimit() external view returns (uint256);\n    function stakeWithdrawalDelay() external view returns (uint256);\n    function rewardClaimDelay() external view returns (uint256);\n    function epochRewardAmount() external view returns (uint256);\n    function dlpsCount() external view returns (uint256);\n\n    struct DlpInfo {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address treasuryAddress;\n        uint256 stakersPercentage;\n        uint256 stakersPercentageEpoch;\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        uint256 stakeAmount;\n        uint256[] epochIds;\n        bool isVerified;\n    }\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\n    function dlpIds(address dlpAddress) external view returns (uint256);\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\n\n    struct DlpEpochInfo {\n        uint256 stakeAmount; // 0 if not a top DLP\n        bool isTopDlp; // In top DLPs list this epoch\n        uint256 rewardAmount; // 0 if not top DLP or epoch not finished\n        uint256 stakersPercentage; // 0 if not top DLP\n        uint256 totalStakesScore; // 0 if not top DLP\n        bool rewardClaimed;\n        uint256 stakersRewardAmount;\n    }\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view returns (DlpEpochInfo memory);\n    function stakersListCount() external view returns (uint256);\n    function stakersListAt(uint256 index) external view returns (address);\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\n    function stakesCount() external view returns (uint256);\n\n    struct StakeInfo {\n        uint256 id;\n        address stakerAddress;\n        uint256 dlpId;\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock;\n        bool withdrawn;\n        uint256 lastClaimedEpochId;\n    }\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\n\n    // Core functionality\n    function topDlpIds(uint256 numberOfDlps) external returns (uint256[] memory);\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\n    function calculateStakeScore(\n        uint256 stakeAmount,\n        uint256 stakeStartBlock,\n        uint256 blockNumber\n    ) external view returns (uint256);\n\n    struct DlpRewardApy {\n        uint256 dlpId;\n        uint256 APY; //annual percentage yield for stakers\n        uint256 EPY; //epoch percentage yield for stakers\n    }\n\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\n\n    // Admin functions\n    function pause() external;\n    function unpause() external;\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\n    function updateEpochSize(uint256 newEpochSize) external;\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\n    function updateDlpStakersPercentages(\n        uint256 newMinDlpStakersPercentage,\n        uint256 newMaxDlpStakersPercentage\n    ) external;\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\n    function updateDlpEligibilityThresholds(\n        uint256 newDlpSubEligibilityThreshold,\n        uint256 newDlpEligibilityThreshold\n    ) external;\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\n\n    struct EpochDlpsTotalStakesScore {\n        uint256 epochId;\n        uint256 dlpId;\n        uint256 totalStakesScore;\n    }\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\n\n    // Epoch management\n    function createEpochs() external;\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\n    struct EpochDlpReward {\n        uint256 dlpId;\n        uint256 rewardAmount;\n        uint256 stakersRewardAmount;\n    }\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\n\n    struct DlpRegistration {\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress;\n        uint256 stakersPercentage;\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n    }\n\n    // DLP lifecycle management\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\n    function updateDlpVerificationBlock(uint256 dlpId, bool isVerified) external;\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\n    function deregisterDlp(uint256 dlpId) external;\n\n    // Staking and rewards\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\n    function claimStakesReward(uint256[] memory stakeIds) external;\n    function createStake(uint256 dlpId) external payable;\n    function closeStakes(uint256[] memory stakeIds) external;\n    function withdrawStakes(uint256[] memory stakeIds) external;\n}\n"
    },
    "contracts/rootCore/DLPRootCoreImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"./interfaces/DLPRootCoreStorageV1.sol\";\nimport {IDLPRootOld} from \"../root/interfaces/IDLPRootOld.sol\";\n\ncontract DLPRootCoreImplementation is\n    UUPSUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    DLPRootCoreStorageV1\n{\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Checkpoints for Checkpoints.Trace208;\n\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    bytes32 public constant DLP_ROOT_ROLE = keccak256(\"DLP_ROOT_ROLE\");\n\n    uint256 public constant NEW_MULTIPLIER_EPOCH = 3;\n\n    // Key events for DLP lifecycle and operations\n    event DlpRegistered(\n        uint256 indexed dlpId,\n        address indexed dlpAddress,\n        address ownerAddress,\n        address treasuryAddress,\n        uint256 stakersPercentage,\n        string name,\n        string iconUrl,\n        string website,\n        string metadata\n    );\n\n    event DlpUpdated(\n        uint256 indexed dlpId,\n        address indexed dlpAddress,\n        address ownerAddress,\n        address treasuryAddress,\n        uint256 stakersPercentage,\n        string name,\n        string iconUrl,\n        string website,\n        string metadata\n    );\n\n    event DlpStatusUpdated(uint256 indexed dlpId, DlpStatus newStatus);\n    event DlpVerificationUpdated(uint256 indexed dlpId, bool verified);\n    event MinDlpStakersPercentageUpdated(uint256 newMinDlpStakersPercentage);\n    event MaxDlpStakersPercentageUpdated(uint256 newMaxDlpStakersPercentage);\n    event MinStakeAmountUpdated(uint256 newMinStakeAmount);\n    event DlpEligibilityThresholdUpdated(uint256 newDlpEligibilityThreshold);\n    event DlpSubEligibilityThresholdUpdated(uint256 newDlpSubEligibilityThreshold);\n    event MinDlpRegistrationStakeUpdated(uint256 newMinDlpRegistrationStake);\n\n    // Custom errors\n    error InvalidParam();\n    error InvalidStakeAmount();\n    error StakeAlreadyWithdrawn();\n    error StakeNotClosed();\n    error StakeAlreadyClosed();\n    error StakeWithdrawalTooEarly();\n    error InvalidDlpId();\n    error InvalidDlpStatus();\n    error InvalidAddress();\n    error InvalidName();\n    error NotDlpOwner();\n    error NotStakeOwner();\n    error NothingToClaim();\n    error InvalidStakersPercentage();\n    error DlpAddressCannotBeChanged();\n    error TransferFailed();\n    error EpochNotEnded();\n    error EpochDlpScoreAlreadySaved();\n    error EpochRewardsAlreadyDistributed();\n    error LastEpochMustBeFinalised();\n\n    modifier onlyDlpOwner(uint256 dlpId) {\n        if (_dlps[dlpId].ownerAddress != msg.sender) {\n            revert NotDlpOwner();\n        }\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address ownerAddress, address dlpRootAddress) external initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n        __ReentrancyGuard_init();\n        __Pausable_init();\n\n        dlpRoot = IDLPRoot(dlpRootAddress);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\n        _grantRole(MANAGER_ROLE, ownerAddress);\n        _grantRole(DLP_ROOT_ROLE, dlpRootAddress);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    function version() external pure virtual override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @notice Gets DLP information including current stake and status\n     */\n    function dlps(uint256 dlpId) public view override returns (DlpInfo memory) {\n        Dlp storage dlp = _dlps[dlpId];\n\n        uint256 epochsCount = _dlpRootEpoch().epochsCount();\n        return\n            DlpInfo({\n                id: dlp.id,\n                dlpAddress: dlp.dlpAddress,\n                ownerAddress: dlp.ownerAddress,\n                treasuryAddress: dlp.treasuryAddress,\n                stakersPercentage: dlp.stakersPercentageCheckpoints.latest(),\n                stakersPercentageEpoch: dlp.stakersPercentageCheckpoints.upperLookup(\n                    epochsCount > 0 ? uint48(epochsCount - 1) : 0\n                ),\n                name: dlp.name,\n                iconUrl: dlp.iconUrl,\n                website: dlp.website,\n                metadata: dlp.metadata,\n                status: dlp.status,\n                registrationBlockNumber: dlp.registrationBlockNumber,\n                stakeAmount: dlp.stakeAmountCheckpoints.latest(),\n                isVerified: dlp.isVerified\n            });\n    }\n\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view override returns (uint256) {\n        return _dlps[dlpId].stakeAmountCheckpoints.upperLookup(uint48(epochId));\n    }\n\n    function dlpsByAddress(address dlpAddress) external view override returns (DlpInfo memory) {\n        return dlps(dlpIds[dlpAddress]);\n    }\n\n    function dlpsByName(string calldata dlpName) external view override returns (DlpInfo memory) {\n        return dlps(dlpNameToId[dlpName]);\n    }\n\n    function eligibleDlpsListValues() external view override returns (uint256[] memory) {\n        return _eligibleDlpsList.values();\n    }\n\n    function eligibleDlpsListCount() external view override returns (uint256) {\n        return _eligibleDlpsList.length();\n    }\n\n    function eligibleDlpsListAt(uint256 index) external view override returns (uint256) {\n        return _eligibleDlpsList.at(index);\n    }\n\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\n        _unpause();\n    }\n\n    function updateDlpStakersPercentages(\n        uint256 newMinDlpStakersPercentage,\n        uint256 newMaxDlpStakersPercentage\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        if (newMinDlpStakersPercentage < 1e16 || newMinDlpStakersPercentage > newMaxDlpStakersPercentage) {\n            revert InvalidParam();\n        }\n\n        minDlpStakersPercentage = newMinDlpStakersPercentage;\n        maxDlpStakersPercentage = newMaxDlpStakersPercentage;\n\n        emit MinDlpStakersPercentageUpdated(newMinDlpStakersPercentage);\n        emit MaxDlpStakersPercentageUpdated(newMaxDlpStakersPercentage);\n\n        uint256 _dlpsCount = dlpsCount;\n        for (uint256 i = 1; i <= _dlpsCount; ) {\n            Dlp storage dlp = _dlps[i];\n            if (dlp.status != DlpStatus.Deregistered) {\n                uint256 stakersPercentage = dlp.stakersPercentageCheckpoints.latest();\n                if (stakersPercentage < newMinDlpStakersPercentage) {\n                    _checkpointPush(\n                        dlp.stakersPercentageCheckpoints,\n                        _dlpRootEpoch().epochsCount(),\n                        newMinDlpStakersPercentage\n                    );\n                    emit DlpUpdated(\n                        i,\n                        dlp.dlpAddress,\n                        dlp.ownerAddress,\n                        dlp.treasuryAddress,\n                        newMinDlpStakersPercentage,\n                        dlp.name,\n                        dlp.iconUrl,\n                        dlp.website,\n                        dlp.metadata\n                    );\n                } else if (stakersPercentage > newMaxDlpStakersPercentage) {\n                    _checkpointPush(\n                        dlp.stakersPercentageCheckpoints,\n                        _dlpRootEpoch().epochsCount(),\n                        newMaxDlpStakersPercentage\n                    );\n                    emit DlpUpdated(\n                        i,\n                        dlp.dlpAddress,\n                        dlp.ownerAddress,\n                        dlp.treasuryAddress,\n                        newMaxDlpStakersPercentage,\n                        dlp.name,\n                        dlp.iconUrl,\n                        dlp.website,\n                        dlp.metadata\n                    );\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function updateMinDlpRegistrationStake(\n        uint256 newMinDlpRegistrationStake\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        if (\n            dlpRoot.minStakeAmount() > newMinDlpRegistrationStake ||\n            newMinDlpRegistrationStake > dlpSubEligibilityThreshold\n        ) {\n            revert InvalidParam();\n        }\n        minDlpRegistrationStake = newMinDlpRegistrationStake;\n        emit MinDlpRegistrationStakeUpdated(newMinDlpRegistrationStake);\n    }\n\n    /**\n     * @notice Updates eligibility thresholds\n     */\n    function updateDlpEligibilityThresholds(\n        uint256 newDlpSubEligibilityThreshold,\n        uint256 newDlpEligibilityThreshold\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        if (newDlpSubEligibilityThreshold > newDlpEligibilityThreshold) {\n            revert InvalidParam();\n        }\n\n        dlpSubEligibilityThreshold = newDlpSubEligibilityThreshold;\n        dlpEligibilityThreshold = newDlpEligibilityThreshold;\n\n        emit DlpSubEligibilityThresholdUpdated(newDlpSubEligibilityThreshold);\n        emit DlpEligibilityThresholdUpdated(newDlpEligibilityThreshold);\n    }\n\n    function updateDlpRoot(address newDlpRootAddress) external override onlyRole(MAINTAINER_ROLE) {\n        dlpRoot = IDLPRoot(newDlpRootAddress);\n    }\n\n    /**\n     * @notice Registers a new DLP with initial stake\n     */\n    function registerDlp(\n        DlpRegistration calldata registrationInfo\n    ) external payable override whenNotPaused nonReentrant {\n        _dlpRootEpoch().createEpochs();\n        _registerDlp(registrationInfo);\n    }\n\n    function updateDlpVerificationBlock(uint256 dlpId, bool isVerified) external override onlyRole(MAINTAINER_ROLE) {\n        Dlp storage dlp = _dlps[dlpId];\n        dlp.isVerified = isVerified;\n\n        if (dlp.status == DlpStatus.None || dlp.status == DlpStatus.Deregistered) {\n            revert InvalidDlpStatus();\n        }\n\n        emit DlpVerificationUpdated(dlpId, isVerified);\n\n        if (dlp.stakeAmountCheckpoints.latest() >= dlpEligibilityThreshold) {\n            if (isVerified) {\n                _eligibleDlpsList.add(dlpId);\n                dlp.status = DlpStatus.Eligible;\n                emit DlpStatusUpdated(dlpId, DlpStatus.Eligible);\n            } else {\n                _eligibleDlpsList.remove(dlpId);\n                dlp.status = DlpStatus.Registered;\n                emit DlpStatusUpdated(dlpId, DlpStatus.Registered);\n            }\n        }\n    }\n\n    /**\n     * @notice Updates DLP information\n     * @dev Only DLP owner can update\n     */\n    function updateDlp(\n        uint256 dlpId,\n        DlpRegistration calldata dlpUpdateInfo\n    ) external override whenNotPaused nonReentrant onlyDlpOwner(dlpId) {\n        _dlpRootEpoch().createEpochs();\n\n        if (dlpUpdateInfo.ownerAddress == address(0) || dlpUpdateInfo.treasuryAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (\n            dlpUpdateInfo.stakersPercentage < minDlpStakersPercentage ||\n            dlpUpdateInfo.stakersPercentage > maxDlpStakersPercentage\n        ) {\n            revert InvalidStakersPercentage();\n        }\n\n        Dlp storage dlp = _dlps[dlpId];\n\n        //this validation will be removed in the future\n        if (dlp.dlpAddress != dlpUpdateInfo.dlpAddress) {\n            revert DlpAddressCannotBeChanged();\n        }\n\n        dlp.ownerAddress = dlpUpdateInfo.ownerAddress;\n        dlp.treasuryAddress = dlpUpdateInfo.treasuryAddress;\n        if (dlp.stakersPercentageCheckpoints.latest() != dlpUpdateInfo.stakersPercentage) {\n            _checkpointPush(\n                dlp.stakersPercentageCheckpoints,\n                _dlpRootEpoch().epochsCount(),\n                dlpUpdateInfo.stakersPercentage\n            );\n        }\n\n        if (keccak256(bytes(dlpUpdateInfo.name)) != keccak256(bytes(dlp.name))) {\n            if (dlpNameToId[dlpUpdateInfo.name] != 0 || !_validateDlpNameLength(dlpUpdateInfo.name)) {\n                revert InvalidName();\n            }\n\n            dlpNameToId[dlp.name] = 0;\n            dlpNameToId[dlpUpdateInfo.name] = dlpId;\n        }\n\n        dlp.name = dlpUpdateInfo.name;\n        dlp.iconUrl = dlpUpdateInfo.iconUrl;\n        dlp.website = dlpUpdateInfo.website;\n        dlp.metadata = dlpUpdateInfo.metadata;\n\n        dlpIds[dlpUpdateInfo.dlpAddress] = dlpId;\n\n        emit DlpUpdated(\n            dlpId,\n            dlpUpdateInfo.dlpAddress,\n            dlpUpdateInfo.ownerAddress,\n            dlpUpdateInfo.treasuryAddress,\n            dlpUpdateInfo.stakersPercentage,\n            dlpUpdateInfo.name,\n            dlpUpdateInfo.iconUrl,\n            dlpUpdateInfo.website,\n            dlpUpdateInfo.metadata\n        );\n    }\n\n    /**\n     * @notice Deregisters a DLP\n     * @dev Only owner can deregister, must be in valid status\n     */\n    function deregisterDlp(uint256 dlpId) external override whenNotPaused nonReentrant onlyDlpOwner(dlpId) {\n        _dlpRootEpoch().createEpochs();\n\n        Dlp storage dlp = _dlps[dlpId];\n\n        if (dlp.status == DlpStatus.None || dlp.status == DlpStatus.Deregistered) {\n            revert InvalidDlpStatus();\n        }\n\n        dlp.status = DlpStatus.Deregistered;\n        _eligibleDlpsList.remove(dlpId);\n\n        uint256 epochsCount = _dlpRootEpoch().epochsCount();\n        if (epochsCount > 1 && !_dlpRootEpoch().epochs(epochsCount - 1).isFinalised) {\n            revert LastEpochMustBeFinalised();\n        }\n\n        emit DlpStatusUpdated(dlpId, DlpStatus.Deregistered);\n    }\n\n    function addDlpStake(uint256 dlpId, uint256 amount) external override onlyRole(DLP_ROOT_ROLE) {\n        Dlp storage dlp = _dlps[dlpId];\n        _checkpointAdd(dlp.stakeAmountCheckpoints, _dlpRootEpoch().epochsCount(), amount);\n\n        // Check if DLP becomes eligible\n        if (\n            dlp.isVerified &&\n            (dlp.status == DlpStatus.Registered || dlp.status == DlpStatus.SubEligible) &&\n            dlp.stakeAmountCheckpoints.latest() >= dlpEligibilityThreshold\n        ) {\n            _eligibleDlpsList.add(dlpId);\n            dlp.status = DlpStatus.Eligible;\n\n            uint256 epochsCount = _dlpRootEpoch().epochsCount();\n            if (epochsCount > 1 && !_dlpRootEpoch().epochs(epochsCount - 1).isFinalised) {\n                revert LastEpochMustBeFinalised();\n            }\n\n            emit DlpStatusUpdated(dlpId, DlpStatus.Eligible);\n        }\n    }\n\n    function removeDlpStake(uint256 dlpId, uint256 amount) external override onlyRole(DLP_ROOT_ROLE) {\n        Dlp storage dlp = _dlps[dlpId];\n        _checkpointSub(dlp.stakeAmountCheckpoints, _dlpRootEpoch().epochsCount(), amount);\n\n        uint256 dlpStake = dlp.stakeAmountCheckpoints.latest();\n\n        // Update DLP status based on remaining stake\n        if (\n            dlpStake < dlpSubEligibilityThreshold &&\n            (dlp.status == DlpStatus.SubEligible || dlp.status == DlpStatus.Eligible)\n        ) {\n            dlp.status = DlpStatus.Registered;\n            _eligibleDlpsList.remove(dlpId);\n\n            uint256 epochsCount = _dlpRootEpoch().epochsCount();\n            if (epochsCount > 1 && !_dlpRootEpoch().epochs(epochsCount - 1).isFinalised) {\n                revert LastEpochMustBeFinalised();\n            }\n\n            emit DlpStatusUpdated(dlpId, DlpStatus.Registered);\n        } else if (dlpStake < dlpEligibilityThreshold && dlp.status == DlpStatus.Eligible) {\n            dlp.status = DlpStatus.SubEligible;\n\n            emit DlpStatusUpdated(dlpId, DlpStatus.SubEligible);\n        }\n    }\n\n    /**\n     * @notice Internal function to register a new DLP\n     */\n    function _registerDlp(DlpRegistration calldata registrationInfo) internal {\n        if (registrationInfo.ownerAddress == address(0) || registrationInfo.treasuryAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (dlpIds[registrationInfo.dlpAddress] != 0) {\n            revert InvalidDlpStatus();\n        }\n\n        if (dlpNameToId[registrationInfo.name] != 0 || !_validateDlpNameLength(registrationInfo.name)) {\n            revert InvalidName();\n        }\n\n        if (\n            registrationInfo.stakersPercentage < minDlpStakersPercentage ||\n            registrationInfo.stakersPercentage > maxDlpStakersPercentage\n        ) {\n            revert InvalidStakersPercentage();\n        }\n\n        if (msg.value < minDlpRegistrationStake) {\n            revert InvalidStakeAmount();\n        }\n\n        uint256 dlpId = ++dlpsCount;\n        Dlp storage dlp = _dlps[dlpId];\n\n        uint256 epochsCount = _dlpRootEpoch().epochsCount();\n\n        dlp.id = dlpId;\n        dlp.dlpAddress = registrationInfo.dlpAddress;\n        dlp.ownerAddress = registrationInfo.ownerAddress;\n        dlp.treasuryAddress = registrationInfo.treasuryAddress;\n        _checkpointPush(\n            dlp.stakersPercentageCheckpoints,\n            epochsCount > 0 ? epochsCount - 1 : 0,\n            registrationInfo.stakersPercentage\n        );\n        dlp.name = registrationInfo.name;\n        dlp.iconUrl = registrationInfo.iconUrl;\n        dlp.website = registrationInfo.website;\n        dlp.metadata = registrationInfo.metadata;\n        dlp.registrationBlockNumber = block.number;\n        dlp.status = DlpStatus.Registered;\n\n        dlpIds[registrationInfo.dlpAddress] = dlpId;\n\n        dlpNameToId[registrationInfo.name] = dlpId;\n\n        emit DlpRegistered(\n            dlpId,\n            registrationInfo.dlpAddress,\n            registrationInfo.ownerAddress,\n            registrationInfo.treasuryAddress,\n            registrationInfo.stakersPercentage,\n            registrationInfo.name,\n            registrationInfo.iconUrl,\n            registrationInfo.website,\n            registrationInfo.metadata\n        );\n\n        emit DlpStatusUpdated(dlpId, DlpStatus.Registered);\n        dlpRoot.createStakeOnBehalf{value: msg.value}(dlpId, registrationInfo.ownerAddress);\n    }\n\n    function _dlpRootEpoch() internal view returns (IDLPRootEpoch) {\n        return dlpRoot.dlpRootEpoch();\n    }\n\n    function _dlpRootMetrics() internal view returns (IDLPRootMetrics) {\n        return dlpRoot.dlpRootMetrics();\n    }\n\n    /**\n     * @notice Helper function to set checkpoint value\n     */\n    function _checkpointPush(\n        Checkpoints.Trace208 storage store,\n        uint256 key,\n        uint256 value\n    ) private returns (uint208, uint208) {\n        return store.push(uint48(key), uint208(value));\n    }\n\n    function _checkpointAdd(\n        Checkpoints.Trace208 storage store,\n        uint256 key,\n        uint256 delta\n    ) private returns (uint208, uint208) {\n        return store.push(uint48(key), store.latest() + uint208(delta));\n    }\n\n    function _checkpointSub(\n        Checkpoints.Trace208 storage store,\n        uint256 epochId,\n        uint256 delta\n    ) private returns (uint208, uint208) {\n        return store.push(uint48(epochId), store.latest() - uint208(delta));\n    }\n\n    function _validateDlpNameLength(string memory str) internal pure returns (bool) {\n        bytes memory strBytes = bytes(str);\n        uint256 count = 0;\n\n        for (uint256 i = 0; i < strBytes.length; i++) {\n            if (strBytes[i] != 0x20) {\n                // 0x20 is the ASCII space character\n                count++;\n            }\n        }\n\n        return count > 3;\n    }\n\n    function migrateParametersData() external onlyRole(MANAGER_ROLE) {\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\n        minDlpStakersPercentage = dlpRootOld.minDlpStakersPercentage();\n        maxDlpStakersPercentage = dlpRootOld.maxDlpStakersPercentage();\n        minDlpRegistrationStake = dlpRootOld.minDlpRegistrationStake();\n        dlpEligibilityThreshold = dlpRootOld.dlpEligibilityThreshold();\n        dlpSubEligibilityThreshold = dlpRootOld.dlpSubEligibilityThreshold();\n    }\n\n    function migrateDlpData(uint256 startDlpId, uint256 endDlpId) external onlyRole(MANAGER_ROLE) {\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\n\n        uint256 epochsCount = dlpRootOld.epochsCount();\n        for (uint256 dlpId = startDlpId; dlpId <= endDlpId; ) {\n            IDLPRootOld.DlpInfo memory dlpInfo = dlpRootOld.dlps(dlpId);\n            Dlp storage dlp = _dlps[dlpId];\n\n            dlp.id = dlpInfo.id;\n            dlp.dlpAddress = dlpInfo.dlpAddress;\n            dlp.ownerAddress = dlpInfo.ownerAddress;\n            dlp.treasuryAddress = payable(dlpInfo.treasuryAddress);\n            dlp.name = dlpInfo.name;\n            dlp.iconUrl = dlpInfo.iconUrl;\n            dlp.website = dlpInfo.website;\n            dlp.metadata = dlpInfo.metadata;\n            dlp.status = DlpStatus(uint256(dlpInfo.status));\n            dlp.registrationBlockNumber = dlpInfo.registrationBlockNumber;\n            dlp.isVerified = dlpInfo.isVerified;\n\n            for (uint256 epochId = 0; epochId <= epochsCount; ) {\n                IDLPRootOld.DlpEpochInfo memory dlpEpochInfo = dlpRootOld.dlpEpochs(dlpId, epochId);\n\n                _checkpointPush(dlp.stakersPercentageCheckpoints, epochId, dlpEpochInfo.stakersPercentage);\n                _checkpointPush(dlp.stakeAmountCheckpoints, epochId, dlpEpochInfo.stakeAmount);\n\n                unchecked {\n                    ++epochId;\n                }\n            }\n\n            dlpIds[dlpInfo.dlpAddress] = dlpId;\n            dlpNameToId[dlpInfo.name] = dlpId;\n\n            if (DlpStatus(uint256(dlpInfo.status)) == DlpStatus.Eligible) {\n                _eligibleDlpsList.add(dlpId);\n            }\n\n            dlpsCount++;\n\n            unchecked {\n                ++dlpId;\n            }\n        }\n    }\n\n    function migrateLastEpochDlpStakeData(uint256 startDlpId, uint256 endDlpId) external onlyRole(MANAGER_ROLE) {\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\n\n        uint256 epochsCount = dlpRootOld.epochsCount();\n        for (uint256 dlpId = startDlpId; dlpId <= endDlpId; ) {\n            Dlp storage dlp = _dlps[dlpId];\n\n            IDLPRootOld.DlpEpochInfo memory dlpEpochInfo = dlpRootOld.dlpEpochs(dlpId, epochsCount);\n\n            _checkpointPush(dlp.stakeAmountCheckpoints, epochsCount, dlpEpochInfo.stakeAmount);\n\n            unchecked {\n                ++dlpId;\n            }\n        }\n    }\n}\n"
    },
    "contracts/rootCore/interfaces/DLPRootCoreStorageV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"./IDLPRootCore.sol\";\n\nabstract contract DLPRootCoreStorageV1 is IDLPRootCore {\n    IDLPRoot public override dlpRoot;\n\n    uint256 public override eligibleDlpsLimit;\n    uint256 public override minDlpStakersPercentage; // Min % of rewards to stakers (in 1e18)\n    uint256 public override maxDlpStakersPercentage; // Max % of rewards to stakers (in 1e18)\n    uint256 public override minDlpRegistrationStake; // Min stake for new DLP registration\n    uint256 public override dlpEligibilityThreshold; // Min stake for full eligibility\n    uint256 public override dlpSubEligibilityThreshold; // Min stake for sub-eligibility\n\n    uint256 public override dlpsCount;\n    mapping(uint256 dlpId => Dlp dlp) internal _dlps;\n    mapping(address dlpAddress => uint256 dlpId) public override dlpIds;\n    mapping(string dlpName => uint256 dlpId) public override dlpNameToId;\n    EnumerableSet.UintSet internal _eligibleDlpsList;\n}\n"
    },
    "contracts/rootCore/interfaces/IDLPRootCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/structs/Checkpoints.sol\";\nimport {IDLPRoot} from \"../../root/interfaces/IDLPRoot.sol\";\nimport {IDLPRootEpoch} from \"../../rootEpoch/interfaces/IDLPRootEpoch.sol\";\nimport {IDLPRootMetrics} from \"../../rootMetrics/interfaces/IDLPRootMetrics.sol\";\n\ninterface IDLPRootCore {\n    // DLP lifecycle states from registration to deregistration\n    enum DlpStatus {\n        None,\n        Registered,\n        Eligible, // Can participate in epochs\n        SubEligible, // Below threshold but above minimum\n        Deregistered\n    }\n\n    struct Dlp {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress; // Receives non-staker rewards\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\n        bool isVerified;\n    }\n\n    // View functions for contract state and configuration\n    function version() external pure returns (uint256);\n    function dlpRoot() external view returns (IDLPRoot);\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\n    function eligibleDlpsListCount() external view returns (uint256);\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\n\n    function minDlpStakersPercentage() external view returns (uint256);\n    function maxDlpStakersPercentage() external view returns (uint256);\n    function minDlpRegistrationStake() external view returns (uint256);\n    function dlpEligibilityThreshold() external view returns (uint256);\n    function dlpSubEligibilityThreshold() external view returns (uint256);\n    function eligibleDlpsLimit() external view returns (uint256);\n    function dlpsCount() external view returns (uint256);\n\n    struct DlpInfo {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address treasuryAddress;\n        uint256 stakersPercentage;\n        uint256 stakersPercentageEpoch;\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        uint256 stakeAmount;\n        bool isVerified;\n    }\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\n    function dlpIds(address dlpAddress) external view returns (uint256);\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\n\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\n\n    // Admin functions\n    function pause() external;\n    function unpause() external;\n    function updateDlpStakersPercentages(\n        uint256 newMinDlpStakersPercentage,\n        uint256 newMaxDlpStakersPercentage\n    ) external;\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\n    function updateDlpEligibilityThresholds(\n        uint256 newDlpSubEligibilityThreshold,\n        uint256 newDlpEligibilityThreshold\n    ) external;\n    function updateDlpRoot(address newDlpRootAddress) external;\n\n    struct DlpRegistration {\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress;\n        uint256 stakersPercentage;\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n    }\n\n    // DLP lifecycle management\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\n    function updateDlpVerificationBlock(uint256 dlpId, bool isVerified) external;\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\n    function deregisterDlp(uint256 dlpId) external;\n    function addDlpStake(uint256 dlpId, uint256 amount) external;\n    function removeDlpStake(uint256 dlpId, uint256 amount) external;\n}\n"
    },
    "contracts/rootEpoch/DLPRootEpochImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"./interfaces/DLPRootEpochStorageV1.sol\";\nimport {IDLPRootOld} from \"../root/interfaces/IDLPRootOld.sol\";\n\ncontract DLPRootEpochImplementation is\n    UUPSUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    DLPRootEpochStorageV1\n{\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    bytes32 public constant DLP_ROOT_METRICS_ROLE = keccak256(\"DLP_ROOT_METRICS_ROLE\");\n\n    event EpochCreated(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount);\n    event EpochOverridden(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount);\n    event EpochDlpsLimitUpdated(uint256 newEpochDlpsLimit);\n    event EpochSizeUpdated(uint256 newEpochSize);\n    event EpochRewardAmountUpdated(uint256 newEpochRewardAmount);\n    event EpochDlpScoreSaved(uint256 indexed epochId, uint256 indexed dlpId, uint256 totalStakesScore);\n    event DlpRewardClaimed(\n        uint256 indexed dlpId,\n        uint256 indexed epochId,\n        uint256 ownerRewardAmount,\n        uint256 stakersRewardAmount\n    );\n\n    // Custom errors\n    error InvalidParam();\n    error InvalidStakeAmount();\n    error StakeAlreadyWithdrawn();\n    error StakeNotClosed();\n    error StakeAlreadyClosed();\n    error StakeWithdrawalTooEarly();\n    error InvalidDlpId();\n    error InvalidDlpStatus();\n    error InvalidAddress();\n    error InvalidName();\n    error NotDlpOwner();\n    error NotStakeOwner();\n    error NothingToClaim();\n    error InvalidStakersPercentage();\n    error DlpAddressCannotBeChanged();\n    error TransferFailed();\n    error EpochNotEnded();\n    error EpochDlpScoreAlreadySaved();\n    error EpochRewardsAlreadyDistributed();\n    error LastEpochMustBeFinalised();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address ownerAddress, address dlpRootAddress, uint256 daySizeInBlocks) external initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n        __ReentrancyGuard_init();\n        __Pausable_init();\n\n        dlpRoot = IDLPRoot(dlpRootAddress);\n        daySize = daySizeInBlocks;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\n        _grantRole(MANAGER_ROLE, ownerAddress);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    function version() external pure virtual override returns (uint256) {\n        return 1;\n    }\n\n    function epochs(uint256 epochId) external view override returns (EpochInfo memory) {\n        return\n            EpochInfo({\n                startBlock: _epochs[epochId].startBlock,\n                endBlock: _epochs[epochId].endBlock,\n                rewardAmount: _epochs[epochId].rewardAmount,\n                isFinalised: _epochs[epochId].isFinalised,\n                dlpIds: _epochs[epochId].dlpIds.values()\n            });\n    }\n\n    function epochDlps(uint256 epochId, uint256 dlpId) external view override returns (EpochDlpInfo memory) {\n        Epoch storage epoch = _epochs[epochId];\n        EpochDlp memory epochDlp = epoch.dlps[dlpId];\n\n        IDLPRootCore.DlpInfo memory dlp = dlpRoot.dlpRootCore().dlps(dlpId);\n\n        return\n            EpochDlpInfo({\n                stakeAmount: dlpRoot.dlpRootCore().dlpEpochStakeAmount(dlpId, uint48(epochId)),\n                isTopDlp: epoch.dlpIds.contains(dlpId),\n                ownerRewardAmount: epochDlp.ownerRewardAmount,\n                stakersPercentage: dlp.stakersPercentageEpoch,\n                totalStakesScore: epochDlp.totalStakesScore,\n                rewardClaimed: epochDlp.rewardClaimed,\n                stakersRewardAmount: epochDlp.stakersRewardAmount\n            });\n    }\n\n    function epochDlpStakeAmount(uint256 epochId, uint256 dlpId) external view override returns (uint256) {\n        return dlpRoot.dlpRootCore().dlpEpochStakeAmount(dlpId, uint48(epochId));\n    }\n\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\n        _unpause();\n    }\n\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external override onlyRole(MAINTAINER_ROLE) {\n        epochDlpsLimit = newEpochDlpsLimit;\n        emit EpochDlpsLimitUpdated(newEpochDlpsLimit);\n    }\n\n    function updateEpochSize(uint256 newEpochSize) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        epochSize = newEpochSize;\n        emit EpochSizeUpdated(newEpochSize);\n    }\n\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        epochRewardAmount = newEpochRewardAmount;\n        emit EpochRewardAmountUpdated(newEpochRewardAmount);\n    }\n\n    function updateDlpRoot(address newDlpRootAddress) external override onlyRole(MAINTAINER_ROLE) {\n        dlpRoot = IDLPRoot(newDlpRootAddress);\n    }\n\n    function overrideEpoch(\n        uint256 epochId,\n        uint256 startBlock,\n        uint256 endBlock,\n        uint256 rewardAmount\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        Epoch storage epoch = _epochs[epochId];\n        epoch.startBlock = startBlock;\n        epoch.endBlock = endBlock;\n        epoch.rewardAmount = rewardAmount;\n\n        emit EpochOverridden(epochId, startBlock, endBlock, rewardAmount);\n    }\n\n    function distributeEpochRewards(\n        uint256 epochId,\n        EpochDlpReward[] memory epochDlpRewards\n    ) external override onlyRole(DLP_ROOT_METRICS_ROLE) {\n        Epoch storage epoch = _epochs[epochId];\n\n        epoch.isFinalised = true;\n\n        uint256 index;\n        uint256 dlpId;\n        EpochDlp storage epochDlp;\n        //        Dlp storage dlp;\n\n        uint256 epochDlpsCount = epochDlpRewards.length;\n\n        // Distribute rewards\n        for (index = 0; index < epochDlpsCount; ) {\n            dlpId = epochDlpRewards[index].dlpId;\n\n            epoch.dlpIds.add(dlpId);\n\n            epochDlp = epoch.dlps[dlpId];\n            epochDlp.ownerRewardAmount = epochDlpRewards[index].ownerRewardAmount;\n            epochDlp.stakersRewardAmount = epochDlpRewards[index].stakersRewardAmount;\n\n            //            bool success = dlpRootRewardsTreasury.transferVana(\n            //                dlp.treasuryAddress,\n            //                epochDlpRewards[index].rewardAmount\n            //            );\n\n            bool success = dlpRoot.dlpRootRewardsTreasury().transferVana(\n                dlpRoot.dlpRootMetrics().foundationWalletAddress(),\n                epochDlpRewards[index].ownerRewardAmount\n            );\n\n            if (success) {\n                epochDlp.rewardClaimed = epochDlpRewards[index].ownerRewardAmount;\n\n                emit DlpRewardClaimed(\n                    dlpId,\n                    epochId,\n                    epochDlpRewards[index].ownerRewardAmount,\n                    epochDlpRewards[index].stakersRewardAmount\n                );\n            } else {\n                //just skip this DLP; it will be fixed manually\n            }\n\n            unchecked {\n                ++index;\n            }\n        }\n    }\n\n    /**\n     * @notice Updates stake scores for DLPs in past epochs\n     */\n    function saveEpochDlpsTotalStakesScore(\n        EpochDlpsTotalStakesScore[] memory stakeScore\n    ) external override onlyRole(MANAGER_ROLE) {\n        for (uint256 i = 0; i < stakeScore.length; ) {\n            Epoch storage epoch = _epochs[stakeScore[i].epochId];\n            EpochDlp storage epochDlp = epoch.dlps[stakeScore[i].dlpId];\n\n            IDLPRootCore.DlpInfo memory dlp = dlpRoot.dlpRootCore().dlps(stakeScore[i].dlpId);\n\n            if (dlp.dlpAddress == address(0)) {\n                revert InvalidDlpId();\n            }\n\n            if (epoch.endBlock > block.number || epoch.startBlock == 0) {\n                revert EpochNotEnded();\n            }\n\n            if (epochDlp.totalStakesScore != 0) {\n                revert EpochDlpScoreAlreadySaved();\n            }\n\n            epochDlp.totalStakesScore = stakeScore[i].totalStakesScore;\n\n            emit EpochDlpScoreSaved(stakeScore[i].epochId, stakeScore[i].dlpId, stakeScore[i].totalStakesScore);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Overrides stake scores for DLPs in past epochs\n     */\n    function overrideEpochDlpsTotalStakesScore(\n        EpochDlpsTotalStakesScore memory stakeScore\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        Epoch storage epoch = _epochs[stakeScore.epochId];\n\n        IDLPRootCore.DlpInfo memory dlp = dlpRoot.dlpRootCore().dlps(stakeScore.dlpId);\n        if (dlp.dlpAddress == address(0)) {\n            revert InvalidDlpId();\n        }\n\n        if (epoch.endBlock > block.number || epoch.startBlock == 0) {\n            revert EpochNotEnded();\n        }\n\n        epoch.dlps[stakeScore.dlpId].totalStakesScore = stakeScore.totalStakesScore;\n\n        emit EpochDlpScoreSaved(stakeScore.epochId, stakeScore.dlpId, stakeScore.totalStakesScore);\n    }\n\n    /**\n     * @notice Creates epochs up to current block\n     */\n    function createEpochs() external override nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(block.number);\n    }\n\n    /**\n     * @notice Creates epochs up to specified block\n     */\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external override nonReentrant whenNotPaused {\n        _createEpochsUntilBlockNumber(blockNumber < block.number ? blockNumber : block.number);\n    }\n\n    /**\n     * @notice Creates and finalises epochs up to target block\n     */\n    function _createEpochsUntilBlockNumber(uint256 blockNumber) internal {\n        Epoch storage lastEpoch = _epochs[epochsCount];\n\n        if (lastEpoch.endBlock > block.number) {\n            return;\n        }\n\n        while (lastEpoch.endBlock < blockNumber) {\n            Epoch storage newEpoch = _epochs[++epochsCount];\n            newEpoch.startBlock = lastEpoch.endBlock + 1;\n            newEpoch.endBlock = newEpoch.startBlock + epochSize - 1;\n            newEpoch.rewardAmount = epochRewardAmount;\n\n            emit EpochCreated(epochsCount, newEpoch.startBlock, newEpoch.endBlock, newEpoch.rewardAmount);\n            lastEpoch = newEpoch;\n        }\n    }\n\n    function migrateParametersData() external onlyRole(MANAGER_ROLE) {\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\n\n        epochDlpsLimit = dlpRootOld.epochDlpsLimit();\n        epochRewardAmount = dlpRootOld.epochRewardAmount();\n        epochSize = dlpRootOld.epochSize();\n        daySize = dlpRootOld.daySize();\n        epochsCount = dlpRootOld.epochsCount();\n    }\n\n    function migrateEpochData(uint256 epochIdStart, uint256 epochIdEnd) external onlyRole(MANAGER_ROLE) {\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\n\n        uint256 dlpsCount = dlpRootOld.dlpsCount();\n\n        for (uint256 epochId = epochIdStart; epochId <= epochIdEnd; ) {\n            Epoch storage epoch = _epochs[epochId];\n            IDLPRootOld.EpochInfo memory epochInfo = dlpRootOld.epochs(epochId);\n\n            epoch.startBlock = epochInfo.startBlock;\n            epoch.endBlock = epochInfo.endBlock;\n            epoch.rewardAmount = epochInfo.rewardAmount;\n            epoch.isFinalised = epochInfo.isFinalised;\n\n            uint256 dlpId;\n            uint256 epochDlpIdsCount = epochInfo.dlpIds.length;\n            for (dlpId = 0; dlpId < epochDlpIdsCount; ) {\n                epoch.dlpIds.add(epochInfo.dlpIds[dlpId]);\n\n                unchecked {\n                    ++dlpId;\n                }\n            }\n\n            for (dlpId = 1; dlpId <= dlpsCount; ) {\n                IDLPRootOld.DlpEpochInfo memory dlpEpoch = dlpRootOld.dlpEpochs(dlpId, epochId);\n                EpochDlp storage epochDlp = epoch.dlps[dlpId];\n\n                epochDlp.ownerRewardAmount = dlpEpoch.rewardAmount;\n                epochDlp.stakersRewardAmount = dlpEpoch.stakersRewardAmount;\n                epochDlp.totalStakesScore = dlpEpoch.totalStakesScore;\n                epochDlp.rewardClaimed = dlpEpoch.rewardClaimed ? dlpEpoch.rewardAmount : 0;\n\n                unchecked {\n                    ++dlpId;\n                }\n            }\n\n            unchecked {\n                ++epochId;\n            }\n        }\n    }\n}\n"
    },
    "contracts/rootEpoch/interfaces/DLPRootEpochStorageV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"./IDLPRootEpoch.sol\";\n\nabstract contract DLPRootEpochStorageV1 is IDLPRootEpoch {\n    IDLPRoot public override dlpRoot;\n\n    uint256 public override epochDlpsLimit; // Max DLPs per epoch\n\n    uint256 public override epochRewardAmount; // Rewards per epoch\n    uint256 public override epochSize; // Blocks per epoch\n    uint256 public override daySize; // Blocks per day\n\n    // Epoch tracking\n    uint256 public override epochsCount;\n    mapping(uint256 epochId => Epoch epoch) internal _epochs;\n}\n"
    },
    "contracts/rootEpoch/interfaces/IDLPRootEpoch.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {IDLPRoot} from \"../../root/interfaces/IDLPRoot.sol\";\nimport {IDLPRootCore} from \"../../rootCore/interfaces/IDLPRootCore.sol\";\n\ninterface IDLPRootEpoch {\n    struct EpochDlp {\n        uint256 ownerRewardAmount; // Rewards allocated to the DLP owner\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\n        uint256 totalStakesScore; // Sum of weighted stake scores\n        uint256 rewardClaimed; // True if reward has been claimed\n    }\n\n    struct Epoch {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 rewardAmount;\n        bool isFinalised;\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\n    }\n\n    // View functions for contract state and configuration\n    function version() external pure returns (uint256);\n    function dlpRoot() external view returns (IDLPRoot);\n    function epochDlpsLimit() external view returns (uint256);\n    function epochSize() external view returns (uint256);\n    function daySize() external view returns (uint256);\n    function epochsCount() external view returns (uint256);\n\n    // Read-only struct views\n    struct EpochInfo {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 rewardAmount;\n        bool isFinalised;\n        uint256[] dlpIds;\n    }\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\n    function epochRewardAmount() external view returns (uint256);\n\n    struct EpochDlpInfo {\n        uint256 stakeAmount; // 0 if not a top DLP\n        bool isTopDlp; // In top DLPs list this epoch\n        uint256 ownerRewardAmount; // 0 if not top DLP or epoch not finished\n        uint256 stakersPercentage; // 0 if not top DLP\n        uint256 totalStakesScore; // 0 if not top DLP\n        uint256 rewardClaimed;\n        uint256 stakersRewardAmount;\n    }\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\n\n    function epochDlpStakeAmount(uint256 epochId, uint256 dlpId) external view returns (uint256);\n\n    // Admin functions\n    function pause() external;\n    function unpause() external;\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\n    function updateEpochSize(uint256 newEpochSize) external;\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\n\n    function updateDlpRoot(address newDlpRootAddress) external;\n\n    struct EpochDlpsTotalStakesScore {\n        uint256 epochId;\n        uint256 dlpId;\n        uint256 totalStakesScore;\n    }\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\n\n    function createEpochs() external;\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\n    struct EpochDlpReward {\n        uint256 dlpId;\n        uint256 ownerRewardAmount;\n        uint256 stakersRewardAmount;\n    }\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\n}\n"
    },
    "contracts/rootMetrics/DLPRootMetricsImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"./interfaces/ERC2771ContextUpgradeableMock.sol\";\nimport \"./interfaces/DLPRootMetricsStorageV1.sol\";\n\ncontract DLPRootMetricsImplementation is\n    UUPSUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    ERC2771ContextUpgradeableMock,\n    DLPRootMetricsStorageV1\n{\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    bytes32 public constant DLP_ROOT_ROLE = keccak256(\"DLP_ROOT_ROLE\");\n\n    event EpochFinalised(uint256 indexed epochId);\n    event EpochPerformanceRatingsSaved(uint256 indexed epochId, uint256 totalPerformanceRating, bool isFinalized);\n    event DlpEpochPerformanceRatingSaved(uint256 indexed epochId, uint256 indexed dlpId, uint256 performanceRating);\n    event RatingPercentagesUpdated(RatingType ratingType, uint256 percentage);\n\n    error EpochAlreadyFinalised();\n    error EpochNotEndedYet();\n    error InvalidPerformanceRating();\n    error InvalidEpoch();\n    error AllEligibleDlpsMustHavePerformanceRatings();\n    error InvalidRatingPercentages();\n    error EpochRewardsAlreadyDistributed();\n    error DlpMustBeEligibleAndVerified(uint256 dlpId);\n    error InvalidFoundationWalletAddress();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address ownerAddress,\n        address dlpRootAddress,\n        uint256 stakeRatingPercentage,\n        uint256 performanceRatingPercentage\n    ) external initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n        __Pausable_init();\n\n        dlpRoot = IDLPRoot(dlpRootAddress);\n\n        _updateRatingPercentages(stakeRatingPercentage, performanceRatingPercentage);\n\n        _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\n        _setRoleAdmin(MANAGER_ROLE, MAINTAINER_ROLE);\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\n        _grantRole(MANAGER_ROLE, ownerAddress);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    function version() external pure virtual override returns (uint256) {\n        return 1;\n    }\n\n    function foundationWalletAddress() external view override returns (address payable) {\n        if (_foundationWalletAddress == address(0)) {\n            revert InvalidFoundationWalletAddress();\n        }\n        return _foundationWalletAddress;\n    }\n\n    function epochs(uint256 epochId) external view override returns (EpochInfo memory) {\n        Epoch storage epoch = _epochs[epochId];\n        return\n            EpochInfo({\n                totalPerformanceRating: epoch.totalPerformanceRating,\n                finalized: dlpRoot.dlpRootEpoch().epochs(epochId).isFinalised\n            });\n    }\n\n    function epochDlps(uint256 epochId, uint256 dlpId) external view override returns (EpochDlpInfo memory) {\n        return\n            EpochDlpInfo({\n                performanceRating: _epochs[epochId].dlps[dlpId].performanceRating,\n                stakeAmountAdjustment: _epochs[epochId].dlps[dlpId].stakeAmountAdjustment\n            });\n    }\n\n    /**\n     * @notice Gets top DLP IDs by rating (performanceRating + stakeRating)\n     * @dev Uses insertion sort to maintain ordered list\n     */\n    function topDlpsCustomized(\n        uint256 epochId,\n        uint256 numberOfDlps,\n        uint256[] memory dlpIds,\n        uint256[] memory customRatingPercentages\n    ) public view override returns (DlpRating[] memory) {\n        //sum of stakeAmount for all dlps in the list\n        uint256 totalStakeAmount;\n        uint256 totalPerformanceRating;\n\n        for (uint256 i = 0; i < dlpIds.length; ) {\n            totalStakeAmount += _dlpEpochStakeAmount(dlpIds[i], epochId);\n            totalPerformanceRating += _epochs[epochId].dlps[dlpIds[i]].performanceRating;\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 dlpIdsCount = dlpIds.length;\n\n        numberOfDlps = numberOfDlps < dlpIdsCount ? numberOfDlps : dlpIdsCount;\n\n        DlpRating[] memory topDlpList = new DlpRating[](numberOfDlps);\n\n        if (numberOfDlps == 0) {\n            return topDlpList;\n        }\n\n        for (uint256 i = 0; i < dlpIdsCount; ) {\n            uint256 currentDlpId = dlpIds[i];\n\n            uint256 currentRating = calculateDlpRating(\n                currentDlpId,\n                epochId,\n                totalStakeAmount,\n                totalPerformanceRating,\n                customRatingPercentages\n            );\n\n            uint256 position = numberOfDlps;\n            for (uint256 j = 0; j < numberOfDlps; ) {\n                if (\n                    currentRating > topDlpList[j].rating ||\n                    (currentRating == topDlpList[j].rating && currentDlpId < topDlpList[j].dlpId)\n                ) {\n                    position = j;\n                    break;\n                }\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            if (position < numberOfDlps) {\n                for (uint256 j = numberOfDlps - 1; j > position; ) {\n                    topDlpList[j].dlpId = topDlpList[j - 1].dlpId;\n                    topDlpList[j].rating = topDlpList[j - 1].rating;\n\n                    unchecked {\n                        --j;\n                    }\n                }\n\n                topDlpList[position] = DlpRating({dlpId: currentDlpId, rating: currentRating});\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return topDlpList;\n    }\n\n    function topDlps(uint256 numberOfDlps) public view override returns (DlpRating[] memory) {\n        return\n            topDlpsCustomized(\n                dlpRoot.dlpRootEpoch().epochsCount(),\n                numberOfDlps,\n                dlpRoot.dlpRootCore().eligibleDlpsListValues(),\n                new uint256[](0)\n            );\n    }\n\n    function topDlpIds(uint256 numberOfDlps) public view override returns (uint256[] memory) {\n        DlpRating[] memory dlpRating = topDlps(numberOfDlps);\n\n        uint256 topDlpsCount = dlpRating.length;\n\n        uint256[] memory topDlpIdsList = new uint256[](topDlpsCount);\n        for (uint256 i = 0; i < topDlpsCount; ) {\n            topDlpIdsList[i] = dlpRating[i].dlpId;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return topDlpIdsList;\n    }\n\n    /**\n     * @notice Estimates reward percentages for given DLPs\n     * @dev Calculates based on ratings and current epoch parameters\n     */\n    function estimatedDlpRewardPercentagesCustomized(\n        uint256[] memory dlpIds,\n        uint256[] memory customRatingPercentages\n    ) public view override returns (DlpRewardApy[] memory) {\n        TopDlpTotalRatings memory topDlpTotalRatings = _calculateTopDlpTotalRatings(\n            dlpRoot.dlpRootEpoch().epochsCount(),\n            customRatingPercentages\n        );\n\n        DlpRewardApy[] memory result = new DlpRewardApy[](dlpIds.length);\n        uint256 i;\n\n        for (i = 0; i < dlpIds.length; ) {\n            result[i] = _calculateDlpRewardApy(dlpIds[i], topDlpTotalRatings, customRatingPercentages);\n\n            unchecked {\n                ++i;\n            }\n        }\n        return result;\n    }\n\n    function estimatedDlpRewardPercentages(\n        uint256[] memory dlpIds\n    ) public view override returns (DlpRewardApy[] memory) {\n        return estimatedDlpRewardPercentagesCustomized(dlpIds, new uint256[](0));\n    }\n\n    /**\n     * @notice Returns stake score multiplier based number of days staked\n     */\n    function getMultiplier(uint256 daysStaked) external pure override returns (uint256) {\n        if (daysStaked > 82) {\n            return 30000;\n        }\n\n        uint16[83] memory multiplier = [\n            476,\n            952,\n            1428,\n            1904,\n            2380,\n            2857,\n            3333,\n            3809,\n            4285,\n            4761,\n            5238,\n            5714,\n            6190,\n            6666,\n            7142,\n            7619,\n            8095,\n            8571,\n            9047,\n            9523,\n            10000,\n            10200,\n            10500,\n            10700,\n            11000,\n            11200,\n            11400,\n            11700,\n            11900,\n            12100,\n            12400,\n            12600,\n            12900,\n            13100,\n            13300,\n            13600,\n            13800,\n            14000,\n            14300,\n            14500,\n            14800,\n            15000,\n            15600,\n            16200,\n            16800,\n            17400,\n            18000,\n            18600,\n            19200,\n            19800,\n            20400,\n            21000,\n            21500,\n            22100,\n            22700,\n            23300,\n            23900,\n            24500,\n            25100,\n            25700,\n            26300,\n            26900,\n            27500,\n            27600,\n            27700,\n            27900,\n            28000,\n            28100,\n            28200,\n            28300,\n            28500,\n            28600,\n            28700,\n            28800,\n            28900,\n            29000,\n            29200,\n            29300,\n            29400,\n            29500,\n            29600,\n            29800,\n            29900\n        ];\n        return uint256(multiplier[daysStaked]);\n    }\n\n    function updateDlpRoot(address dlpRootAddress) external override onlyRole(MAINTAINER_ROLE) {\n        dlpRoot = IDLPRoot(dlpRootAddress);\n    }\n\n    function updateFoundationWalletAddress(\n        address payable foundationWalletAddress\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        _foundationWalletAddress = foundationWalletAddress;\n    }\n\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\n        _unpause();\n    }\n\n    function updateEpochDlpStakeAmountAdjustment(\n        uint256 epochId,\n        uint256 dlpId,\n        uint256 adjustment,\n        bool isAddition\n    ) external override onlyRole(DLP_ROOT_ROLE) {\n        if (isAddition) {\n            _epochs[epochId].dlps[dlpId].stakeAmountAdjustment += adjustment;\n        } else {\n            //stakeAmountAdjustment is always > adjustment\n            _epochs[epochId].dlps[dlpId].stakeAmountAdjustment -= adjustment;\n        }\n    }\n\n    /**\n     * @notice Saves or updates epoch performanceRatings for DLPs\n     * @param epochId                 The epoch ID to save performanceRatings for\n     * @param dlpPerformanceRatings   Array of DLP performanceRatings to save\n     */\n    function saveEpochPerformanceRatings(\n        uint256 epochId,\n        DlpPerformanceRating[] memory dlpPerformanceRatings\n    ) external override onlyRole(MANAGER_ROLE) whenNotPaused {\n        Epoch storage epoch = _epochs[epochId];\n\n        if (dlpRoot.dlpRootEpoch().epochs(epochId).isFinalised) {\n            revert EpochAlreadyFinalised();\n        }\n\n        uint256 dlpPerformanceRatingsLength = dlpPerformanceRatings.length;\n\n        uint256 totalPerformanceRating;\n        for (uint256 i = 0; i < dlpPerformanceRatingsLength; ) {\n            DlpPerformanceRating memory dlpPerformanceRating = dlpPerformanceRatings[i];\n\n            epoch.dlps[dlpPerformanceRating.dlpId].performanceRating = dlpPerformanceRating.performanceRating;\n            totalPerformanceRating += dlpPerformanceRating.performanceRating;\n\n            emit DlpEpochPerformanceRatingSaved(\n                epochId,\n                dlpPerformanceRating.dlpId,\n                dlpPerformanceRating.performanceRating\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        epoch.totalPerformanceRating = totalPerformanceRating;\n\n        emit EpochPerformanceRatingsSaved(epochId, totalPerformanceRating, false);\n    }\n\n    /**\n     * @notice Saves or updates epoch performanceRatings for DLPs\n     * @param epochId                The epoch ID to save performanceRatings for\n     */\n    function finalizeEpoch(uint256 epochId) external override onlyRole(MANAGER_ROLE) whenNotPaused {\n        if (dlpRoot.dlpRootEpoch().epochs(epochId).isFinalised) {\n            revert EpochAlreadyFinalised();\n        }\n\n        IDLPRootEpoch.EpochInfo memory rootEpoch = dlpRoot.dlpRootEpoch().epochs(epochId);\n\n        if (rootEpoch.endBlock >= block.number) {\n            revert EpochNotEndedYet();\n        }\n\n        emit EpochFinalised(epochId);\n\n        _calculateEpochRewards(epochId, dlpRoot.dlpRootCore().eligibleDlpsListValues());\n    }\n\n    function updateRatingPercentages(\n        uint256 stakeRatingPercentage,\n        uint256 performanceRatingPercentage\n    ) external override onlyRole(MAINTAINER_ROLE) {\n        _updateRatingPercentages(stakeRatingPercentage, performanceRatingPercentage);\n    }\n\n    function calculateDlpRating(\n        uint256 dlpId,\n        uint256 epochId,\n        uint256 totalDlpsStakeAmount,\n        uint256 totalDlpsPerformanceRating,\n        uint256[] memory customRatingPercentages\n    ) public view returns (uint256) {\n        return\n            _calculateDlpRating(\n                _dlpEpochStakeAmount(dlpId, epochId),\n                _epochs[epochId].dlps[dlpId].performanceRating,\n                totalDlpsStakeAmount,\n                totalDlpsPerformanceRating,\n                customRatingPercentages\n            );\n    }\n\n    function _updateRatingPercentages(uint256 stakeRatingPercentage, uint256 performanceRatingPercentage) internal {\n        if (stakeRatingPercentage + performanceRatingPercentage != 100e18) {\n            revert InvalidRatingPercentages();\n        }\n\n        ratingPercentages[RatingType.Stake] = stakeRatingPercentage;\n        ratingPercentages[RatingType.Performance] = performanceRatingPercentage;\n\n        emit RatingPercentagesUpdated(RatingType.Performance, performanceRatingPercentage);\n        emit RatingPercentagesUpdated(RatingType.Stake, stakeRatingPercentage);\n    }\n\n    function _calculateEpochRewards(uint256 epochId, uint256[] memory dlpIds) internal {\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRoot.dlpRootEpoch().epochs(epochId);\n\n        if (epoch.isFinalised == true) {\n            revert EpochRewardsAlreadyDistributed();\n        }\n\n        IDLPRootMetrics.DlpRating[] memory topDlps = topDlpsCustomized(\n            epochId,\n            dlpRoot.dlpRootEpoch().epochDlpsLimit(),\n            dlpIds,\n            new uint256[](0)\n        );\n\n        uint256 totalTopDlpsRating;\n        uint256 i;\n\n        // Calculate total stake amount for top DLPs\n        for (uint256 i = 0; i < topDlps.length; ) {\n            totalTopDlpsRating += topDlps[i].rating;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 dlpId;\n\n        uint256 topDlpsCount = topDlps.length;\n\n        IDLPRootEpoch.EpochDlpReward[] memory epochDlpRewards = new IDLPRootEpoch.EpochDlpReward[](topDlpsCount);\n        uint256 totalDlpReward;\n        uint256 stakersRewardAmount;\n\n        // Calculate rewards\n        for (i = 0; i < topDlpsCount; ) {\n            dlpId = topDlps[i].dlpId;\n\n            totalDlpReward = totalTopDlpsRating > 0 ? (topDlps[i].rating * epoch.rewardAmount) / totalTopDlpsRating : 0;\n\n            stakersRewardAmount =\n                (totalDlpReward * dlpRoot.dlpRootEpoch().epochDlps(epochId, dlpId).stakersPercentage) /\n                100e18;\n\n            epochDlpRewards[i] = IDLPRootEpoch.EpochDlpReward({\n                dlpId: dlpId,\n                ownerRewardAmount: totalDlpReward - stakersRewardAmount,\n                stakersRewardAmount: stakersRewardAmount\n            });\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        dlpRoot.dlpRootEpoch().distributeEpochRewards(epochId, epochDlpRewards);\n    }\n\n    function _dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) internal view returns (uint256) {\n        return\n            dlpRoot.dlpRootEpoch().epochDlpStakeAmount(epochId, dlpId) -\n            _epochs[epochId].dlps[dlpId].stakeAmountAdjustment;\n    }\n\n    function _calculateDlpRating(\n        uint256 dlpStakeAmount,\n        uint256 dlpPerformanceRating,\n        uint256 totalDlpsStakeAmount,\n        uint256 totalDlpsPerformanceRating,\n        uint256[] memory customRatingPercentages\n    ) internal view returns (uint256) {\n        uint256 normalizedDlpStakeRating = totalDlpsStakeAmount > 0\n            ? (1e18 * dlpStakeAmount) / totalDlpsStakeAmount\n            : 0;\n        uint256 normalizedDlpPerformanceRating = totalDlpsPerformanceRating > 0\n            ? (1e18 * dlpPerformanceRating) / totalDlpsPerformanceRating\n            : 0;\n\n        uint256 stakeRatingPercentage;\n        uint256 performanceRatingPercentage;\n\n        if (customRatingPercentages.length == 2) {\n            stakeRatingPercentage = customRatingPercentages[uint256(RatingType.Stake)];\n            performanceRatingPercentage = customRatingPercentages[uint256(RatingType.Performance)];\n        } else if (customRatingPercentages.length == 0) {\n            stakeRatingPercentage = ratingPercentages[RatingType.Stake];\n            performanceRatingPercentage = ratingPercentages[RatingType.Performance];\n        } else {\n            revert InvalidRatingPercentages();\n        }\n\n        return\n            (stakeRatingPercentage *\n                normalizedDlpStakeRating +\n                performanceRatingPercentage *\n                normalizedDlpPerformanceRating) / 1e20;\n    }\n\n    struct TopDlpTotalRatings {\n        uint256 totalStakeAmount;\n        uint256 totalStakeAmountAdjusted;\n        uint256 totalRating;\n        uint256 totalRatingAdjusted;\n        uint256 totalPerformanceRating;\n    }\n    function _calculateTopDlpTotalRatings(\n        uint256 epochId,\n        uint256[] memory customRatingPercentages\n    ) internal view returns (TopDlpTotalRatings memory) {\n        IDLPRootMetrics.DlpRating[] memory topDlpsList = topDlpsCustomized(\n            epochId,\n            dlpRoot.dlpRootEpoch().epochDlpsLimit(),\n            dlpRoot.dlpRootCore().eligibleDlpsListValues(),\n            customRatingPercentages\n        );\n\n        uint256 i;\n        TopDlpTotalRatings memory totalTopDlpsStakeAmount;\n\n        uint256[] memory dlpStakeAmountsAdjusted = new uint256[](topDlpsList.length);\n        uint256[] memory dlpStakeAmounts = new uint256[](topDlpsList.length);\n        uint256[] memory dlpPerformanceRatings = new uint256[](topDlpsList.length);\n\n        // Calculate total amount and ratings for top DLPs\n        for (i = 0; i < topDlpsList.length; ) {\n            dlpStakeAmounts[i] = dlpRoot.dlpRootCore().dlpEpochStakeAmount(topDlpsList[i].dlpId, epochId);\n            dlpStakeAmountsAdjusted[i] =\n                dlpStakeAmounts[i] -\n                _epochs[epochId].dlps[topDlpsList[i].dlpId].stakeAmountAdjustment;\n            dlpPerformanceRatings[i] = _epochs[epochId].dlps[topDlpsList[i].dlpId].performanceRating;\n\n            totalTopDlpsStakeAmount.totalStakeAmountAdjusted += dlpStakeAmountsAdjusted[i];\n            totalTopDlpsStakeAmount.totalStakeAmount += dlpStakeAmounts[i];\n            totalTopDlpsStakeAmount.totalPerformanceRating += dlpPerformanceRatings[i];\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Calculate total amount and ratings for top DLPs\n        for (i = 0; i < topDlpsList.length; ) {\n            totalTopDlpsStakeAmount.totalRatingAdjusted += _calculateDlpRating(\n                dlpStakeAmountsAdjusted[i],\n                dlpPerformanceRatings[i],\n                totalTopDlpsStakeAmount.totalStakeAmountAdjusted,\n                totalTopDlpsStakeAmount.totalPerformanceRating,\n                customRatingPercentages\n            );\n            totalTopDlpsStakeAmount.totalRating += _calculateDlpRating(\n                dlpStakeAmounts[i],\n                dlpPerformanceRatings[i],\n                totalTopDlpsStakeAmount.totalStakeAmount,\n                totalTopDlpsStakeAmount.totalPerformanceRating,\n                customRatingPercentages\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return totalTopDlpsStakeAmount;\n    }\n\n    function _calculateDlpRewardApy(\n        uint256 dlpId,\n        TopDlpTotalRatings memory topDlpTotalRatings,\n        uint256[] memory customRatingPercentages\n    ) private view returns (DlpRewardApy memory) {\n        uint256 epochRewardAmount = dlpRoot.dlpRootEpoch().epochRewardAmount();\n        uint256 epochCount = dlpRoot.dlpRootEpoch().epochsCount();\n        uint256 dlpStakeAmount = dlpRoot.dlpRootCore().dlpEpochStakeAmount(dlpId, epochCount);\n        uint256 dlpStakeAmountAdjusted = dlpStakeAmount - _epochs[epochCount].dlps[dlpId].stakeAmountAdjustment;\n\n        uint256 dlpRewardAdjusted = (_calculateDlpRating(\n            dlpStakeAmountAdjusted,\n            _epochs[epochCount].dlps[dlpId].performanceRating,\n            topDlpTotalRatings.totalStakeAmountAdjusted,\n            topDlpTotalRatings.totalPerformanceRating,\n            customRatingPercentages\n        ) * epochRewardAmount) / topDlpTotalRatings.totalRatingAdjusted;\n\n        uint256 dlpReward = (_calculateDlpRating(\n            dlpStakeAmount,\n            _epochs[epochCount].dlps[dlpId].performanceRating,\n            topDlpTotalRatings.totalStakeAmount,\n            topDlpTotalRatings.totalPerformanceRating,\n            customRatingPercentages\n        ) * epochRewardAmount) / topDlpTotalRatings.totalRating;\n\n        uint256 dlpStakersPercentageEpoch = dlpRoot.dlpRootEpoch().epochDlps(epochCount, dlpId).stakersPercentage;\n\n        return\n            DlpRewardApy({\n                dlpId: dlpId,\n                EPY: (dlpStakersPercentageEpoch * dlpRewardAdjusted) / dlpStakeAmountAdjusted,\n                APY: (((dlpStakersPercentageEpoch * dlpReward) / dlpStakeAmount) *\n                    365 *\n                    dlpRoot.dlpRootEpoch().daySize()) / dlpRoot.dlpRootEpoch().epochSize()\n            });\n    }\n}\n"
    },
    "contracts/rootMetrics/interfaces/DLPRootMetricsStorageV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"./IDLPRootMetrics.sol\";\n\n/**\n * @title Storage for DLPRootMetrics\n * @notice For future upgrades, do not change DLPRootMetricsStorageV1. Create a new\n * contract which implements DLPRootMetricsStorageV1\n */\nabstract contract DLPRootMetricsStorageV1 is IDLPRootMetrics {\n    address private _trustedForwarder; // not used anymore\n    IDLPRoot public override dlpRoot;\n\n    mapping(uint256 epochId => Epoch) internal _epochs;\n\n    mapping(RatingType ratingType => uint256 percentage) public override ratingPercentages;\n\n    address payable internal _foundationWalletAddress;\n}\n"
    },
    "contracts/rootMetrics/interfaces/ERC2771ContextUpgradeableMock.sol": {
      "content": "abstract contract ERC2771ContextUpgradeableMock {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n}\n"
    },
    "contracts/rootMetrics/interfaces/IDLPRootMetrics.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {IDLPRoot} from \"../../root/interfaces/IDLPRoot.sol\";\nimport {IDLPRootCore} from \"../../rootCore/interfaces/IDLPRootCore.sol\";\nimport {IDLPRootEpoch} from \"../../rootEpoch/interfaces/IDLPRootEpoch.sol\";\n\ninterface IDLPRootMetrics {\n    enum RatingType {\n        Stake,\n        Performance\n    }\n    struct EpochDlp {\n        uint256 performanceRating;\n        uint256 stakeAmountAdjustment;\n    }\n\n    struct Epoch {\n        uint256 totalPerformanceRating;\n        bool finalized; //deprecated\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\n    }\n\n    struct DlpRating {\n        uint256 dlpId;\n        uint256 rating;\n    }\n\n    struct EpochInfo {\n        uint256 totalPerformanceRating;\n        bool finalized;\n    }\n\n    struct EpochDlpInfo {\n        uint256 performanceRating;\n        uint256 stakeAmountAdjustment;\n    }\n\n    struct DlpPerformanceRating {\n        uint256 dlpId;\n        uint256 performanceRating;\n    }\n\n    struct StakeClaimableReward {\n        uint256 totalClaimableAmount;\n        StakeClaimableEpochReward[] stakeClaimableEpochRewards;\n    }\n\n    struct StakeClaimableEpochReward {\n        uint256 epochId;\n        uint256 claimableAmount;\n        bool fullRewardAmount;\n    }\n\n    struct DlpRewardApy {\n        uint256 dlpId;\n        uint256 APY; //annual percentage yield for stakers\n        uint256 EPY; //epoch percentage yield for stakers\n    }\n\n    function version() external pure returns (uint256);\n    function dlpRoot() external view returns (IDLPRoot);\n    function foundationWalletAddress() external view returns (address payable);\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\n    function ratingPercentages(RatingType rating) external view returns (uint256);\n    function topDlpsCustomized(\n        uint256 epochId,\n        uint256 numberOfDlps,\n        uint256[] memory dlpIds,\n        uint256[] memory customRatingPercentages\n    ) external view returns (DlpRating[] memory);\n    function topDlps(uint256 numberOfDlps) external view returns (DlpRating[] memory);\n    function topDlpIds(uint256 numberOfDlps) external view returns (uint256[] memory);\n    function estimatedDlpRewardPercentagesCustomized(\n        uint256[] memory dlpIds,\n        uint256[] memory customRatingPercentages\n    ) external view returns (DlpRewardApy[] memory);\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\n    function getMultiplier(uint256 index) external pure returns (uint256);\n    function pause() external;\n    function unpause() external;\n    function updateDlpRoot(address dlpRootAddress) external;\n    function updateFoundationWalletAddress(address payable newFoundationWalletAddress) external;\n    function updateEpochDlpStakeAmountAdjustment(\n        uint256 epochId,\n        uint256 dlpId,\n        uint256 adjustment,\n        bool isAddition\n    ) external;\n    function saveEpochPerformanceRatings(uint256 epochId, DlpPerformanceRating[] memory dlpPerformanceRatings) external;\n    function finalizeEpoch(uint256 epochId) external;\n    function updateRatingPercentages(uint256 stakeRatingPercentage, uint256 performanceRatingPercentage) external;\n}\n"
    },
    "contracts/rootStakingImplementation/DLPRootStakeImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"./interfaces/DLPRootStakeStorageV1.sol\";\n\n//import \"hardhat/console.sol\";\n\ncontract DLPRootStakeImplementation is DLPRootStakeStorageV1 {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Checkpoints for Checkpoints.Trace208;\n\n    // Key events for DLP lifecycle and operations\n    event DlpRegistered(\n        uint256 indexed dlpId,\n        address indexed dlpAddress,\n        address ownerAddress,\n        address treasuryAddress,\n        uint256 stakersPercentage,\n        string name,\n        string iconUrl,\n        string website,\n        string metadata\n    );\n\n    event DlpUpdated(\n        uint256 indexed dlpId,\n        address indexed dlpAddress,\n        address ownerAddress,\n        address treasuryAddress,\n        uint256 stakersPercentage,\n        string name,\n        string iconUrl,\n        string website,\n        string metadata\n    );\n\n    event DlpDeregistered(uint256 indexed dlpId);\n    event EpochCreated(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount);\n    event EpochOverridden(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount);\n    event EligibleDlpsLimitUpdated(uint256 newEligibleDlpsLimit);\n    event MinDlpStakersPercentageUpdated(uint256 newMinDlpStakersPercentage);\n    event MaxDlpStakersPercentageUpdated(uint256 newMaxDlpStakersPercentage);\n    event MinStakeAmountUpdated(uint256 newMinStakeAmount);\n    event DlpEligibilityThresholdUpdated(uint256 newDlpEligibilityThreshold);\n    event DlpSubEligibilityThresholdUpdated(uint256 newDlpSubEligibilityThreshold);\n    event EpochDlpsLimitUpdated(uint256 newEpochDlpsLimit);\n    event StakeWithdrawalDelayUpdated(uint256 newStakeWithdrawalDelay);\n    event RewardClaimDelayUpdated(uint256 newRewardClaimDelay);\n    event EpochSizeUpdated(uint256 newEpochSize);\n    event EpochRewardAmountUpdated(uint256 newEpochRewardAmount);\n    event MinDlpRegistrationStakeUpdated(uint256 newMinDlpRegistrationStake);\n    event StakeCreated(uint256 stakeId, address indexed staker, uint256 indexed dlpId, uint256 amount);\n    event StakeClosed(uint256 indexed stakeId);\n    event StakeWithdrawn(uint256 indexed stakeId);\n    event DlpBecameEligible(uint256 indexed dlpId);\n    event DlpBecameSubEligible(uint256 indexed dlpId);\n    event DlpBecomeIneligible(uint256 indexed dlpId);\n    event EpochDlpScoreSaved(uint256 indexed epochId, uint256 indexed dlpId, uint256 totalStakesScore);\n    event StakeRewardClaimed(uint256 indexed stakeId, uint256 indexed epochId, uint256 amount, bool isFinal);\n    event DlpRewardClaimed(uint256 indexed dlpId, uint256 indexed epochId, uint256 amount, bool isFinal);\n\n    // Custom errors\n    error InvalidParam();\n    error InvalidStakeAmount();\n    error StakeAlreadyWithdrawn();\n    error StakeNotClosed();\n    error StakeAlreadyClosed();\n    error StakeWithdrawalTooEarly();\n    error InvalidDlpId();\n    error InvalidDlpStatus();\n    error InvalidAddress();\n    error InvalidName();\n    error NotDlpOwner();\n    error NotStakeOwner();\n    error NothingToClaim();\n    error InvalidStakersPercentage();\n    error DLpAddressCannotBeChanged();\n    error TransferFailed();\n    error EpochNotEnded();\n    error EpochDlpScoreAlreadySaved();\n    error EpochRewardsAlreadyDistributed();\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {}\n\n    function stakeWithdrawalDelay() public view returns (uint256) {\n        return _stakeWithdrawalDelayCheckpoints.latest();\n    }\n\n    function rewardClaimDelay() public view returns (uint256) {\n        return _rewardClaimDelayCheckpoints.latest();\n    }\n\n    /**\n     * @notice Calculates stake score based on amount and duration\n     */\n    function calculateStakeScore(\n        uint256 stakeAmount,\n        uint256 stakeStartBlock,\n        uint256 blockNumber\n    ) public view returns (uint256) {\n        uint256 daysStaked = (blockNumber - stakeStartBlock) / daySize;\n        return (stakeAmount * dlpRootMetrics.getMultiplier(daysStaked)) / 100;\n    }\n\n    /**\n     * @notice Creates a new stake for a DLP\n     * @dev Validates stake amount and DLP status before creating\n     */\n    function _createStake(address stakerAddress, uint256 dlpId, uint256 amount) internal {\n        if (stakerAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (amount < minStakeAmount) {\n            revert InvalidStakeAmount();\n        }\n\n        Dlp storage dlp = _dlps[dlpId];\n\n        if (\n            dlp.status != DlpStatus.Registered &&\n            dlp.status != DlpStatus.Eligible &&\n            dlp.status != DlpStatus.SubEligible\n        ) {\n            revert InvalidDlpStatus();\n        }\n\n        Stake storage stake = _stakes[++stakesCount];\n        stake.amount = amount;\n        stake.startBlock = block.number;\n        stake.stakerAddress = stakerAddress;\n        stake.dlpId = dlpId;\n        stake.lastClaimedIndexEpochId = dlp.epochIdsCount;\n\n        Staker storage staker = _stakers[stakerAddress];\n        staker.dlpIds.add(dlpId);\n        staker.dlpStakeAmounts[dlpId] += amount;\n        staker.stakeIds.add(stakesCount);\n        staker.totalStakeAmount += amount;\n\n        _stakersList.add(stakerAddress);\n        _checkpointAdd(dlp.stakeAmountCheckpoints, amount);\n\n        payable(address(dlpRootStakesTreasury)).call{value: msg.value}(\"\");\n\n        emit StakeCreated(stakesCount, stakerAddress, dlpId, amount);\n\n        // Check if DLP becomes eligible\n        if (\n            dlp.status != DlpStatus.Eligible &&\n            _dlpComputedStakeAmount(dlpId) >= dlpEligibilityThreshold &&\n            _eligibleDlpsList.length() < eligibleDlpsLimit\n        ) {\n            _eligibleDlpsList.add(dlpId);\n            dlp.status = DlpStatus.Eligible;\n            emit DlpBecameEligible(dlpId);\n        }\n    }\n\n    /**\n     * @notice Closes a stake and updates DLP status if needed\n     */\n    function _closeStake(address stakerAddress, uint256 stakeId) internal {\n        Stake storage stake = _stakes[stakeId];\n\n        if (stake.stakerAddress != stakerAddress) {\n            revert NotStakeOwner();\n        }\n\n        if (stake.endBlock != 0) {\n            revert StakeAlreadyClosed();\n        }\n\n        Staker storage staker = _stakers[stakerAddress];\n        staker.dlpStakeAmounts[stake.dlpId] -= stake.amount;\n        staker.totalStakeAmount -= stake.amount;\n\n        Dlp storage dlp = _dlps[stake.dlpId];\n        _checkpointAdd(dlp.unstakeAmountCheckpoints, stake.amount);\n        stake.endBlock = block.number;\n\n        uint256 dlpStake = _dlpComputedStakeAmount(stake.dlpId);\n\n        // Update DLP status based on remaining stake\n        if (\n            dlpStake < dlpSubEligibilityThreshold &&\n            (dlp.status == DlpStatus.SubEligible || dlp.status == DlpStatus.Eligible)\n        ) {\n            dlp.status = DlpStatus.Registered;\n            _eligibleDlpsList.remove(stake.dlpId);\n        } else if (dlpStake < dlpEligibilityThreshold && dlp.status == DlpStatus.Eligible) {\n            dlp.status = DlpStatus.SubEligible;\n        }\n\n        emit StakeClosed(stakeId);\n    }\n\n    /**\n     * @notice Withdraws a closed stake after delay period\n     */\n    function _withdrawStake(address stakerAddress, uint256 stakeId) internal {\n        Stake storage stake = _stakes[stakeId];\n\n        if (stake.stakerAddress != stakerAddress) {\n            revert NotStakeOwner();\n        }\n\n        if (stake.withdrawn) {\n            revert StakeAlreadyWithdrawn();\n        }\n\n        if (stake.endBlock == 0) {\n            revert StakeNotClosed();\n        }\n\n        if (stake.endBlock + stakeWithdrawalDelay() > block.number) {\n            revert StakeWithdrawalTooEarly();\n        }\n\n        stake.withdrawn = true;\n\n        bool success = dlpRootStakesTreasury.transferVana(payable(stake.stakerAddress), stake.amount);\n        if (!success) {\n            revert TransferFailed();\n        }\n\n        emit StakeWithdrawn(stakeId);\n    }\n\n    /**\n     * @notice Internal function to register a new DLP\n     */\n    function _registerDlp(DlpRegistration calldata registrationInfo) internal {\n        if (registrationInfo.ownerAddress == address(0) || registrationInfo.treasuryAddress == address(0)) {\n            revert InvalidAddress();\n        }\n\n        if (dlpIds[registrationInfo.dlpAddress] != 0) {\n            revert InvalidDlpStatus();\n        }\n\n        if (dlpNameToId[registrationInfo.name] != 0 || bytes(registrationInfo.name).length == 0) {\n            revert InvalidName();\n        }\n\n        if (\n            registrationInfo.stakersPercentage < minDlpStakersPercentage ||\n            registrationInfo.stakersPercentage > maxDlpStakersPercentage\n        ) {\n            revert InvalidStakersPercentage();\n        }\n\n        if (msg.value < minDlpRegistrationStake) {\n            revert InvalidStakeAmount();\n        }\n\n        uint256 dlpId = ++dlpsCount;\n        Dlp storage dlp = _dlps[dlpId];\n\n        dlp.id = dlpId;\n        dlp.dlpAddress = registrationInfo.dlpAddress;\n        dlp.ownerAddress = registrationInfo.ownerAddress;\n        dlp.treasuryAddress = registrationInfo.treasuryAddress;\n        _checkpointPush(dlp.stakersPercentageCheckpoints, registrationInfo.stakersPercentage);\n        dlp.name = registrationInfo.name;\n        dlp.iconUrl = registrationInfo.iconUrl;\n        dlp.website = registrationInfo.website;\n        dlp.metadata = registrationInfo.metadata;\n        dlp.status = DlpStatus.Registered;\n        dlp.registrationBlockNumber = block.number;\n\n        dlpIds[registrationInfo.dlpAddress] = dlpId;\n\n        dlpNameToId[registrationInfo.name] = dlpId;\n\n        emit DlpRegistered(\n            dlpId,\n            registrationInfo.dlpAddress,\n            registrationInfo.ownerAddress,\n            registrationInfo.treasuryAddress,\n            registrationInfo.stakersPercentage,\n            registrationInfo.name,\n            registrationInfo.iconUrl,\n            registrationInfo.website,\n            registrationInfo.metadata\n        );\n\n        _createStake(registrationInfo.ownerAddress, dlpId, msg.value);\n    }\n\n    /**\n     * @notice Claims reward for a stake up to specified epoch\n     * @dev Calculates and distributes rewards based on stake score\n     */\n    function _claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) internal {\n        uint256 totalRewardAmount = _calculateStakeRewardUntilEpoch(stakeId, lastEpochToClaim, true);\n\n        if (totalRewardAmount == 0) {\n            revert NothingToClaim();\n        }\n\n        Stake storage stake = _stakes[stakeId];\n\n        bool success = dlpRootRewardsTreasury.transferVana(payable(stake.stakerAddress), totalRewardAmount);\n        if (!success) {\n            revert TransferFailed();\n        }\n    }\n\n    /**\n     * @notice Calculates reward for a stake up to specified epoch\n     */\n    function _calculateStakeRewardUntilEpoch(\n        uint256 stakeId,\n        uint256 lastEpochToClaim,\n        bool isClaim\n    ) internal returns (uint256) {\n        Stake storage stake = _stakes[stakeId];\n        Dlp storage dlp = _dlps[stake.dlpId];\n\n        uint256 totalRewardAmount;\n        uint256 epochToClaimIndex = stake.lastClaimedIndexEpochId + 1;\n        uint256 epochToClaim = dlp.epochIds[epochToClaimIndex];\n\n        while (epochToClaim > 0 && epochToClaim <= lastEpochToClaim) {\n            totalRewardAmount += _calculateStakeRewardByEpoch(stakeId, epochToClaim, isClaim);\n\n            epochToClaim = dlp.epochIds[++epochToClaimIndex];\n        }\n\n        return totalRewardAmount;\n    }\n\n    /**\n     * @notice Calculates reward for a stake up to specified epoch\n     */\n    function _calculateStakeRewardByEpoch(uint256 stakeId, uint256 epochId, bool isClaim) internal returns (uint256) {\n        Stake storage stake = _stakes[stakeId];\n        uint256 epochToClaimIndex = stake.lastClaimedIndexEpochId + 1;\n        uint256 rewardClaimDelayTmp = rewardClaimDelay();\n\n        Epoch storage epoch = _epochs[epochId];\n        EpochDlp storage epochDlp = epoch.dlps[stake.dlpId];\n\n        if (epochId == 0 || epochDlp.totalStakesScore == 0 || (stake.endBlock > 0 && epoch.endBlock > stake.endBlock)) {\n            return 0;\n        }\n\n        uint256 stakeScore = calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock);\n\n        uint256 rewardAmount = (((epochDlp.rewardAmount * epochDlp.stakersPercentage) / 100e18) * stakeScore) /\n            epochDlp.totalStakesScore;\n\n        uint256 numberOfBlocks = block.number - epoch.endBlock;\n\n        bool fullRewardAmount = true;\n\n        if (rewardClaimDelayTmp > 0 && numberOfBlocks < rewardClaimDelayTmp) {\n            rewardAmount = (rewardAmount * numberOfBlocks) / rewardClaimDelayTmp;\n            fullRewardAmount = false;\n        }\n\n        if (stake.claimedAmounts[epochId] >= rewardAmount) {\n            return 0;\n        }\n\n        uint256 claimableAmount = rewardAmount - stake.claimedAmounts[epochId];\n        if (isClaim) {\n            stake.claimedAmounts[epochId] = rewardAmount;\n            emit StakeRewardClaimed(stakeId, epochId, rewardAmount, fullRewardAmount);\n\n            if (fullRewardAmount) {\n                stake.lastClaimedIndexEpochId = epochToClaimIndex;\n            }\n        }\n\n        return claimableAmount;\n    }\n\n    /**\n     * @notice Helper function to add value to checkpoint\n     */\n    function _checkpointAdd(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\n        return store.push(toUint48(block.number), store.latest() + toUint208(delta));\n    }\n\n    /**\n     * @notice Helper function to set checkpoint value\n     */\n    function _checkpointPush(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\n        return store.push(toUint48(block.number), toUint208(delta));\n    }\n\n    /**\n     * @notice Get current DLP stake amount\n     */\n    function _dlpComputedStakeAmount(uint256 dlpId) internal view returns (uint256) {\n        return _dlps[dlpId].stakeAmountCheckpoints.latest() - _dlps[dlpId].unstakeAmountCheckpoints.latest();\n    }\n\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n}\n"
    },
    "contracts/rootStakingImplementation/interfaces/DLPRootStakeStorageV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"./IDLPRootStake.sol\";\n\n/**\n * @notice For future upgrades, do not change DLPRootStorageV1. Create a new\n * contract which implements DLPRootStorageV1\n */\nabstract contract DLPRootStakeStorageV1 is IDLPRootStake {\n    address internal _trustedForwarder;\n    uint256 public eligibleDlpsLimit; // Must be below 500 for gas efficiency\n    uint256 public epochDlpsLimit; // Max DLPs per epoch\n    uint256 public minStakeAmount; // Minimum stake allowed\n    uint256 public minDlpStakersPercentage; // Min % of rewards to stakers (in 1e18)\n    uint256 public minDlpRegistrationStake; // Min stake for new DLP registration\n    uint256 public dlpEligibilityThreshold; // Min stake for full eligibility\n    uint256 public dlpSubEligibilityThreshold; // Min stake for sub-eligibility\n\n    // Historical values tracked using checkpoints\n    Checkpoints.Trace208 internal _stakeWithdrawalDelayCheckpoints;\n    Checkpoints.Trace208 internal _rewardClaimDelayCheckpoints;\n\n    uint256 public epochRewardAmount; // Rewards per epoch\n    uint256 public epochSize; // Blocks per epoch\n    uint256 public daySize; // Blocks per day\n\n    // DLP management\n    uint256 public dlpsCount;\n    mapping(uint256 dlpId => Dlp dlp) internal _dlps;\n    mapping(address dlpAddress => uint256 dlpId) public dlpIds;\n    EnumerableSet.UintSet internal _eligibleDlpsList;\n\n    // Epoch tracking\n    uint256 public epochsCount;\n    mapping(uint256 epochId => Epoch epoch) internal _epochs;\n\n    // Staker management\n    EnumerableSet.AddressSet internal _stakersList;\n    mapping(address stakerAddress => Staker staker) internal _stakers;\n\n    // Stake tracking\n    uint256 public stakesCount;\n    mapping(uint256 stakeId => Stake stake) internal _stakes;\n\n    uint256 public maxDlpStakersPercentage; // Max % of rewards to stakers (in 1e18)\n\n    mapping(string dlpName => uint256 dlpId) public dlpNameToId;\n\n    IDLPRootMetrics public dlpRootMetrics;\n    IDLPRootTreasury public dlpRootRewardsTreasury;\n    IDLPRootTreasury public dlpRootStakesTreasury;\n    address public dlpRootStakeImplementation;\n}\n"
    },
    "contracts/rootStakingImplementation/interfaces/IDLPRootStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/structs/Checkpoints.sol\";\nimport {IDLPRootMetrics} from \"../../rootMetrics/interfaces/IDLPRootMetrics.sol\";\nimport {IDLPRootTreasury} from \"../../rootTreasury/interfaces/IDLPRootTreasury.sol\";\n\ninterface IDLPRootStake {\n    // DLP lifecycle states from registration to deregistration\n    enum DlpStatus {\n        None,\n        Registered,\n        Eligible, // Can participate in epochs\n        SubEligible, // Below threshold but above minimum\n        Deregistered\n    }\n\n    struct Dlp {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress; // Receives non-staker rewards\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\n        Checkpoints.Trace208 unstakeAmountCheckpoints; // Historical unstake amounts\n        uint256 epochIdsCount; // Number of participated epochs\n        mapping(uint256 index => uint256 epochIds) epochIds;\n    }\n\n    struct EpochDlp {\n        uint256 rewardAmount; // Rewards allocated to this DLP\n        uint256 stakersPercentage; // % going to stakers vs treasury\n        uint256 totalStakesScore; // Sum of weighted stake scores\n        bool rewardClaimed; // True if reward has been claimed\n    }\n\n    struct Epoch {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 rewardAmount;\n        bool isFinalised;\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\n    }\n\n    struct Stake {\n        address stakerAddress;\n        uint256 dlpId;\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock; // 0 if active\n        bool withdrawn;\n        uint256 lastClaimedIndexEpochId;\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\n    }\n\n    struct Staker {\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\n        uint256 totalStakeAmount;\n    }\n\n    // Read-only struct views\n    struct EpochInfo {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 reward;\n        bool isFinalised;\n        uint256[] dlpIds;\n    }\n\n    struct DlpInfo {\n        uint256 id;\n        address dlpAddress;\n        address ownerAddress;\n        address treasuryAddress;\n        uint256 stakersPercentage;\n        uint256 stakersPercentageEpoch;\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n        DlpStatus status;\n        uint256 registrationBlockNumber;\n        uint256 stakeAmount;\n        uint256[] epochIds;\n    }\n\n    struct DlpEpochInfo {\n        uint256 stakeAmount; // 0 if not a top DLP\n        bool isTopDlp; // In top DLPs list this epoch\n        uint256 rewardAmount; // 0 if not top DLP or epoch not finished\n        uint256 stakersPercentage; // 0 if not top DLP\n        uint256 totalStakesScore; // 0 if not top DLP\n        bool rewardClaimed;\n    }\n\n    struct StakeInfo {\n        uint256 id;\n        address stakerAddress;\n        uint256 dlpId;\n        uint256 amount;\n        uint256 startBlock;\n        uint256 endBlock;\n        bool withdrawn;\n        uint256 lastClaimedEpochId;\n    }\n\n    struct DlpRewardApy {\n        uint256 dlpId;\n        uint256 APY; //annual percentage yield\n        uint256 EPY; //epoch percentage yield\n    }\n\n    struct EpochDlpsTotalStakesScore {\n        uint256 epochId;\n        uint256 dlpId;\n        uint256 totalStakesScore;\n    }\n\n    struct DlpRegistration {\n        address dlpAddress;\n        address ownerAddress;\n        address payable treasuryAddress;\n        uint256 stakersPercentage;\n        string name;\n        string iconUrl;\n        string website;\n        string metadata;\n    }\n}\n"
    },
    "contracts/rootTreasury/DLPRootTreasuryImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"./interfaces/DLPRootTreasuryStorageV1.sol\";\n\ncontract DLPRootTreasuryImplementation is\n    UUPSUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    DLPRootTreasuryStorageV1\n{\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    receive() external payable {}\n\n    function initialize(address ownerAddress, address dlpRootAddress) external initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n        __Pausable_init();\n\n        dlpRoot = IDLPRoot(dlpRootAddress);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\n        _grantRole(DEFAULT_ADMIN_ROLE, dlpRootAddress);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    function version() external pure virtual override returns (uint256) {\n        return 1;\n    }\n\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function updateDlpRoot(address dlpRootAddress) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        _revokeRole(DEFAULT_ADMIN_ROLE, address(dlpRoot));\n        dlpRoot = IDLPRoot(dlpRootAddress);\n        _grantRole(DEFAULT_ADMIN_ROLE, dlpRootAddress);\n    }\n\n    function transferVana(\n        address payable to,\n        uint256 value\n    ) external override whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) returns (bool) {\n        (bool success, ) = to.call{value: value}(\"\");\n\n        return success;\n    }\n}\n"
    },
    "contracts/rootTreasury/interfaces/DLPRootTreasuryStorageV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport \"./IDLPRootTreasury.sol\";\n\n/**\n * @title Storage for DLPRootTreasury\n * @notice For future upgrades, do not change DLPRootTreasuryStorageV1. Create a new\n * contract which implements DLPRootTreasuryStorageV1\n */\nabstract contract DLPRootTreasuryStorageV1 is IDLPRootTreasury {\n    IDLPRoot public override dlpRoot;\n}\n"
    },
    "contracts/rootTreasury/interfaces/IDLPRootTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {IDLPRoot} from \"../../root/interfaces/IDLPRoot.sol\";\n\ninterface IDLPRootTreasury {\n    function version() external pure returns (uint256);\n    function dlpRoot() external view returns (IDLPRoot);\n    function updateDlpRoot(address dlpRootAddress) external;\n    function transferVana(address payable to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/token/DAT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport {ERC20Votes} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\nimport {Nonces} from \"@openzeppelin/contracts/utils/Nonces.sol\";\nimport {Ownable, Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract DAT is ERC20, ERC20Permit, ERC20Votes, Ownable2Step {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address public admin;\n    bool public mintBlocked;\n    EnumerableSet.AddressSet private _blockList;\n\n    /**\n     * @dev Emitted when the pause is triggered by `owner`.\n     */\n    event MintBlocked();\n\n    /**\n     * @dev Emitted when the admin is updated.\n     *\n     * @param oldAdmin    the old admin address\n     * @param newAdmin    the new admin address\n     */\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\n\n    /**\n     * @dev Emitted when and address is added to the blockList\n     *\n     * @param blockedAddress    the address to be blocked\n     */\n    event AddressBlocked(address indexed blockedAddress);\n\n    /**\n     * @dev Emitted when and address is removed from the blockList\n     *\n     * @param unblockedAddress    the address to be unblocked\n     */\n    event AddressUnblocked(address indexed unblockedAddress);\n\n    /**\n     * @dev The operation failed because the mint is blocked.\n     */\n    error EnforceMintBlocked();\n\n    /**\n     * @dev The caller account is not authorized to perform an admin operation.\n     */\n    error UnauthorizedAdminAction(address account);\n\n    /**\n     * @dev The account is blocked\n     */\n    error AccountBlocked();\n\n    modifier whenMintIsAllowed() {\n        if (mintBlocked) {\n            revert EnforceMintBlocked();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (msg.sender != admin) {\n            revert UnauthorizedAdminAction(msg.sender);\n        }\n        _;\n    }\n\n    modifier whenNotBlocked(address from, address to) {\n        if (_blockList.contains(from) || _blockList.contains(to)) {\n            revert AccountBlocked();\n        }\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract by setting a `name`, a `symbol` and an `ownerAddress`.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        address ownerAddress\n    ) ERC20(name, symbol) ERC20Permit(name) Ownable(ownerAddress) {}\n\n    // Overrides IERC6372 functions to make the token & governor timestamp-based\n    function clock() public view override returns (uint48) {\n        return uint48(block.timestamp);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public pure override returns (string memory) {\n        return \"mode=timestamp\";\n    }\n\n    /**\n     * @dev Returns the blockList length\n     */\n    function blockListLength() external view returns (uint256) {\n        return _blockList.length();\n    }\n\n    /**\n     * @dev Returns the address at the given index in the blockList\n     */\n    function blockListAt(uint256 _index) external view returns (address) {\n        return _blockList.at(_index);\n    }\n\n    function _update(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20, ERC20Votes) whenNotBlocked(from, to) {\n        super._update(from, to, amount);\n    }\n\n    /**\n     * @dev Override _delegate to add a check for blocked addresses\n     */\n    function _delegate(\n        address account,\n        address delegatee\n    ) internal virtual override whenNotBlocked(account, delegatee) {\n        super._delegate(account, delegatee);\n    }\n\n    /**\n     * @dev Override _delegate to add a check for blocked addresses\n     */\n    function _transferVotingUnits(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override whenNotBlocked(from, to) {\n        super._transferVotingUnits(from, to, amount);\n    }\n\n    /**\n     * @dev Override _getVotingUnits to return 0 for blocked addresses\n     */\n    function _getVotingUnits(address account) internal view override returns (uint256) {\n        if (_blockList.contains(account)) {\n            return 0;\n        }\n        return super._getVotingUnits(account);\n    }\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) public view virtual override returns (uint256) {\n        if (_blockList.contains(account)) {\n            return 0;\n        }\n\n        return super.getVotes(account);\n    }\n\n    /**\n     * @dev Override getPastVotes to return 0 for blocked addresses\n     */\n    function getPastVotes(address account, uint256 timepoint) public view override returns (uint256) {\n        if (_blockList.contains(account)) {\n            return 0;\n        }\n        return super.getPastVotes(account, timepoint);\n    }\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for `owner`.\n     */\n    function nonces(address owner) public view virtual override(ERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @dev Mints `amount` tokens to `to`.\n     *\n     * @param to     the address to mint tokens to\n     * @param amount the amount of tokens to mint\n     *\n     * See {ERC20-_mint}.\n     */\n    function mint(address to, uint256 amount) external virtual onlyOwner whenMintIsAllowed {\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Changes admin address\n     */\n    function changeAdmin(address newAdmin) external virtual onlyOwner {\n        address oldAdmin = admin;\n        admin = newAdmin;\n        emit AdminChanged(oldAdmin, newAdmin);\n    }\n\n    /**\n     * @dev Blocks feature mints\n     *\n     * Once this method is invoked there is no way to mint more tokens\n     */\n    function blockMint() external virtual onlyOwner whenMintIsAllowed {\n        mintBlocked = true;\n\n        emit MintBlocked();\n    }\n\n    /**\n     * @dev Adds an address to the blockList. This address is not able to transfer any more\n     */\n    function blockAddress(address addressToBeBlocked) external virtual onlyAdmin {\n        _delegate(addressToBeBlocked, address(0));\n\n        _blockList.add(addressToBeBlocked);\n\n        emit AddressBlocked(addressToBeBlocked);\n    }\n\n    /**\n     * @dev Removes an address from the blockList\n     */\n    function unblockAddress(address addressToBeUnblocked) external virtual onlyAdmin {\n        _blockList.remove(addressToBeUnblocked);\n\n        emit AddressUnblocked(addressToBeUnblocked);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}