{
  "address": "0xb06FE5d21d9178775eBf410854Ff3fDD6E494AeE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AllEligibleDlpsMustHavePerformanceRatings",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "DlpMustBeEligibleAndVerified",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochAlreadyFinalised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochNotEndedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochRewardsAlreadyDistributed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEpoch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFoundationWalletAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPerformanceRating",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRatingPercentages",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceRating",
          "type": "uint256"
        }
      ],
      "name": "DlpEpochPerformanceRatingSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "EpochFinalised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPerformanceRating",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFinalized",
          "type": "bool"
        }
      ],
      "name": "EpochPerformanceRatingsSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IDLPRootMetrics.RatingType",
          "name": "ratingType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "RatingPercentagesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DLP_ROOT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDlpsStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDlpsPerformanceRating",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "customRatingPercentages",
          "type": "uint256[]"
        }
      ],
      "name": "calculateDlpRating",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpRoot",
      "outputs": [
        {
          "internalType": "contract IDLPRoot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "epochDlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "performanceRating",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmountAdjustment",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootMetrics.EpochDlpInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "epochs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalPerformanceRating",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            }
          ],
          "internalType": "struct IDLPRootMetrics.EpochInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "dlpIds",
          "type": "uint256[]"
        }
      ],
      "name": "estimatedDlpRewardPercentages",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "APY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "EPY",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootMetrics.DlpRewardApy[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "dlpIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "customRatingPercentages",
          "type": "uint256[]"
        }
      ],
      "name": "estimatedDlpRewardPercentagesCustomized",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "APY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "EPY",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootMetrics.DlpRewardApy[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "finalizeEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundationWalletAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daysStaked",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dlpRootAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeRatingPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "performanceRatingPercentage",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IDLPRootMetrics.RatingType",
          "name": "ratingType",
          "type": "uint8"
        }
      ],
      "name": "ratingPercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "performanceRating",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootMetrics.DlpPerformanceRating[]",
          "name": "dlpPerformanceRatings",
          "type": "tuple[]"
        }
      ],
      "name": "saveEpochPerformanceRatings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "topDlpIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfDlps",
          "type": "uint256"
        }
      ],
      "name": "topDlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rating",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootMetrics.DlpRating[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfDlps",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "dlpIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "customRatingPercentages",
          "type": "uint256[]"
        }
      ],
      "name": "topDlpsCustomized",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rating",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRootMetrics.DlpRating[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpRootAddress",
          "type": "address"
        }
      ],
      "name": "updateDlpRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAddition",
          "type": "bool"
        }
      ],
      "name": "updateEpochDlpStakeAmountAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "foundationWalletAddress",
          "type": "address"
        }
      ],
      "name": "updateFoundationWalletAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeRatingPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "performanceRatingPercentage",
          "type": "uint256"
        }
      ],
      "name": "updateRatingPercentages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf874dc7027158646d1801b206682b7f98b1322a9f3d5613a3d741deaf16e12d0",
  "receipt": {
    "to": null,
    "from": "0x2AC93684679a5bdA03C6160def908CdB8D46792f",
    "contractAddress": "0xb06FE5d21d9178775eBf410854Ff3fDD6E494AeE",
    "transactionIndex": 24,
    "gasUsed": "3850530",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdffb0e0e21e7e43f736fb1e653e61f459bf4f536070ddfb73d0dd47899c1c09e",
    "transactionHash": "0xf874dc7027158646d1801b206682b7f98b1322a9f3d5613a3d741deaf16e12d0",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 2106645,
        "transactionHash": "0xf874dc7027158646d1801b206682b7f98b1322a9f3d5613a3d741deaf16e12d0",
        "address": "0xb06FE5d21d9178775eBf410854Ff3fDD6E494AeE",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 36,
        "blockHash": "0xdffb0e0e21e7e43f736fb1e653e61f459bf4f536070ddfb73d0dd47899c1c09e"
      }
    ],
    "blockNumber": 2106645,
    "cumulativeGasUsed": "13736073",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "1f3018f734273939cf39145cdecb8e9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllEligibleDlpsMustHavePerformanceRatings\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"DlpMustBeEligibleAndVerified\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochAlreadyFinalised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochNotEndedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochRewardsAlreadyDistributed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFoundationWalletAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPerformanceRating\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRatingPercentages\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceRating\",\"type\":\"uint256\"}],\"name\":\"DlpEpochPerformanceRatingSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"EpochFinalised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPerformanceRating\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"}],\"name\":\"EpochPerformanceRatingsSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IDLPRootMetrics.RatingType\",\"name\":\"ratingType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"RatingPercentagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DLP_ROOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDlpsStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDlpsPerformanceRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"customRatingPercentages\",\"type\":\"uint256[]\"}],\"name\":\"calculateDlpRating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRoot\",\"outputs\":[{\"internalType\":\"contract IDLPRoot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"epochDlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"performanceRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmountAdjustment\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootMetrics.EpochDlpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalPerformanceRating\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"}],\"internalType\":\"struct IDLPRootMetrics.EpochInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"}],\"name\":\"estimatedDlpRewardPercentages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EPY\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootMetrics.DlpRewardApy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"customRatingPercentages\",\"type\":\"uint256[]\"}],\"name\":\"estimatedDlpRewardPercentagesCustomized\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EPY\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootMetrics.DlpRewardApy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"finalizeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysStaked\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dlpRootAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeRatingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceRatingPercentage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IDLPRootMetrics.RatingType\",\"name\":\"ratingType\",\"type\":\"uint8\"}],\"name\":\"ratingPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceRating\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootMetrics.DlpPerformanceRating[]\",\"name\":\"dlpPerformanceRatings\",\"type\":\"tuple[]\"}],\"name\":\"saveEpochPerformanceRatings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfDlps\",\"type\":\"uint256\"}],\"name\":\"topDlpIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfDlps\",\"type\":\"uint256\"}],\"name\":\"topDlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rating\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootMetrics.DlpRating[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfDlps\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dlpIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"customRatingPercentages\",\"type\":\"uint256[]\"}],\"name\":\"topDlpsCustomized\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rating\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRootMetrics.DlpRating[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpRootAddress\",\"type\":\"address\"}],\"name\":\"updateDlpRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAddition\",\"type\":\"bool\"}],\"name\":\"updateEpochDlpStakeAmountAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"foundationWalletAddress\",\"type\":\"address\"}],\"name\":\"updateFoundationWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeRatingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceRatingPercentage\",\"type\":\"uint256\"}],\"name\":\"updateRatingPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"estimatedDlpRewardPercentagesCustomized(uint256[],uint256[])\":{\"details\":\"Calculates based on ratings and current epoch parameters\"},\"finalizeEpoch(uint256)\":{\"params\":{\"epochId\":\"The epoch ID to save performanceRatings for\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"saveEpochPerformanceRatings(uint256,(uint256,uint256)[])\":{\"params\":{\"dlpPerformanceRatings\":\"Array of DLP performanceRatings to save\",\"epochId\":\"The epoch ID to save performanceRatings for\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"topDlpsCustomized(uint256,uint256,uint256[],uint256[])\":{\"details\":\"Uses insertion sort to maintain ordered list\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimatedDlpRewardPercentagesCustomized(uint256[],uint256[])\":{\"notice\":\"Estimates reward percentages for given DLPs\"},\"finalizeEpoch(uint256)\":{\"notice\":\"Saves or updates epoch performanceRatings for DLPs\"},\"getMultiplier(uint256)\":{\"notice\":\"Returns stake score multiplier based number of days staked\"},\"saveEpochPerformanceRatings(uint256,(uint256,uint256)[])\":{\"notice\":\"Saves or updates epoch performanceRatings for DLPs\"},\"topDlpsCustomized(uint256,uint256,uint256[],uint256[])\":{\"notice\":\"Gets top DLP IDs by rating (performanceRating + stakeRating)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rootMetrics/DLPRootMetricsImplementation.sol\":\"DLPRootMetricsImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/root/interfaces/IDLPRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\nimport {IDLPRootTreasury} from \\\"../../rootTreasury/interfaces/IDLPRootTreasury.sol\\\";\\n\\ninterface IDLPRoot {\\n    struct Stake {\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock; // 0 if active\\n        bool withdrawn;\\n        uint256 lastClaimedIndexEpochId; //todo: rename to lastClaimedEpochId\\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\\n        uint256 movedAmount; // Amount moved to new stake\\n    }\\n\\n    struct Staker {\\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\\n        uint256 totalStakeAmount;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootCore() external view returns (IDLPRootCore);\\n    function dlpRootEpoch() external view returns (IDLPRootEpoch);\\n\\n    // Additional view functions\\n    function minStakeAmount() external view returns (uint256);\\n    function stakeWithdrawalDelay() external view returns (uint256);\\n    function rewardClaimDelay() external view returns (uint256);\\n\\n    function stakersListCount() external view returns (uint256);\\n    function stakersListAt(uint256 index) external view returns (address);\\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\\n    function stakesCount() external view returns (uint256);\\n\\n    struct StakeInfo {\\n        uint256 id;\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        bool withdrawn;\\n        uint256 lastClaimedEpochId;\\n    }\\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\\n\\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\\n    function calculateStakeScore(\\n        uint256 stakeAmount,\\n        uint256 stakeStartBlock,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\\n    function updateDlpRootCore(address newDlpRootCoreAddress) external;\\n    function updateDlpRootEpoch(address newDlpRootEpochAddress) external;\\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\\n\\n    // Staking and rewards\\n    function createStake(uint256 dlpId) external payable;\\n    function createStakeOnBehalf(uint256 dlpId, address stakeOwner) external payable;\\n    function closeStakes(uint256[] memory stakeIds) external;\\n    function withdrawStakes(uint256[] memory stakeIds) external;\\n    function migrateStake(uint256 stakeId, uint256 newDlpId, uint256 newAmount) external;\\n    function claimStakesReward(uint256[] memory stakeIds) external;\\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\\n}\\n\",\"keccak256\":\"0x0ae279e92abc09eb9ab54021b326ec3edb0ca951990c1e8e9a5d8e9c99dd47d6\",\"license\":\"MIT\"},\"contracts/rootCore/interfaces/IDLPRootCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\n\\ninterface IDLPRootCore {\\n    // DLP lifecycle states from registration to deregistration\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Eligible, // Can participate in epochs\\n        SubEligible, // Below threshold but above minimum\\n        Deregistered\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress; // Receives non-staker rewards\\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\\n        bool isVerified;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\\n    function eligibleDlpsListCount() external view returns (uint256);\\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\\n\\n    function minDlpStakersPercentage() external view returns (uint256);\\n    function maxDlpStakersPercentage() external view returns (uint256);\\n    function minDlpRegistrationStake() external view returns (uint256);\\n    function dlpEligibilityThreshold() external view returns (uint256);\\n    function dlpSubEligibilityThreshold() external view returns (uint256);\\n    function eligibleDlpsLimit() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n\\n    struct DlpInfo {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address treasuryAddress;\\n        uint256 stakersPercentage;\\n        uint256 stakersPercentageEpoch;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 stakeAmount;\\n        bool isVerified;\\n    }\\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\\n\\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateDlpStakersPercentages(\\n        uint256 newMinDlpStakersPercentage,\\n        uint256 newMaxDlpStakersPercentage\\n    ) external;\\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\\n    function updateDlpEligibilityThresholds(\\n        uint256 newDlpSubEligibilityThreshold,\\n        uint256 newDlpEligibilityThreshold\\n    ) external;\\n    function updateDlpRoot(address newDlpRootAddress) external;\\n\\n    struct DlpRegistration {\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress;\\n        uint256 stakersPercentage;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n    }\\n\\n    // DLP lifecycle management\\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\\n    function updateDlpVerification(uint256 dlpId, bool isVerified) external;\\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\\n    function deregisterDlp(uint256 dlpId) external;\\n    function addDlpStake(uint256 dlpId, uint256 amount) external;\\n    function removeDlpStake(uint256 dlpId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdc0424a154d6e9bd25602d93a59a000e03760853d0c864d371078c1dc20af17b\",\"license\":\"MIT\"},\"contracts/rootEpoch/interfaces/IDLPRootEpoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\n\\ninterface IDLPRootEpoch {\\n    struct EpochDlp {\\n        uint256 ownerRewardAmount; // Rewards allocated to the DLP owner\\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\\n        uint256 totalStakesScore; // Sum of weighted stake scores\\n        uint256 rewardClaimed; // True if reward has been claimed\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function epochDlpsLimit() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function daySize() external view returns (uint256);\\n    function epochsCount() external view returns (uint256);\\n\\n    // Read-only struct views\\n    struct EpochInfo {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function epochRewardAmount() external view returns (uint256);\\n\\n    struct EpochDlpInfo {\\n        uint256 stakeAmount; // 0 if not a top DLP\\n        bool isTopDlp; // In top DLPs list this epoch\\n        uint256 ownerRewardAmount; // 0 if not top DLP or epoch not finished\\n        uint256 stakersPercentage; // 0 if not top DLP\\n        uint256 totalStakesScore; // 0 if not top DLP\\n        uint256 rewardClaimed;\\n        uint256 stakersRewardAmount;\\n    }\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\\n\\n    function epochDlpStakeAmount(uint256 epochId, uint256 dlpId) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n\\n    function updateDlpRoot(address newDlpRootAddress) external;\\n\\n    struct EpochDlpsTotalStakesScore {\\n        uint256 epochId;\\n        uint256 dlpId;\\n        uint256 totalStakesScore;\\n    }\\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\\n\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n    struct EpochDlpReward {\\n        uint256 dlpId;\\n        uint256 ownerRewardAmount;\\n        uint256 stakersRewardAmount;\\n    }\\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\\n}\\n\",\"keccak256\":\"0x2cb595764099116d4e0356f35fd40fcb6f31b3408af16461e2e6b1c8ee60e23d\",\"license\":\"MIT\"},\"contracts/rootMetrics/DLPRootMetricsImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/ERC2771ContextUpgradeableMock.sol\\\";\\nimport \\\"./interfaces/DLPRootMetricsStorageV1.sol\\\";\\n\\ncontract DLPRootMetricsImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ERC2771ContextUpgradeableMock,\\n    DLPRootMetricsStorageV1\\n{\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant DLP_ROOT_ROLE = keccak256(\\\"DLP_ROOT_ROLE\\\");\\n\\n    event EpochFinalised(uint256 indexed epochId);\\n    event EpochPerformanceRatingsSaved(uint256 indexed epochId, uint256 totalPerformanceRating, bool isFinalized);\\n    event DlpEpochPerformanceRatingSaved(uint256 indexed epochId, uint256 indexed dlpId, uint256 performanceRating);\\n    event RatingPercentagesUpdated(RatingType ratingType, uint256 percentage);\\n\\n    error EpochAlreadyFinalised();\\n    error EpochNotEndedYet();\\n    error InvalidPerformanceRating();\\n    error InvalidEpoch();\\n    error AllEligibleDlpsMustHavePerformanceRatings();\\n    error InvalidRatingPercentages();\\n    error EpochRewardsAlreadyDistributed();\\n    error DlpMustBeEligibleAndVerified(uint256 dlpId);\\n    error InvalidFoundationWalletAddress();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address ownerAddress,\\n        address dlpRootAddress,\\n        uint256 stakeRatingPercentage,\\n        uint256 performanceRatingPercentage\\n    ) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n\\n        dlpRoot = IDLPRoot(dlpRootAddress);\\n\\n        _updateRatingPercentages(stakeRatingPercentage, performanceRatingPercentage);\\n\\n        _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setRoleAdmin(MANAGER_ROLE, MAINTAINER_ROLE);\\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\\n        _grantRole(MANAGER_ROLE, ownerAddress);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function foundationWalletAddress() external view override returns (address payable) {\\n        if (_foundationWalletAddress == address(0)) {\\n            revert InvalidFoundationWalletAddress();\\n        }\\n        return _foundationWalletAddress;\\n    }\\n\\n    function epochs(uint256 epochId) external view override returns (EpochInfo memory) {\\n        Epoch storage epoch = _epochs[epochId];\\n        return\\n            EpochInfo({\\n                totalPerformanceRating: epoch.totalPerformanceRating,\\n                finalized: dlpRoot.dlpRootEpoch().epochs(epochId).isFinalised\\n            });\\n    }\\n\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view override returns (EpochDlpInfo memory) {\\n        return\\n            EpochDlpInfo({\\n                performanceRating: _epochs[epochId].dlps[dlpId].performanceRating,\\n                stakeAmountAdjustment: _epochs[epochId].dlps[dlpId].stakeAmountAdjustment\\n            });\\n    }\\n\\n    /**\\n     * @notice Gets top DLP IDs by rating (performanceRating + stakeRating)\\n     * @dev Uses insertion sort to maintain ordered list\\n     */\\n    function topDlpsCustomized(\\n        uint256 epochId,\\n        uint256 numberOfDlps,\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) public view override returns (DlpRating[] memory) {\\n        //sum of stakeAmount for all dlps in the list\\n        uint256 totalStakeAmount;\\n        uint256 totalPerformanceRating;\\n\\n        for (uint256 i = 0; i < dlpIds.length; ) {\\n            totalStakeAmount += _dlpEpochStakeAmount(dlpIds[i], epochId);\\n            totalPerformanceRating += _epochs[epochId].dlps[dlpIds[i]].performanceRating;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 dlpIdsCount = dlpIds.length;\\n\\n        numberOfDlps = numberOfDlps < dlpIdsCount ? numberOfDlps : dlpIdsCount;\\n\\n        DlpRating[] memory topDlpList = new DlpRating[](numberOfDlps);\\n\\n        if (numberOfDlps == 0) {\\n            return topDlpList;\\n        }\\n\\n        for (uint256 i = 0; i < dlpIdsCount; ) {\\n            uint256 currentDlpId = dlpIds[i];\\n\\n            uint256 currentRating = calculateDlpRating(\\n                currentDlpId,\\n                epochId,\\n                totalStakeAmount,\\n                totalPerformanceRating,\\n                customRatingPercentages\\n            );\\n\\n            uint256 position = numberOfDlps;\\n            for (uint256 j = 0; j < numberOfDlps; ) {\\n                if (\\n                    currentRating > topDlpList[j].rating ||\\n                    (currentRating == topDlpList[j].rating && currentDlpId < topDlpList[j].dlpId)\\n                ) {\\n                    position = j;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            if (position < numberOfDlps) {\\n                for (uint256 j = numberOfDlps - 1; j > position; ) {\\n                    topDlpList[j].dlpId = topDlpList[j - 1].dlpId;\\n                    topDlpList[j].rating = topDlpList[j - 1].rating;\\n\\n                    unchecked {\\n                        --j;\\n                    }\\n                }\\n\\n                topDlpList[position] = DlpRating({dlpId: currentDlpId, rating: currentRating});\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return topDlpList;\\n    }\\n\\n    function topDlps(uint256 numberOfDlps) public view override returns (DlpRating[] memory) {\\n        return\\n            topDlpsCustomized(\\n                dlpRoot.dlpRootEpoch().epochsCount(),\\n                numberOfDlps,\\n                dlpRoot.dlpRootCore().eligibleDlpsListValues(),\\n                new uint256[](0)\\n            );\\n    }\\n\\n    function topDlpIds(uint256 numberOfDlps) public view override returns (uint256[] memory) {\\n        DlpRating[] memory dlpRating = topDlps(numberOfDlps);\\n\\n        uint256 topDlpsCount = dlpRating.length;\\n\\n        uint256[] memory topDlpIdsList = new uint256[](topDlpsCount);\\n        for (uint256 i = 0; i < topDlpsCount; ) {\\n            topDlpIdsList[i] = dlpRating[i].dlpId;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return topDlpIdsList;\\n    }\\n\\n    /**\\n     * @notice Estimates reward percentages for given DLPs\\n     * @dev Calculates based on ratings and current epoch parameters\\n     */\\n    function estimatedDlpRewardPercentagesCustomized(\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) public view override returns (DlpRewardApy[] memory) {\\n        TopDlpTotalRatings memory topDlpTotalRatings = _calculateTopDlpTotalRatings(\\n            dlpRoot.dlpRootEpoch().epochsCount(),\\n            customRatingPercentages\\n        );\\n\\n        DlpRewardApy[] memory result = new DlpRewardApy[](dlpIds.length);\\n        uint256 i;\\n\\n        for (i = 0; i < dlpIds.length; ) {\\n            result[i] = _calculateDlpRewardApy(dlpIds[i], topDlpTotalRatings, customRatingPercentages);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function estimatedDlpRewardPercentages(\\n        uint256[] memory dlpIds\\n    ) public view override returns (DlpRewardApy[] memory) {\\n        return estimatedDlpRewardPercentagesCustomized(dlpIds, new uint256[](0));\\n    }\\n\\n    /**\\n     * @notice Returns stake score multiplier based number of days staked\\n     */\\n    function getMultiplier(uint256 daysStaked) external pure override returns (uint256) {\\n        if (daysStaked > 82) {\\n            return 30000;\\n        }\\n\\n        uint16[83] memory multiplier = [\\n            476,\\n            952,\\n            1428,\\n            1904,\\n            2380,\\n            2857,\\n            3333,\\n            3809,\\n            4285,\\n            4761,\\n            5238,\\n            5714,\\n            6190,\\n            6666,\\n            7142,\\n            7619,\\n            8095,\\n            8571,\\n            9047,\\n            9523,\\n            10000,\\n            10200,\\n            10500,\\n            10700,\\n            11000,\\n            11200,\\n            11400,\\n            11700,\\n            11900,\\n            12100,\\n            12400,\\n            12600,\\n            12900,\\n            13100,\\n            13300,\\n            13600,\\n            13800,\\n            14000,\\n            14300,\\n            14500,\\n            14800,\\n            15000,\\n            15600,\\n            16200,\\n            16800,\\n            17400,\\n            18000,\\n            18600,\\n            19200,\\n            19800,\\n            20400,\\n            21000,\\n            21500,\\n            22100,\\n            22700,\\n            23300,\\n            23900,\\n            24500,\\n            25100,\\n            25700,\\n            26300,\\n            26900,\\n            27500,\\n            27600,\\n            27700,\\n            27900,\\n            28000,\\n            28100,\\n            28200,\\n            28300,\\n            28500,\\n            28600,\\n            28700,\\n            28800,\\n            28900,\\n            29000,\\n            29200,\\n            29300,\\n            29400,\\n            29500,\\n            29600,\\n            29800,\\n            29900\\n        ];\\n        return uint256(multiplier[daysStaked]);\\n    }\\n\\n    function updateDlpRoot(address dlpRootAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        dlpRoot = IDLPRoot(dlpRootAddress);\\n    }\\n\\n    function updateFoundationWalletAddress(\\n        address payable foundationWalletAddress\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        _foundationWalletAddress = foundationWalletAddress;\\n    }\\n\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function updateEpochDlpStakeAmountAdjustment(\\n        uint256 epochId,\\n        uint256 dlpId,\\n        uint256 adjustment,\\n        bool isAddition\\n    ) external override onlyRole(DLP_ROOT_ROLE) {\\n        if (isAddition) {\\n            _epochs[epochId].dlps[dlpId].stakeAmountAdjustment += adjustment;\\n        } else {\\n            //stakeAmountAdjustment is always > adjustment\\n            _epochs[epochId].dlps[dlpId].stakeAmountAdjustment -= adjustment;\\n        }\\n    }\\n\\n    /**\\n     * @notice Saves or updates epoch performanceRatings for DLPs\\n     * @param epochId                 The epoch ID to save performanceRatings for\\n     * @param dlpPerformanceRatings   Array of DLP performanceRatings to save\\n     */\\n    function saveEpochPerformanceRatings(\\n        uint256 epochId,\\n        DlpPerformanceRating[] memory dlpPerformanceRatings\\n    ) external override onlyRole(MANAGER_ROLE) whenNotPaused {\\n        Epoch storage epoch = _epochs[epochId];\\n\\n        if (dlpRoot.dlpRootEpoch().epochs(epochId).isFinalised) {\\n            revert EpochAlreadyFinalised();\\n        }\\n\\n        uint256 dlpPerformanceRatingsLength = dlpPerformanceRatings.length;\\n\\n        uint256 totalPerformanceRating;\\n        for (uint256 i = 0; i < dlpPerformanceRatingsLength; ) {\\n            DlpPerformanceRating memory dlpPerformanceRating = dlpPerformanceRatings[i];\\n\\n            epoch.dlps[dlpPerformanceRating.dlpId].performanceRating = dlpPerformanceRating.performanceRating;\\n            totalPerformanceRating += dlpPerformanceRating.performanceRating;\\n\\n            emit DlpEpochPerformanceRatingSaved(\\n                epochId,\\n                dlpPerformanceRating.dlpId,\\n                dlpPerformanceRating.performanceRating\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        epoch.totalPerformanceRating = totalPerformanceRating;\\n\\n        emit EpochPerformanceRatingsSaved(epochId, totalPerformanceRating, false);\\n    }\\n\\n    /**\\n     * @notice Saves or updates epoch performanceRatings for DLPs\\n     * @param epochId                The epoch ID to save performanceRatings for\\n     */\\n    function finalizeEpoch(uint256 epochId) external override onlyRole(MANAGER_ROLE) whenNotPaused {\\n        if (dlpRoot.dlpRootEpoch().epochs(epochId).isFinalised) {\\n            revert EpochAlreadyFinalised();\\n        }\\n\\n        IDLPRootEpoch.EpochInfo memory rootEpoch = dlpRoot.dlpRootEpoch().epochs(epochId);\\n\\n        if (rootEpoch.endBlock >= block.number) {\\n            revert EpochNotEndedYet();\\n        }\\n\\n        emit EpochFinalised(epochId);\\n\\n        _calculateEpochRewards(epochId, dlpRoot.dlpRootCore().eligibleDlpsListValues());\\n    }\\n\\n    function updateRatingPercentages(\\n        uint256 stakeRatingPercentage,\\n        uint256 performanceRatingPercentage\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        _updateRatingPercentages(stakeRatingPercentage, performanceRatingPercentage);\\n    }\\n\\n    function calculateDlpRating(\\n        uint256 dlpId,\\n        uint256 epochId,\\n        uint256 totalDlpsStakeAmount,\\n        uint256 totalDlpsPerformanceRating,\\n        uint256[] memory customRatingPercentages\\n    ) public view returns (uint256) {\\n        return\\n            _calculateDlpRating(\\n                _dlpEpochStakeAmount(dlpId, epochId),\\n                _epochs[epochId].dlps[dlpId].performanceRating,\\n                totalDlpsStakeAmount,\\n                totalDlpsPerformanceRating,\\n                customRatingPercentages\\n            );\\n    }\\n\\n    function _updateRatingPercentages(uint256 stakeRatingPercentage, uint256 performanceRatingPercentage) internal {\\n        if (stakeRatingPercentage + performanceRatingPercentage != 100e18) {\\n            revert InvalidRatingPercentages();\\n        }\\n\\n        ratingPercentages[RatingType.Stake] = stakeRatingPercentage;\\n        ratingPercentages[RatingType.Performance] = performanceRatingPercentage;\\n\\n        emit RatingPercentagesUpdated(RatingType.Performance, performanceRatingPercentage);\\n        emit RatingPercentagesUpdated(RatingType.Stake, stakeRatingPercentage);\\n    }\\n\\n    function _calculateEpochRewards(uint256 epochId, uint256[] memory dlpIds) internal {\\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRoot.dlpRootEpoch().epochs(epochId);\\n\\n        if (epoch.isFinalised == true) {\\n            revert EpochRewardsAlreadyDistributed();\\n        }\\n\\n        IDLPRootMetrics.DlpRating[] memory topDlps = topDlpsCustomized(\\n            epochId,\\n            dlpRoot.dlpRootEpoch().epochDlpsLimit(),\\n            dlpIds,\\n            new uint256[](0)\\n        );\\n\\n        uint256 totalTopDlpsRating;\\n        uint256 i;\\n\\n        // Calculate total stake amount for top DLPs\\n        for (uint256 i = 0; i < topDlps.length; ) {\\n            totalTopDlpsRating += topDlps[i].rating;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 dlpId;\\n\\n        uint256 topDlpsCount = topDlps.length;\\n\\n        IDLPRootEpoch.EpochDlpReward[] memory epochDlpRewards = new IDLPRootEpoch.EpochDlpReward[](topDlpsCount);\\n        uint256 totalDlpReward;\\n        uint256 stakersRewardAmount;\\n\\n        // Calculate rewards\\n        for (i = 0; i < topDlpsCount; ) {\\n            dlpId = topDlps[i].dlpId;\\n\\n            totalDlpReward = totalTopDlpsRating > 0 ? (topDlps[i].rating * epoch.rewardAmount) / totalTopDlpsRating : 0;\\n\\n            stakersRewardAmount =\\n                (totalDlpReward * dlpRoot.dlpRootEpoch().epochDlps(epochId, dlpId).stakersPercentage) /\\n                100e18;\\n\\n            epochDlpRewards[i] = IDLPRootEpoch.EpochDlpReward({\\n                dlpId: dlpId,\\n                ownerRewardAmount: totalDlpReward - stakersRewardAmount,\\n                stakersRewardAmount: stakersRewardAmount\\n            });\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        dlpRoot.dlpRootEpoch().distributeEpochRewards(epochId, epochDlpRewards);\\n    }\\n\\n    function _dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) internal view returns (uint256) {\\n        return\\n            dlpRoot.dlpRootEpoch().epochDlpStakeAmount(epochId, dlpId) -\\n            _epochs[epochId].dlps[dlpId].stakeAmountAdjustment;\\n    }\\n\\n    function _calculateDlpRating(\\n        uint256 dlpStakeAmount,\\n        uint256 dlpPerformanceRating,\\n        uint256 totalDlpsStakeAmount,\\n        uint256 totalDlpsPerformanceRating,\\n        uint256[] memory customRatingPercentages\\n    ) internal view returns (uint256) {\\n        uint256 normalizedDlpStakeRating = totalDlpsStakeAmount > 0\\n            ? (1e18 * dlpStakeAmount) / totalDlpsStakeAmount\\n            : 0;\\n        uint256 normalizedDlpPerformanceRating = totalDlpsPerformanceRating > 0\\n            ? (1e18 * dlpPerformanceRating) / totalDlpsPerformanceRating\\n            : 0;\\n\\n        uint256 stakeRatingPercentage;\\n        uint256 performanceRatingPercentage;\\n\\n        if (customRatingPercentages.length == 2) {\\n            stakeRatingPercentage = customRatingPercentages[uint256(RatingType.Stake)];\\n            performanceRatingPercentage = customRatingPercentages[uint256(RatingType.Performance)];\\n        } else if (customRatingPercentages.length == 0) {\\n            stakeRatingPercentage = ratingPercentages[RatingType.Stake];\\n            performanceRatingPercentage = ratingPercentages[RatingType.Performance];\\n        } else {\\n            revert InvalidRatingPercentages();\\n        }\\n\\n        return\\n            (stakeRatingPercentage *\\n                normalizedDlpStakeRating +\\n                performanceRatingPercentage *\\n                normalizedDlpPerformanceRating) / 1e20;\\n    }\\n\\n    struct TopDlpTotalRatings {\\n        uint256 totalStakeAmount;\\n        uint256 totalStakeAmountAdjusted;\\n        uint256 totalRating;\\n        uint256 totalRatingAdjusted;\\n        uint256 totalPerformanceRating;\\n    }\\n    function _calculateTopDlpTotalRatings(\\n        uint256 epochId,\\n        uint256[] memory customRatingPercentages\\n    ) internal view returns (TopDlpTotalRatings memory) {\\n        IDLPRootMetrics.DlpRating[] memory topDlpsList = topDlpsCustomized(\\n            epochId,\\n            dlpRoot.dlpRootEpoch().epochDlpsLimit(),\\n            dlpRoot.dlpRootCore().eligibleDlpsListValues(),\\n            customRatingPercentages\\n        );\\n\\n        uint256 i;\\n        TopDlpTotalRatings memory totalTopDlpsStakeAmount;\\n\\n        uint256[] memory dlpStakeAmountsAdjusted = new uint256[](topDlpsList.length);\\n        uint256[] memory dlpStakeAmounts = new uint256[](topDlpsList.length);\\n        uint256[] memory dlpPerformanceRatings = new uint256[](topDlpsList.length);\\n\\n        // Calculate total amount and ratings for top DLPs\\n        for (i = 0; i < topDlpsList.length; ) {\\n            dlpStakeAmounts[i] = dlpRoot.dlpRootCore().dlpEpochStakeAmount(topDlpsList[i].dlpId, epochId);\\n            dlpStakeAmountsAdjusted[i] =\\n                dlpStakeAmounts[i] -\\n                _epochs[epochId].dlps[topDlpsList[i].dlpId].stakeAmountAdjustment;\\n            dlpPerformanceRatings[i] = _epochs[epochId].dlps[topDlpsList[i].dlpId].performanceRating;\\n\\n            totalTopDlpsStakeAmount.totalStakeAmountAdjusted += dlpStakeAmountsAdjusted[i];\\n            totalTopDlpsStakeAmount.totalStakeAmount += dlpStakeAmounts[i];\\n            totalTopDlpsStakeAmount.totalPerformanceRating += dlpPerformanceRatings[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Calculate total amount and ratings for top DLPs\\n        for (i = 0; i < topDlpsList.length; ) {\\n            totalTopDlpsStakeAmount.totalRatingAdjusted += _calculateDlpRating(\\n                dlpStakeAmountsAdjusted[i],\\n                dlpPerformanceRatings[i],\\n                totalTopDlpsStakeAmount.totalStakeAmountAdjusted,\\n                totalTopDlpsStakeAmount.totalPerformanceRating,\\n                customRatingPercentages\\n            );\\n            totalTopDlpsStakeAmount.totalRating += _calculateDlpRating(\\n                dlpStakeAmounts[i],\\n                dlpPerformanceRatings[i],\\n                totalTopDlpsStakeAmount.totalStakeAmount,\\n                totalTopDlpsStakeAmount.totalPerformanceRating,\\n                customRatingPercentages\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return totalTopDlpsStakeAmount;\\n    }\\n\\n    function _calculateDlpRewardApy(\\n        uint256 dlpId,\\n        TopDlpTotalRatings memory topDlpTotalRatings,\\n        uint256[] memory customRatingPercentages\\n    ) private view returns (DlpRewardApy memory) {\\n        uint256 epochRewardAmount = dlpRoot.dlpRootEpoch().epochRewardAmount();\\n        uint256 epochCount = dlpRoot.dlpRootEpoch().epochsCount();\\n        uint256 dlpStakeAmount = dlpRoot.dlpRootCore().dlpEpochStakeAmount(dlpId, epochCount);\\n        uint256 dlpStakeAmountAdjusted = dlpStakeAmount - _epochs[epochCount].dlps[dlpId].stakeAmountAdjustment;\\n\\n        uint256 dlpRewardAdjusted = (_calculateDlpRating(\\n            dlpStakeAmountAdjusted,\\n            _epochs[epochCount].dlps[dlpId].performanceRating,\\n            topDlpTotalRatings.totalStakeAmountAdjusted,\\n            topDlpTotalRatings.totalPerformanceRating,\\n            customRatingPercentages\\n        ) * epochRewardAmount) / topDlpTotalRatings.totalRatingAdjusted;\\n\\n        uint256 dlpReward = (_calculateDlpRating(\\n            dlpStakeAmount,\\n            _epochs[epochCount].dlps[dlpId].performanceRating,\\n            topDlpTotalRatings.totalStakeAmount,\\n            topDlpTotalRatings.totalPerformanceRating,\\n            customRatingPercentages\\n        ) * epochRewardAmount) / topDlpTotalRatings.totalRating;\\n\\n        uint256 dlpStakersPercentageEpoch = dlpRoot.dlpRootEpoch().epochDlps(epochCount, dlpId).stakersPercentage;\\n\\n        return\\n            DlpRewardApy({\\n                dlpId: dlpId,\\n                EPY: (dlpStakersPercentageEpoch * dlpRewardAdjusted) / dlpStakeAmountAdjusted,\\n                APY: (((dlpStakersPercentageEpoch * dlpReward) / dlpStakeAmount) *\\n                    365 *\\n                    dlpRoot.dlpRootEpoch().daySize()) / dlpRoot.dlpRootEpoch().epochSize()\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x24a9a138945c70165fd66180d992891c5cb699627d38ff6aaf10187d3eb94d99\",\"license\":\"MIT\"},\"contracts/rootMetrics/interfaces/DLPRootMetricsStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./IDLPRootMetrics.sol\\\";\\n\\n/**\\n * @title Storage for DLPRootMetrics\\n * @notice For future upgrades, do not change DLPRootMetricsStorageV1. Create a new\\n * contract which implements DLPRootMetricsStorageV1\\n */\\nabstract contract DLPRootMetricsStorageV1 is IDLPRootMetrics {\\n    address private _trustedForwarder; // not used anymore\\n    IDLPRoot public override dlpRoot;\\n\\n    mapping(uint256 epochId => Epoch) internal _epochs;\\n\\n    mapping(RatingType ratingType => uint256 percentage) public override ratingPercentages;\\n\\n    address payable internal _foundationWalletAddress;\\n}\\n\",\"keccak256\":\"0xb682e113bbe5856f252e08f2918f57c16e8d6c4dd98222313601ded568854943\",\"license\":\"MIT\"},\"contracts/rootMetrics/interfaces/ERC2771ContextUpgradeableMock.sol\":{\"content\":\"abstract contract ERC2771ContextUpgradeableMock {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n}\\n\",\"keccak256\":\"0x3974bb496f016bbb3ea7c83cb64fea4d435f1bcd1ea329f1923ff826a501412e\"},\"contracts/rootMetrics/interfaces/IDLPRootMetrics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\n\\ninterface IDLPRootMetrics {\\n    enum RatingType {\\n        Stake,\\n        Performance\\n    }\\n    struct EpochDlp {\\n        uint256 performanceRating;\\n        uint256 stakeAmountAdjustment;\\n    }\\n\\n    struct Epoch {\\n        uint256 totalPerformanceRating;\\n        bool finalized; //deprecated\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    struct DlpRating {\\n        uint256 dlpId;\\n        uint256 rating;\\n    }\\n\\n    struct EpochInfo {\\n        uint256 totalPerformanceRating;\\n        bool finalized;\\n    }\\n\\n    struct EpochDlpInfo {\\n        uint256 performanceRating;\\n        uint256 stakeAmountAdjustment;\\n    }\\n\\n    struct DlpPerformanceRating {\\n        uint256 dlpId;\\n        uint256 performanceRating;\\n    }\\n\\n    struct StakeClaimableReward {\\n        uint256 totalClaimableAmount;\\n        StakeClaimableEpochReward[] stakeClaimableEpochRewards;\\n    }\\n\\n    struct StakeClaimableEpochReward {\\n        uint256 epochId;\\n        uint256 claimableAmount;\\n        bool fullRewardAmount;\\n    }\\n\\n    struct DlpRewardApy {\\n        uint256 dlpId;\\n        uint256 APY; //annual percentage yield for stakers\\n        uint256 EPY; //epoch percentage yield for stakers\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function foundationWalletAddress() external view returns (address payable);\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\\n    function ratingPercentages(RatingType rating) external view returns (uint256);\\n    function topDlpsCustomized(\\n        uint256 epochId,\\n        uint256 numberOfDlps,\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) external view returns (DlpRating[] memory);\\n    function topDlps(uint256 numberOfDlps) external view returns (DlpRating[] memory);\\n    function topDlpIds(uint256 numberOfDlps) external view returns (uint256[] memory);\\n    function estimatedDlpRewardPercentagesCustomized(\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) external view returns (DlpRewardApy[] memory);\\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\\n    function getMultiplier(uint256 index) external pure returns (uint256);\\n    function pause() external;\\n    function unpause() external;\\n    function updateDlpRoot(address dlpRootAddress) external;\\n    function updateFoundationWalletAddress(address payable newFoundationWalletAddress) external;\\n    function updateEpochDlpStakeAmountAdjustment(\\n        uint256 epochId,\\n        uint256 dlpId,\\n        uint256 adjustment,\\n        bool isAddition\\n    ) external;\\n    function saveEpochPerformanceRatings(uint256 epochId, DlpPerformanceRating[] memory dlpPerformanceRatings) external;\\n    function finalizeEpoch(uint256 epochId) external;\\n    function updateRatingPercentages(uint256 stakeRatingPercentage, uint256 performanceRatingPercentage) external;\\n}\\n\",\"keccak256\":\"0xc0d4f350c973e1d37dd51532e30a141492cf8fba9a18080123ddadf3d93d1f77\",\"license\":\"MIT\"},\"contracts/rootTreasury/interfaces/IDLPRootTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\n\\ninterface IDLPRootTreasury {\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function updateDlpRoot(address dlpRootAddress) external;\\n    function transferVana(address payable to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x88522b520c42c31138c1db9d9cbd38a0ccbfc03cfabf75ced0c727b0b0e8a5d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052306080523480156200001557600080fd5b506200002062000026565b620000da565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000775760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b60805160a05161443c6200010b6000396000505060008181612d4901528181612d720152612eb8015261443c6000f3fe60806040526004361061019f5760003560e01c806301159c70146101a457806301ffc9a7146101c657806324404fa7146101fb578063248a9ca3146102285780632f2ff15d1461025657806336568abe1461027657806339a67b77146102965780633a40519d146102c35780633c026aed146102f05780633f4ba83a146103105780634bbaf86b146103255780634f1ef2861461034557806352d1902d1461035857806354fd4d501461036d5780635c975abb14610381578063610b7010146103965780636d51fa9d146103b65780638456cb59146103d65780638d8c658f146103eb57806391d1485414610418578063986bce2c146104385780639b812098146104585780639e0e7d2a146104855780639e1006bb146104a5578063a217fddf146104c5578063a59850ce146104da578063ad3cb1cc146104ef578063adf8252d1461052d578063b3a7b9da1461054d578063c6b61e4c146105be578063d25f33e5146105fb578063d547741f1461061d578063e4e3cbd51461063d578063eb990c591461065d578063ec87621c1461067d578063f87422541461069f575b600080fd5b3480156101b057600080fd5b506101c46101bf366004613917565b6106c1565b005b3480156101d257600080fd5b506101e66101e1366004613934565b6106fc565b60405190151581526020015b60405180910390f35b34801561020757600080fd5b5060015461021b906001600160a01b031681565b6040516101f2919061395e565b34801561023457600080fd5b50610248610243366004613972565b610733565b6040519081526020016101f2565b34801561026257600080fd5b506101c461027136600461398b565b610753565b34801561028257600080fd5b506101c461029136600461398b565b610775565b3480156102a257600080fd5b506102b66102b1366004613add565b6107ad565b6040516101f29190613b59565b3480156102cf57600080fd5b506102e36102de366004613972565b610949565b6040516101f29190613ba7565b3480156102fc57600080fd5b5061024861030b366004613bf1565b610b2a565b34801561031c57600080fd5b506101c4610b67565b34801561033157600080fd5b506101c4610340366004613917565b610b8a565b6101c4610353366004613c54565b610bc5565b34801561036457600080fd5b50610248610be4565b34801561037957600080fd5b506001610248565b34801561038d57600080fd5b506101e6610c01565b3480156103a257600080fd5b506101c46103b1366004613d09565b610c16565b3480156103c257600080fd5b506102b66103d1366004613d4a565b610ca8565b3480156103e257600080fd5b506101c4610cc5565b3480156103f757600080fd5b5061040b610406366004613972565b610ce5565b6040516101f29190613d7e565b34801561042457600080fd5b506101e661043336600461398b565b610d8b565b34801561044457600080fd5b506101c4610453366004613972565b610dc1565b34801561046457600080fd5b50610248610473366004613db6565b60036020526000908152604090205481565b34801561049157600080fd5b506101c46104a0366004613dd7565b611102565b3480156104b157600080fd5b506102e36104c0366004613e97565b61131e565b3480156104d157600080fd5b50610248600081565b3480156104e657600080fd5b5061021b611612565b3480156104fb57600080fd5b50610520604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101f29190613f31565b34801561053957600080fd5b50610248610548366004613972565b61164e565b34801561055957600080fd5b506105b1610568366004613f64565b6040805180820182526000808252602091820181905282518084018452948152600280835283822085835201808352928120805486529390529081526001909101549082015290565b6040516101f29190613f86565b3480156105ca57600080fd5b506105de6105d9366004613972565b611971565b6040805182518152602092830151151592810192909252016101f2565b34801561060757600080fd5b5061024860008051602061438783398151915281565b34801561062957600080fd5b506101c461063836600461398b565b611a92565b34801561064957600080fd5b506101c4610658366004613f64565b611aae565b34801561066957600080fd5b506101c4610678366004613f9d565b611ad0565b34801561068957600080fd5b5061024860008051602061436783398151915281565b3480156106ab57600080fd5b506102486000805160206143e783398151915281565b6000805160206143e78339815191526106d981611c7d565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061072d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008061073e611c87565b60009384526020525050604090206001015490565b61075c82610733565b61076581611c7d565b61076f8383611cab565b50505050565b6001600160a01b038116331461079e5760405163334bd91960e11b815260040160405180910390fd5b6107a88282611d4c565b505050565b60606000610892600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b9190613fe3565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c9190614000565b84611dc4565b9050600084516001600160401b038111156108af576108af6139bb565b6040519080825280602002602001820160405280156108e857816020015b6108d56138b2565b8152602001906001900390816108cd5790505b50905060005b85518110156109405761091b86828151811061090c5761090c614019565b60200260200101518487612403565b82828151811061092d5761092d614019565b60209081029190910101526001016108ee565b50949350505050565b606061072d600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190613fe3565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190614000565b60015460408051630dd97a2960e11b8152905186926001600160a01b031691631bb2f4529160048083019260209291908290030181865afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a939190613fe3565b6001600160a01b03166303a229f66040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af8919081019061408e565b60005b604051908082528060200260200182016040528015610b24578160200160208202803683370190505b5061131e565b6000610b5d610b398787612a98565b60008781526002602081815260408084208c85529092019052902054868686612b99565b9695505050505050565b6000805160206143e7833981519152610b7f81611c7d565b610b87612ce7565b50565b6000805160206143e7833981519152610ba281611c7d565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b610bcd612d3e565b610bd682612de5565b610be08282612df0565b5050565b6000610bee612ead565b5060008051602061434783398151915290565b600080610c0c612ef6565b5460ff1692915050565b600080516020614387833981519152610c2e81611c7d565b8115610c6d576000858152600260208181526040808420888552909201905281206001018054859290610c629084906140d8565b90915550610ca19050565b6000858152600260208181526040808420888552909201905281206001018054859290610c9b9084906140eb565b90915550505b5050505050565b60408051600081526020810190915260609061072d9083906107ad565b6000805160206143e7833981519152610cdd81611c7d565b610b87612f1a565b60606000610cf283610949565b80519091506000816001600160401b03811115610d1157610d116139bb565b604051908082528060200260200182016040528015610d3a578160200160208202803683370190505b50905060005b8281101561094057838181518110610d5a57610d5a614019565b602002602001015160000151828281518110610d7857610d78614019565b6020908102919091010152600101610d40565b600080610d96611c87565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b600080516020614367833981519152610dd981611c7d565b610de1612f61565b600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190613fe3565b6001600160a01b031663c6b61e4c836040518263ffffffff1660e01b8152600401610e8591815260200190565b600060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eca91908101906140fe565b6060015115610eec57604051630c2c2e0360e11b815260040160405180910390fd5b60015460408051630824c3e960e21b815290516000926001600160a01b0316916320930fa49160048083019260209291908290030181865afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a9190613fe3565b6001600160a01b031663c6b61e4c846040518263ffffffff1660e01b8152600401610f8791815260200190565b600060405180830381865afa158015610fa4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fcc91908101906140fe565b905043816020015110610ff2576040516307cffebb60e01b815260040160405180910390fd5b60405183907f0867904ff22a2f7066c4e7f4f482ef661324499e28f2f99ced6b09c4a542384090600090a26107a883600160009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190613fe3565b6001600160a01b03166303a229f66040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110fd919081019061408e565b612f87565b60008051602061436783398151915261111a81611c7d565b611122612f61565b6000838152600260209081526040918290206001548351630824c3e960e21b8152935191936001600160a01b03909116926320930fa4926004808401938290030181865afa158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190613fe3565b6001600160a01b031663c6b61e4c856040518263ffffffff1660e01b81526004016111c991815260200190565b600060405180830381865afa1580156111e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120e91908101906140fe565b606001511561123057604051630c2c2e0360e11b815260040160405180910390fd5b82516000805b828110156112d757600086828151811061125257611252614019565b60209081029190910181015180820180518251600090815260028a01909452604090932092909255905190915061128990846140d8565b92508060000151887f14e080a7cc9c18aa303764d388372bee4d6b2dc6e2bc3cbe8a3d98c4c2072b4383602001516040516112c691815260200190565b60405180910390a350600101611236565b50808355604080518281526000602082015287917f93f86f9bc6bd89602512fcde5fe72737b3dc03783e87688e4d755449d6643bb3910160405180910390a2505050505050565b606060008060005b85518110156113b75761135286828151811061134457611344614019565b602002602001015189612a98565b61135c90846140d8565b925060026000898152602001908152602001600020600201600087838151811061138857611388614019565b6020026020010151815260200190815260200160002060000154826113ad91906140d8565b9150600101611326565b5084518087106113c757806113c9565b865b96506000876001600160401b038111156113e5576113e56139bb565b60405190808252806020026020018201604052801561142a57816020015b60408051808201909152600080825260208201528152602001906001900390816114035790505b5090508760000361144057935061160a92505050565b60005b8281101561160357600088828151811061145f5761145f614019565b602002602001015190506000611478828d89898d610b2a565b90508a60005b8c8110156115095785818151811061149857611498614019565b6020026020010151602001518311806114f457508581815181106114be576114be614019565b602002602001015160200151831480156114f457508581815181106114e5576114e5614019565b60200260200101516000015184105b1561150157809150611509565b60010161147e565b508b8110156115f557600061151f60018e6140eb565b90505b818111156115c157856115366001836140eb565b8151811061154657611546614019565b60200260200101516000015186828151811061156457611564614019565b6020908102919091010151528561157c6001836140eb565b8151811061158c5761158c614019565b6020026020010151602001518682815181106115aa576115aa614019565b602090810291909101810151015260001901611522565b506040518060400160405280848152602001838152508582815181106115e9576115e9614019565b60200260200101819052505b836001019350505050611443565b5093505050505b949350505050565b6004546000906001600160a01b031661163e57604051630d9c747960e41b815260040160405180910390fd5b506004546001600160a01b031690565b600060528211156116625750617530919050565b60408051610a60810182526101dc81526103b8602082015261059491810191909152610770606082015261094c6080820152610b2960a0820152610d0560c0820152610ee160e08201526110bd61010082015261129961012082015261147661014082015261165261016082015261182e610180820152611a0a6101a0820152611be66101c0820152611dc36101e0820152611f9f61020082015261217b6102208201526123576102408201526125336102608201526127106102808201526127d86102a08201526129046102c08201526129cc6102e0820152612af8610300820152612bc0610320820152612c88610340820152612db4610360820152612e7c610380820152612f446103a08201526130706103c08201526131386103e082015261326461040082015261332c6104208201526133f46104408201526135206104608201526135e86104808201526136b06104a08201526137dc6104c08201526138a46104e08201526139d0610500820152613a98610520820152613cf0610540820152613f486105608201526141a06105808201526143f86105a08201526146506105c08201526148a86105e0820152614b00610600820152614d58610620820152614fb06106408201526152086106608201526153fc6106808201526156546106a08201526158ac6106c0820152615b046106e0820152615d5c610700820152615fb461072082015261620c6107408201526164646107608201526166bc6107808201526169146107a0820152616b6c6107c0820152616bd06107e0820152616c34610800820152616cfc610820820152616d60610840820152616dc4610860820152616e28610880820152616e8c6108a0820152616f546108c0820152616fb86108e082015261701c6109008201526170806109208201526170e46109408201526171486109608201526172106109808201526172746109a08201526172d86109c082015261733c6109e08201526173a0610a00820152617468610a208201526174cc610a4082015280836053811061196157611961614019565b602002015161ffff169392505050565b604080518082019091526000808252602082015260008281526002602090815260409182902082518084018452815481526001548451630824c3e960e21b8152945192949193848101936001600160a01b03909216926320930fa492600480830193928290030181865afa1580156119ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a119190613fe3565b6001600160a01b031663c6b61e4c866040518263ffffffff1660e01b8152600401611a3e91815260200190565b600060405180830381865afa158015611a5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a8391908101906140fe565b60600151151590529392505050565b611a9b82610733565b611aa481611c7d565b61076f8383611d4c565b6000805160206143e7833981519152611ac681611c7d565b6107a883836134e5565b6000611ada613599565b805490915060ff600160401b82041615906001600160401b0316600081158015611b015750825b90506000826001600160401b03166001148015611b1d5750303b155b905081158015611b2b575080155b15611b495760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315611b7257845460ff60401b1916600160401b1785555b611b7a6135bd565b611b826135bd565b611b8a6135c5565b600180546001600160a01b0319166001600160a01b038a16179055611baf87876134e5565b611bc86000805160206143e783398151915260006135d5565b611bee6000805160206143678339815191526000805160206143e78339815191526135d5565b611bf960008a611cab565b50611c126000805160206143e78339815191528a611cab565b50611c2b6000805160206143678339815191528a611cab565b508315611c7257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b610b878133613635565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b600080611cb6611c87565b9050611cc28484610d8b565b611d42576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611cf83390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061072d565b600091505061072d565b600080611d57611c87565b9050611d638484610d8b565b15611d42576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061072d565b611dcc6138d3565b6000611f8c84600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e499190613fe3565b6001600160a01b031663c53036f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa9190614000565b600160009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f219190613fe3565b6001600160a01b03166303a229f66040518163ffffffff1660e01b8152600401600060405180830381865afa158015611f5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f86919081019061408e565b8661131e565b90506000611f986138d3565b600083516001600160401b03811115611fb357611fb36139bb565b604051908082528060200260200182016040528015611fdc578160200160208202803683370190505b509050600084516001600160401b03811115611ffa57611ffa6139bb565b604051908082528060200260200182016040528015612023578160200160208202803683370190505b509050600085516001600160401b03811115612041576120416139bb565b60405190808252806020026020018201604052801561206a578160200160208202803683370190505b509050600094505b855185101561232457600160009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f29190613fe3565b6001600160a01b031663e5c8307d87878151811061211257612112614019565b6020026020010151600001518b6040518363ffffffff1660e01b815260040161213c92919061419b565b602060405180830381865afa158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217d9190614000565b82868151811061218f5761218f614019565b602002602001018181525050600260008a815260200190815260200160002060020160008787815181106121c5576121c5614019565b6020026020010151600001518152602001908152602001600020600101548286815181106121f5576121f5614019565b602002602001015161220791906140eb565b83868151811061221957612219614019565b602002602001018181525050600260008a8152602001908152602001600020600201600087878151811061224f5761224f614019565b60200260200101516000015181526020019081526020016000206000015481868151811061227f5761227f614019565b60200260200101818152505082858151811061229d5761229d614019565b6020026020010151846020018181516122b691906140d8565b90525081518290869081106122cd576122cd614019565b6020026020010151846000018181516122e691906140d8565b90525080518190869081106122fd576122fd614019565b60200260200101518460800181815161231691906140d8565b905250600190940193612072565b600094505b85518510156123f65761237983868151811061234757612347614019565b602002602001015182878151811061236157612361614019565b6020026020010151866020015187608001518c612b99565b8460600181815161238a91906140d8565b90525081516123d7908390879081106123a5576123a5614019565b60200260200101518287815181106123bf576123bf614019565b6020026020010151866000015187608001518c612b99565b846040018181516123e891906140d8565b905250600190940193612329565b5091979650505050505050565b61240b6138b2565b60015460408051630824c3e960e21b815290516000926001600160a01b0316916320930fa49160048083019260209291908290030181865afa158015612455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124799190613fe3565b6001600160a01b031663132c58e96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124da9190614000565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125559190613fe3565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015612592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b69190614000565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa15801561260d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126319190613fe3565b6001600160a01b031663e5c8307d88846040518363ffffffff1660e01b815260040161265e92919061419b565b602060405180830381865afa15801561267b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269f9190614000565b60008381526002602081815260408084208c85529092019052812060010154919250906126cc90836140eb565b90506000876060015185612715846002600089815260200190815260200160002060020160008e8152602001908152602001600020600001548c602001518d608001518d612b99565b61271f91906141a9565b61272991906141c0565b9050600088604001518661277286600260008a815260200190815260200160002060020160008f8152602001908152602001600020600001548d600001518e608001518e612b99565b61277c91906141a9565b61278691906141c0565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128019190613fe3565b6001600160a01b031663b3a7b9da878d6040518363ffffffff1660e01b815260040161282e92919061419b565b60e060405180830381865afa15801561284b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286f91906141e2565b60600151905060405180606001604052808c8152602001600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fd9190613fe3565b6001600160a01b031663572d356e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561293a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295e9190614000565b600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d59190613fe3565b6001600160a01b031663d7033ca06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a369190614000565b88612a4187876141a9565b612a4b91906141c0565b612a579061016d6141a9565b612a6191906141a9565b612a6b91906141c0565b815260200185612a7b86856141a9565b612a8591906141c0565b90529750505050505050505b9392505050565b6000818152600260208181526040808420868552909201815281832060019081015490548351630824c3e960e21b8152935191936001600160a01b03909116926320930fa4926004808401938290030181865afa158015612afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b219190613fe3565b6001600160a01b0316632420e68884866040518363ffffffff1660e01b8152600401612b4e92919061419b565b602060405180830381865afa158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f9190614000565b612a9191906140eb565b60008060008511612bab576000612bc8565b84612bbe88670de0b6b3a76400006141a9565b612bc891906141c0565b90506000808511612bda576000612bf7565b84612bed88670de0b6b3a76400006141a9565b612bf791906141c0565b90506000808551600203612c545785600081518110612c1857612c18614019565b6020026020010151915085600180811115612c3557612c3561426e565b81518110612c4557612c45614019565b60200260200101519050612ca7565b8551600003612c8e57505060036020526000805160206143c783398151915254600160005260008051602061432783398151915254612ca7565b60405163b5c0c3e160e01b815260040160405180910390fd5b68056bc75e2d63100000612cbb84836141a9565b612cc586856141a9565b612ccf91906140d8565b612cd991906141c0565b9a9950505050505050505050565b612cef61366e565b6000612cf9612ef6565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612d33919061395e565b60405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612dc557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612db9600080516020614347833981519152546001600160a01b031690565b6001600160a01b031614155b15612de35760405163703e46dd60e11b815260040160405180910390fd5b565b6000610be081611c7d565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612e4a575060408051601f3d908101601f19168201909252612e4791810190614000565b60015b612e725781604051634c9c8ce360e01b8152600401612e69919061395e565b60405180910390fd5b6000805160206143478339815191528114612ea357604051632a87526960e21b815260048101829052602401612e69565b6107a88383613693565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612de35760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b612f22612f61565b6000612f2c612ef6565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612d263390565b612f69610c01565b15612de35760405163d93c066560e01b815260040160405180910390fd5b60015460408051630824c3e960e21b815290516000926001600160a01b0316916320930fa49160048083019260209291908290030181865afa158015612fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff59190613fe3565b6001600160a01b031663c6b61e4c846040518263ffffffff1660e01b815260040161302291815260200190565b600060405180830381865afa15801561303f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261306791908101906140fe565b6060810151909150151560010361309157604051634b5e16a360e01b815260040160405180910390fd5b600061317784600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310e9190613fe3565b6001600160a01b031663c53036f46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561314b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316f9190614000565b856000610afb565b905060008060005b83518110156131bb5783818151811061319a5761319a614019565b602002602001015160200151836131b191906140d8565b925060010161317f565b50825160009081816001600160401b038111156131da576131da6139bb565b60405190808252806020026020018201604052801561322f57816020015b61321c60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816131f85790505b509050600080600095505b838610156134025787868151811061325457613254614019565b6020026020010151600001519450600087116132715760006132a9565b86896040015189888151811061328957613289614019565b60200260200101516020015161329f91906141a9565b6132a991906141c0565b915068056bc75e2d63100000600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015613308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332c9190613fe3565b6001600160a01b031663b3a7b9da8d886040518363ffffffff1660e01b815260040161335992919061419b565b60e060405180830381865afa158015613376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339a91906141e2565b606001516133a890846141a9565b6133b291906141c0565b9050604051806060016040528086815260200182846133d191906140eb565b8152602001828152508387815181106133ec576133ec614019565b602002602001018190525085600101955061323a565b600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015613455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134799190613fe3565b6001600160a01b031663cd0081a78c856040518363ffffffff1660e01b81526004016134a6929190614284565b600060405180830381600087803b1580156134c057600080fd5b505af11580156134d4573d6000803e3d6000fd5b505050505050505050505050505050565b6134ef81836140d8565b68056bc75e2d63100000146135175760405163b5c0c3e160e01b815260040160405180910390fd5b60036020526000805160206143c7833981519152829055600160008190526000805160206143278339815191528290556040516000805160206143a7833981519152916135659184906142de565b60405180910390a16000805160206143a783398151915260008360405161358d9291906142de565b60405180910390a15050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b612de36136e9565b6135cd6136e9565b612de361370e565b60006135df611c87565b905060006135ec84610733565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b61363f8282610d8b565b610be05760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401612e69565b613676610c01565b612de357604051638dfc202b60e01b815260040160405180910390fd5b61369c8261372b565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156136e1576107a88282613787565b610be06137fd565b6136f161381c565b612de357604051631afcd79f60e31b815260040160405180910390fd5b6137166136e9565b6000613720612ef6565b805460ff1916905550565b806001600160a01b03163b6000036137585780604051634c9c8ce360e01b8152600401612e69919061395e565b60008051602061434783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516137a4919061430a565b600060405180830381855af49150503d80600081146137df576040519150601f19603f3d011682016040523d82523d6000602084013e6137e4565b606091505b50915091506137f4858383613836565b95945050505050565b3415612de35760405163b398979f60e01b815260040160405180910390fd5b6000613826613599565b54600160401b900460ff16919050565b60608261384b5761384682613889565b612a91565b815115801561386257506001600160a01b0384163b155b156138825783604051639996b31560e01b8152600401612e69919061395e565b5080612a91565b8051156138995780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114610b8757600080fd5b60006020828403121561392957600080fd5b8135612a9181613902565b60006020828403121561394657600080fd5b81356001600160e01b031981168114612a9157600080fd5b6001600160a01b0391909116815260200190565b60006020828403121561398457600080fd5b5035919050565b6000806040838503121561399e57600080fd5b8235915060208301356139b081613902565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156139f3576139f36139bb565b60405290565b60405160a081016001600160401b03811182821017156139f3576139f36139bb565b604051601f8201601f191681016001600160401b0381118282101715613a4357613a436139bb565b604052919050565b60006001600160401b03821115613a6457613a646139bb565b5060051b60200190565b600082601f830112613a7f57600080fd5b81356020613a94613a8f83613a4b565b613a1b565b8083825260208201915060208460051b870101935086841115613ab657600080fd5b602086015b84811015613ad25780358352918301918301613abb565b509695505050505050565b60008060408385031215613af057600080fd5b82356001600160401b0380821115613b0757600080fd5b613b1386838701613a6e565b93506020850135915080821115613b2957600080fd5b50613b3685828601613a6e565b9150509250929050565b8051825260208082015190830152604090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015613b9b57613b88838551613b40565b9284019260609290920191600101613b75565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156123f657613be184835180518252602090810151910152565b9284019290850190600101613bc4565b600080600080600060a08688031215613c0957600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160401b03811115613c3b57600080fd5b613c4788828901613a6e565b9150509295509295909350565b60008060408385031215613c6757600080fd5b8235613c7281613902565b91506020838101356001600160401b0380821115613c8f57600080fd5b818601915086601f830112613ca357600080fd5b813581811115613cb557613cb56139bb565b613cc7601f8201601f19168501613a1b565b91508082528784828501011115613cdd57600080fd5b80848401858401376000848284010152508093505050509250929050565b8015158114610b8757600080fd5b60008060008060808587031215613d1f57600080fd5b8435935060208501359250604085013591506060850135613d3f81613cfb565b939692955090935050565b600060208284031215613d5c57600080fd5b81356001600160401b03811115613d7257600080fd5b61160a84828501613a6e565b6020808252825182820181905260009190848201906040850190845b81811015613b9b57835183529284019291840191600101613d9a565b600060208284031215613dc857600080fd5b813560028110612a9157600080fd5b6000806040808486031215613deb57600080fd5b833592506020808501356001600160401b03811115613e0957600080fd5b8501601f81018713613e1a57600080fd5b8035613e28613a8f82613a4b565b81815260069190911b82018301908381019089831115613e4757600080fd5b928401925b82841015613e875785848b031215613e645760008081fd5b613e6c6139d1565b84358152858501358682015282529285019290840190613e4c565b8096505050505050509250929050565b60008060008060808587031215613ead57600080fd5b843593506020850135925060408501356001600160401b0380821115613ed257600080fd5b613ede88838901613a6e565b93506060870135915080821115613ef457600080fd5b50613f0187828801613a6e565b91505092959194509250565b60005b83811015613f28578181015183820152602001613f10565b50506000910152565b6020815260008251806020840152613f50816040850160208701613f0d565b601f01601f19169190910160400192915050565b60008060408385031215613f7757600080fd5b50508035926020909101359150565b81518152602080830151908201526040810161072d565b60008060008060808587031215613fb357600080fd5b8435613fbe81613902565b93506020850135613fce81613902565b93969395505050506040820135916060013590565b600060208284031215613ff557600080fd5b8151612a9181613902565b60006020828403121561401257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261404057600080fd5b81516020614050613a8f83613a4b565b8083825260208201915060208460051b87010193508684111561407257600080fd5b602086015b84811015613ad25780518352918301918301614077565b6000602082840312156140a057600080fd5b81516001600160401b038111156140b657600080fd5b61160a8482850161402f565b634e487b7160e01b600052601160045260246000fd5b8082018082111561072d5761072d6140c2565b8181038181111561072d5761072d6140c2565b60006020828403121561411057600080fd5b81516001600160401b038082111561412757600080fd5b9083019060a0828603121561413b57600080fd5b6141436139f9565b825181526020830151602082015260408301516040820152606083015161416981613cfb565b606082015260808301518281111561418057600080fd5b61418c8782860161402f565b60808301525095945050505050565b918252602082015260400190565b808202811582820484141761072d5761072d6140c2565b6000826141dd57634e487b7160e01b600052601260045260246000fd5b500490565b600060e082840312156141f457600080fd5b60405160e081016001600160401b0381118282101715614216576142166139bb565b60405282518152602083015161422b81613cfb565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b634e487b7160e01b600052602160045260246000fd5b600060408201848352602060406020850152818551808452606093506060860191506020870160005b828110156142d0576142c0848351613b40565b92850192908401906001016142ad565b509198975050505050505050565b604081016002841061430057634e487b7160e01b600052602160045260246000fd5b9281526020015290565b6000825161431c818460208701613f0d565b919091019291505056fea15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b087a1532a7a87f7aacbb5e1d89fc13c95143d976fa27740467ab52d352a319ec6bef783485acfab8a5c4973c0e812a2b69d85355a7456c94fe3e779bc85017f2fe3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a264697066735822122062ca2cc50904b99ff943fe533355f028e1d279305cc4d2c4558f5f3f8161bb0c64736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061019f5760003560e01c806301159c70146101a457806301ffc9a7146101c657806324404fa7146101fb578063248a9ca3146102285780632f2ff15d1461025657806336568abe1461027657806339a67b77146102965780633a40519d146102c35780633c026aed146102f05780633f4ba83a146103105780634bbaf86b146103255780634f1ef2861461034557806352d1902d1461035857806354fd4d501461036d5780635c975abb14610381578063610b7010146103965780636d51fa9d146103b65780638456cb59146103d65780638d8c658f146103eb57806391d1485414610418578063986bce2c146104385780639b812098146104585780639e0e7d2a146104855780639e1006bb146104a5578063a217fddf146104c5578063a59850ce146104da578063ad3cb1cc146104ef578063adf8252d1461052d578063b3a7b9da1461054d578063c6b61e4c146105be578063d25f33e5146105fb578063d547741f1461061d578063e4e3cbd51461063d578063eb990c591461065d578063ec87621c1461067d578063f87422541461069f575b600080fd5b3480156101b057600080fd5b506101c46101bf366004613917565b6106c1565b005b3480156101d257600080fd5b506101e66101e1366004613934565b6106fc565b60405190151581526020015b60405180910390f35b34801561020757600080fd5b5060015461021b906001600160a01b031681565b6040516101f2919061395e565b34801561023457600080fd5b50610248610243366004613972565b610733565b6040519081526020016101f2565b34801561026257600080fd5b506101c461027136600461398b565b610753565b34801561028257600080fd5b506101c461029136600461398b565b610775565b3480156102a257600080fd5b506102b66102b1366004613add565b6107ad565b6040516101f29190613b59565b3480156102cf57600080fd5b506102e36102de366004613972565b610949565b6040516101f29190613ba7565b3480156102fc57600080fd5b5061024861030b366004613bf1565b610b2a565b34801561031c57600080fd5b506101c4610b67565b34801561033157600080fd5b506101c4610340366004613917565b610b8a565b6101c4610353366004613c54565b610bc5565b34801561036457600080fd5b50610248610be4565b34801561037957600080fd5b506001610248565b34801561038d57600080fd5b506101e6610c01565b3480156103a257600080fd5b506101c46103b1366004613d09565b610c16565b3480156103c257600080fd5b506102b66103d1366004613d4a565b610ca8565b3480156103e257600080fd5b506101c4610cc5565b3480156103f757600080fd5b5061040b610406366004613972565b610ce5565b6040516101f29190613d7e565b34801561042457600080fd5b506101e661043336600461398b565b610d8b565b34801561044457600080fd5b506101c4610453366004613972565b610dc1565b34801561046457600080fd5b50610248610473366004613db6565b60036020526000908152604090205481565b34801561049157600080fd5b506101c46104a0366004613dd7565b611102565b3480156104b157600080fd5b506102e36104c0366004613e97565b61131e565b3480156104d157600080fd5b50610248600081565b3480156104e657600080fd5b5061021b611612565b3480156104fb57600080fd5b50610520604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101f29190613f31565b34801561053957600080fd5b50610248610548366004613972565b61164e565b34801561055957600080fd5b506105b1610568366004613f64565b6040805180820182526000808252602091820181905282518084018452948152600280835283822085835201808352928120805486529390529081526001909101549082015290565b6040516101f29190613f86565b3480156105ca57600080fd5b506105de6105d9366004613972565b611971565b6040805182518152602092830151151592810192909252016101f2565b34801561060757600080fd5b5061024860008051602061438783398151915281565b34801561062957600080fd5b506101c461063836600461398b565b611a92565b34801561064957600080fd5b506101c4610658366004613f64565b611aae565b34801561066957600080fd5b506101c4610678366004613f9d565b611ad0565b34801561068957600080fd5b5061024860008051602061436783398151915281565b3480156106ab57600080fd5b506102486000805160206143e783398151915281565b6000805160206143e78339815191526106d981611c7d565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061072d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008061073e611c87565b60009384526020525050604090206001015490565b61075c82610733565b61076581611c7d565b61076f8383611cab565b50505050565b6001600160a01b038116331461079e5760405163334bd91960e11b815260040160405180910390fd5b6107a88282611d4c565b505050565b60606000610892600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b9190613fe3565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c9190614000565b84611dc4565b9050600084516001600160401b038111156108af576108af6139bb565b6040519080825280602002602001820160405280156108e857816020015b6108d56138b2565b8152602001906001900390816108cd5790505b50905060005b85518110156109405761091b86828151811061090c5761090c614019565b60200260200101518487612403565b82828151811061092d5761092d614019565b60209081029190910101526001016108ee565b50949350505050565b606061072d600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190613fe3565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190614000565b60015460408051630dd97a2960e11b8152905186926001600160a01b031691631bb2f4529160048083019260209291908290030181865afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a939190613fe3565b6001600160a01b03166303a229f66040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af8919081019061408e565b60005b604051908082528060200260200182016040528015610b24578160200160208202803683370190505b5061131e565b6000610b5d610b398787612a98565b60008781526002602081815260408084208c85529092019052902054868686612b99565b9695505050505050565b6000805160206143e7833981519152610b7f81611c7d565b610b87612ce7565b50565b6000805160206143e7833981519152610ba281611c7d565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b610bcd612d3e565b610bd682612de5565b610be08282612df0565b5050565b6000610bee612ead565b5060008051602061434783398151915290565b600080610c0c612ef6565b5460ff1692915050565b600080516020614387833981519152610c2e81611c7d565b8115610c6d576000858152600260208181526040808420888552909201905281206001018054859290610c629084906140d8565b90915550610ca19050565b6000858152600260208181526040808420888552909201905281206001018054859290610c9b9084906140eb565b90915550505b5050505050565b60408051600081526020810190915260609061072d9083906107ad565b6000805160206143e7833981519152610cdd81611c7d565b610b87612f1a565b60606000610cf283610949565b80519091506000816001600160401b03811115610d1157610d116139bb565b604051908082528060200260200182016040528015610d3a578160200160208202803683370190505b50905060005b8281101561094057838181518110610d5a57610d5a614019565b602002602001015160000151828281518110610d7857610d78614019565b6020908102919091010152600101610d40565b600080610d96611c87565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b600080516020614367833981519152610dd981611c7d565b610de1612f61565b600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190613fe3565b6001600160a01b031663c6b61e4c836040518263ffffffff1660e01b8152600401610e8591815260200190565b600060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eca91908101906140fe565b6060015115610eec57604051630c2c2e0360e11b815260040160405180910390fd5b60015460408051630824c3e960e21b815290516000926001600160a01b0316916320930fa49160048083019260209291908290030181865afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a9190613fe3565b6001600160a01b031663c6b61e4c846040518263ffffffff1660e01b8152600401610f8791815260200190565b600060405180830381865afa158015610fa4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fcc91908101906140fe565b905043816020015110610ff2576040516307cffebb60e01b815260040160405180910390fd5b60405183907f0867904ff22a2f7066c4e7f4f482ef661324499e28f2f99ced6b09c4a542384090600090a26107a883600160009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190613fe3565b6001600160a01b03166303a229f66040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110fd919081019061408e565b612f87565b60008051602061436783398151915261111a81611c7d565b611122612f61565b6000838152600260209081526040918290206001548351630824c3e960e21b8152935191936001600160a01b03909116926320930fa4926004808401938290030181865afa158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190613fe3565b6001600160a01b031663c6b61e4c856040518263ffffffff1660e01b81526004016111c991815260200190565b600060405180830381865afa1580156111e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120e91908101906140fe565b606001511561123057604051630c2c2e0360e11b815260040160405180910390fd5b82516000805b828110156112d757600086828151811061125257611252614019565b60209081029190910181015180820180518251600090815260028a01909452604090932092909255905190915061128990846140d8565b92508060000151887f14e080a7cc9c18aa303764d388372bee4d6b2dc6e2bc3cbe8a3d98c4c2072b4383602001516040516112c691815260200190565b60405180910390a350600101611236565b50808355604080518281526000602082015287917f93f86f9bc6bd89602512fcde5fe72737b3dc03783e87688e4d755449d6643bb3910160405180910390a2505050505050565b606060008060005b85518110156113b75761135286828151811061134457611344614019565b602002602001015189612a98565b61135c90846140d8565b925060026000898152602001908152602001600020600201600087838151811061138857611388614019565b6020026020010151815260200190815260200160002060000154826113ad91906140d8565b9150600101611326565b5084518087106113c757806113c9565b865b96506000876001600160401b038111156113e5576113e56139bb565b60405190808252806020026020018201604052801561142a57816020015b60408051808201909152600080825260208201528152602001906001900390816114035790505b5090508760000361144057935061160a92505050565b60005b8281101561160357600088828151811061145f5761145f614019565b602002602001015190506000611478828d89898d610b2a565b90508a60005b8c8110156115095785818151811061149857611498614019565b6020026020010151602001518311806114f457508581815181106114be576114be614019565b602002602001015160200151831480156114f457508581815181106114e5576114e5614019565b60200260200101516000015184105b1561150157809150611509565b60010161147e565b508b8110156115f557600061151f60018e6140eb565b90505b818111156115c157856115366001836140eb565b8151811061154657611546614019565b60200260200101516000015186828151811061156457611564614019565b6020908102919091010151528561157c6001836140eb565b8151811061158c5761158c614019565b6020026020010151602001518682815181106115aa576115aa614019565b602090810291909101810151015260001901611522565b506040518060400160405280848152602001838152508582815181106115e9576115e9614019565b60200260200101819052505b836001019350505050611443565b5093505050505b949350505050565b6004546000906001600160a01b031661163e57604051630d9c747960e41b815260040160405180910390fd5b506004546001600160a01b031690565b600060528211156116625750617530919050565b60408051610a60810182526101dc81526103b8602082015261059491810191909152610770606082015261094c6080820152610b2960a0820152610d0560c0820152610ee160e08201526110bd61010082015261129961012082015261147661014082015261165261016082015261182e610180820152611a0a6101a0820152611be66101c0820152611dc36101e0820152611f9f61020082015261217b6102208201526123576102408201526125336102608201526127106102808201526127d86102a08201526129046102c08201526129cc6102e0820152612af8610300820152612bc0610320820152612c88610340820152612db4610360820152612e7c610380820152612f446103a08201526130706103c08201526131386103e082015261326461040082015261332c6104208201526133f46104408201526135206104608201526135e86104808201526136b06104a08201526137dc6104c08201526138a46104e08201526139d0610500820152613a98610520820152613cf0610540820152613f486105608201526141a06105808201526143f86105a08201526146506105c08201526148a86105e0820152614b00610600820152614d58610620820152614fb06106408201526152086106608201526153fc6106808201526156546106a08201526158ac6106c0820152615b046106e0820152615d5c610700820152615fb461072082015261620c6107408201526164646107608201526166bc6107808201526169146107a0820152616b6c6107c0820152616bd06107e0820152616c34610800820152616cfc610820820152616d60610840820152616dc4610860820152616e28610880820152616e8c6108a0820152616f546108c0820152616fb86108e082015261701c6109008201526170806109208201526170e46109408201526171486109608201526172106109808201526172746109a08201526172d86109c082015261733c6109e08201526173a0610a00820152617468610a208201526174cc610a4082015280836053811061196157611961614019565b602002015161ffff169392505050565b604080518082019091526000808252602082015260008281526002602090815260409182902082518084018452815481526001548451630824c3e960e21b8152945192949193848101936001600160a01b03909216926320930fa492600480830193928290030181865afa1580156119ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a119190613fe3565b6001600160a01b031663c6b61e4c866040518263ffffffff1660e01b8152600401611a3e91815260200190565b600060405180830381865afa158015611a5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a8391908101906140fe565b60600151151590529392505050565b611a9b82610733565b611aa481611c7d565b61076f8383611d4c565b6000805160206143e7833981519152611ac681611c7d565b6107a883836134e5565b6000611ada613599565b805490915060ff600160401b82041615906001600160401b0316600081158015611b015750825b90506000826001600160401b03166001148015611b1d5750303b155b905081158015611b2b575080155b15611b495760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315611b7257845460ff60401b1916600160401b1785555b611b7a6135bd565b611b826135bd565b611b8a6135c5565b600180546001600160a01b0319166001600160a01b038a16179055611baf87876134e5565b611bc86000805160206143e783398151915260006135d5565b611bee6000805160206143678339815191526000805160206143e78339815191526135d5565b611bf960008a611cab565b50611c126000805160206143e78339815191528a611cab565b50611c2b6000805160206143678339815191528a611cab565b508315611c7257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b610b878133613635565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b600080611cb6611c87565b9050611cc28484610d8b565b611d42576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611cf83390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061072d565b600091505061072d565b600080611d57611c87565b9050611d638484610d8b565b15611d42576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061072d565b611dcc6138d3565b6000611f8c84600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e499190613fe3565b6001600160a01b031663c53036f46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa9190614000565b600160009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f219190613fe3565b6001600160a01b03166303a229f66040518163ffffffff1660e01b8152600401600060405180830381865afa158015611f5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f86919081019061408e565b8661131e565b90506000611f986138d3565b600083516001600160401b03811115611fb357611fb36139bb565b604051908082528060200260200182016040528015611fdc578160200160208202803683370190505b509050600084516001600160401b03811115611ffa57611ffa6139bb565b604051908082528060200260200182016040528015612023578160200160208202803683370190505b509050600085516001600160401b03811115612041576120416139bb565b60405190808252806020026020018201604052801561206a578160200160208202803683370190505b509050600094505b855185101561232457600160009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f29190613fe3565b6001600160a01b031663e5c8307d87878151811061211257612112614019565b6020026020010151600001518b6040518363ffffffff1660e01b815260040161213c92919061419b565b602060405180830381865afa158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217d9190614000565b82868151811061218f5761218f614019565b602002602001018181525050600260008a815260200190815260200160002060020160008787815181106121c5576121c5614019565b6020026020010151600001518152602001908152602001600020600101548286815181106121f5576121f5614019565b602002602001015161220791906140eb565b83868151811061221957612219614019565b602002602001018181525050600260008a8152602001908152602001600020600201600087878151811061224f5761224f614019565b60200260200101516000015181526020019081526020016000206000015481868151811061227f5761227f614019565b60200260200101818152505082858151811061229d5761229d614019565b6020026020010151846020018181516122b691906140d8565b90525081518290869081106122cd576122cd614019565b6020026020010151846000018181516122e691906140d8565b90525080518190869081106122fd576122fd614019565b60200260200101518460800181815161231691906140d8565b905250600190940193612072565b600094505b85518510156123f65761237983868151811061234757612347614019565b602002602001015182878151811061236157612361614019565b6020026020010151866020015187608001518c612b99565b8460600181815161238a91906140d8565b90525081516123d7908390879081106123a5576123a5614019565b60200260200101518287815181106123bf576123bf614019565b6020026020010151866000015187608001518c612b99565b846040018181516123e891906140d8565b905250600190940193612329565b5091979650505050505050565b61240b6138b2565b60015460408051630824c3e960e21b815290516000926001600160a01b0316916320930fa49160048083019260209291908290030181865afa158015612455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124799190613fe3565b6001600160a01b031663132c58e96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124da9190614000565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125559190613fe3565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015612592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b69190614000565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316631bb2f4526040518163ffffffff1660e01b8152600401602060405180830381865afa15801561260d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126319190613fe3565b6001600160a01b031663e5c8307d88846040518363ffffffff1660e01b815260040161265e92919061419b565b602060405180830381865afa15801561267b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269f9190614000565b60008381526002602081815260408084208c85529092019052812060010154919250906126cc90836140eb565b90506000876060015185612715846002600089815260200190815260200160002060020160008e8152602001908152602001600020600001548c602001518d608001518d612b99565b61271f91906141a9565b61272991906141c0565b9050600088604001518661277286600260008a815260200190815260200160002060020160008f8152602001908152602001600020600001548d600001518e608001518e612b99565b61277c91906141a9565b61278691906141c0565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128019190613fe3565b6001600160a01b031663b3a7b9da878d6040518363ffffffff1660e01b815260040161282e92919061419b565b60e060405180830381865afa15801561284b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286f91906141e2565b60600151905060405180606001604052808c8152602001600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fd9190613fe3565b6001600160a01b031663572d356e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561293a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295e9190614000565b600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d59190613fe3565b6001600160a01b031663d7033ca06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a369190614000565b88612a4187876141a9565b612a4b91906141c0565b612a579061016d6141a9565b612a6191906141a9565b612a6b91906141c0565b815260200185612a7b86856141a9565b612a8591906141c0565b90529750505050505050505b9392505050565b6000818152600260208181526040808420868552909201815281832060019081015490548351630824c3e960e21b8152935191936001600160a01b03909116926320930fa4926004808401938290030181865afa158015612afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b219190613fe3565b6001600160a01b0316632420e68884866040518363ffffffff1660e01b8152600401612b4e92919061419b565b602060405180830381865afa158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f9190614000565b612a9191906140eb565b60008060008511612bab576000612bc8565b84612bbe88670de0b6b3a76400006141a9565b612bc891906141c0565b90506000808511612bda576000612bf7565b84612bed88670de0b6b3a76400006141a9565b612bf791906141c0565b90506000808551600203612c545785600081518110612c1857612c18614019565b6020026020010151915085600180811115612c3557612c3561426e565b81518110612c4557612c45614019565b60200260200101519050612ca7565b8551600003612c8e57505060036020526000805160206143c783398151915254600160005260008051602061432783398151915254612ca7565b60405163b5c0c3e160e01b815260040160405180910390fd5b68056bc75e2d63100000612cbb84836141a9565b612cc586856141a9565b612ccf91906140d8565b612cd991906141c0565b9a9950505050505050505050565b612cef61366e565b6000612cf9612ef6565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612d33919061395e565b60405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612dc557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612db9600080516020614347833981519152546001600160a01b031690565b6001600160a01b031614155b15612de35760405163703e46dd60e11b815260040160405180910390fd5b565b6000610be081611c7d565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612e4a575060408051601f3d908101601f19168201909252612e4791810190614000565b60015b612e725781604051634c9c8ce360e01b8152600401612e69919061395e565b60405180910390fd5b6000805160206143478339815191528114612ea357604051632a87526960e21b815260048101829052602401612e69565b6107a88383613693565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612de35760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b612f22612f61565b6000612f2c612ef6565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612d263390565b612f69610c01565b15612de35760405163d93c066560e01b815260040160405180910390fd5b60015460408051630824c3e960e21b815290516000926001600160a01b0316916320930fa49160048083019260209291908290030181865afa158015612fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff59190613fe3565b6001600160a01b031663c6b61e4c846040518263ffffffff1660e01b815260040161302291815260200190565b600060405180830381865afa15801561303f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261306791908101906140fe565b6060810151909150151560010361309157604051634b5e16a360e01b815260040160405180910390fd5b600061317784600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310e9190613fe3565b6001600160a01b031663c53036f46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561314b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316f9190614000565b856000610afb565b905060008060005b83518110156131bb5783818151811061319a5761319a614019565b602002602001015160200151836131b191906140d8565b925060010161317f565b50825160009081816001600160401b038111156131da576131da6139bb565b60405190808252806020026020018201604052801561322f57816020015b61321c60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816131f85790505b509050600080600095505b838610156134025787868151811061325457613254614019565b6020026020010151600001519450600087116132715760006132a9565b86896040015189888151811061328957613289614019565b60200260200101516020015161329f91906141a9565b6132a991906141c0565b915068056bc75e2d63100000600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015613308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332c9190613fe3565b6001600160a01b031663b3a7b9da8d886040518363ffffffff1660e01b815260040161335992919061419b565b60e060405180830381865afa158015613376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339a91906141e2565b606001516133a890846141a9565b6133b291906141c0565b9050604051806060016040528086815260200182846133d191906140eb565b8152602001828152508387815181106133ec576133ec614019565b602002602001018190525085600101955061323a565b600160009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015613455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134799190613fe3565b6001600160a01b031663cd0081a78c856040518363ffffffff1660e01b81526004016134a6929190614284565b600060405180830381600087803b1580156134c057600080fd5b505af11580156134d4573d6000803e3d6000fd5b505050505050505050505050505050565b6134ef81836140d8565b68056bc75e2d63100000146135175760405163b5c0c3e160e01b815260040160405180910390fd5b60036020526000805160206143c7833981519152829055600160008190526000805160206143278339815191528290556040516000805160206143a7833981519152916135659184906142de565b60405180910390a16000805160206143a783398151915260008360405161358d9291906142de565b60405180910390a15050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b612de36136e9565b6135cd6136e9565b612de361370e565b60006135df611c87565b905060006135ec84610733565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b61363f8282610d8b565b610be05760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401612e69565b613676610c01565b612de357604051638dfc202b60e01b815260040160405180910390fd5b61369c8261372b565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156136e1576107a88282613787565b610be06137fd565b6136f161381c565b612de357604051631afcd79f60e31b815260040160405180910390fd5b6137166136e9565b6000613720612ef6565b805460ff1916905550565b806001600160a01b03163b6000036137585780604051634c9c8ce360e01b8152600401612e69919061395e565b60008051602061434783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516137a4919061430a565b600060405180830381855af49150503d80600081146137df576040519150601f19603f3d011682016040523d82523d6000602084013e6137e4565b606091505b50915091506137f4858383613836565b95945050505050565b3415612de35760405163b398979f60e01b815260040160405180910390fd5b6000613826613599565b54600160401b900460ff16919050565b60608261384b5761384682613889565b612a91565b815115801561386257506001600160a01b0384163b155b156138825783604051639996b31560e01b8152600401612e69919061395e565b5080612a91565b8051156138995780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114610b8757600080fd5b60006020828403121561392957600080fd5b8135612a9181613902565b60006020828403121561394657600080fd5b81356001600160e01b031981168114612a9157600080fd5b6001600160a01b0391909116815260200190565b60006020828403121561398457600080fd5b5035919050565b6000806040838503121561399e57600080fd5b8235915060208301356139b081613902565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156139f3576139f36139bb565b60405290565b60405160a081016001600160401b03811182821017156139f3576139f36139bb565b604051601f8201601f191681016001600160401b0381118282101715613a4357613a436139bb565b604052919050565b60006001600160401b03821115613a6457613a646139bb565b5060051b60200190565b600082601f830112613a7f57600080fd5b81356020613a94613a8f83613a4b565b613a1b565b8083825260208201915060208460051b870101935086841115613ab657600080fd5b602086015b84811015613ad25780358352918301918301613abb565b509695505050505050565b60008060408385031215613af057600080fd5b82356001600160401b0380821115613b0757600080fd5b613b1386838701613a6e565b93506020850135915080821115613b2957600080fd5b50613b3685828601613a6e565b9150509250929050565b8051825260208082015190830152604090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015613b9b57613b88838551613b40565b9284019260609290920191600101613b75565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156123f657613be184835180518252602090810151910152565b9284019290850190600101613bc4565b600080600080600060a08688031215613c0957600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160401b03811115613c3b57600080fd5b613c4788828901613a6e565b9150509295509295909350565b60008060408385031215613c6757600080fd5b8235613c7281613902565b91506020838101356001600160401b0380821115613c8f57600080fd5b818601915086601f830112613ca357600080fd5b813581811115613cb557613cb56139bb565b613cc7601f8201601f19168501613a1b565b91508082528784828501011115613cdd57600080fd5b80848401858401376000848284010152508093505050509250929050565b8015158114610b8757600080fd5b60008060008060808587031215613d1f57600080fd5b8435935060208501359250604085013591506060850135613d3f81613cfb565b939692955090935050565b600060208284031215613d5c57600080fd5b81356001600160401b03811115613d7257600080fd5b61160a84828501613a6e565b6020808252825182820181905260009190848201906040850190845b81811015613b9b57835183529284019291840191600101613d9a565b600060208284031215613dc857600080fd5b813560028110612a9157600080fd5b6000806040808486031215613deb57600080fd5b833592506020808501356001600160401b03811115613e0957600080fd5b8501601f81018713613e1a57600080fd5b8035613e28613a8f82613a4b565b81815260069190911b82018301908381019089831115613e4757600080fd5b928401925b82841015613e875785848b031215613e645760008081fd5b613e6c6139d1565b84358152858501358682015282529285019290840190613e4c565b8096505050505050509250929050565b60008060008060808587031215613ead57600080fd5b843593506020850135925060408501356001600160401b0380821115613ed257600080fd5b613ede88838901613a6e565b93506060870135915080821115613ef457600080fd5b50613f0187828801613a6e565b91505092959194509250565b60005b83811015613f28578181015183820152602001613f10565b50506000910152565b6020815260008251806020840152613f50816040850160208701613f0d565b601f01601f19169190910160400192915050565b60008060408385031215613f7757600080fd5b50508035926020909101359150565b81518152602080830151908201526040810161072d565b60008060008060808587031215613fb357600080fd5b8435613fbe81613902565b93506020850135613fce81613902565b93969395505050506040820135916060013590565b600060208284031215613ff557600080fd5b8151612a9181613902565b60006020828403121561401257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261404057600080fd5b81516020614050613a8f83613a4b565b8083825260208201915060208460051b87010193508684111561407257600080fd5b602086015b84811015613ad25780518352918301918301614077565b6000602082840312156140a057600080fd5b81516001600160401b038111156140b657600080fd5b61160a8482850161402f565b634e487b7160e01b600052601160045260246000fd5b8082018082111561072d5761072d6140c2565b8181038181111561072d5761072d6140c2565b60006020828403121561411057600080fd5b81516001600160401b038082111561412757600080fd5b9083019060a0828603121561413b57600080fd5b6141436139f9565b825181526020830151602082015260408301516040820152606083015161416981613cfb565b606082015260808301518281111561418057600080fd5b61418c8782860161402f565b60808301525095945050505050565b918252602082015260400190565b808202811582820484141761072d5761072d6140c2565b6000826141dd57634e487b7160e01b600052601260045260246000fd5b500490565b600060e082840312156141f457600080fd5b60405160e081016001600160401b0381118282101715614216576142166139bb565b60405282518152602083015161422b81613cfb565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b634e487b7160e01b600052602160045260246000fd5b600060408201848352602060406020850152818551808452606093506060860191506020870160005b828110156142d0576142c0848351613b40565b92850192908401906001016142ad565b509198975050505050505050565b604081016002841061430057634e487b7160e01b600052602160045260246000fd5b9281526020015290565b6000825161431c818460208701613f0d565b919091019291505056fea15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b087a1532a7a87f7aacbb5e1d89fc13c95143d976fa27740467ab52d352a319ec6bef783485acfab8a5c4973c0e812a2b69d85355a7456c94fe3e779bc85017f2fe3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a264697066735822122062ca2cc50904b99ff943fe533355f028e1d279305cc4d2c4558f5f3f8161bb0c64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "estimatedDlpRewardPercentagesCustomized(uint256[],uint256[])": {
        "details": "Calculates based on ratings and current epoch parameters"
      },
      "finalizeEpoch(uint256)": {
        "params": {
          "epochId": "The epoch ID to save performanceRatings for"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "saveEpochPerformanceRatings(uint256,(uint256,uint256)[])": {
        "params": {
          "dlpPerformanceRatings": "Array of DLP performanceRatings to save",
          "epochId": "The epoch ID to save performanceRatings for"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "topDlpsCustomized(uint256,uint256,uint256[],uint256[])": {
        "details": "Uses insertion sort to maintain ordered list"
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimatedDlpRewardPercentagesCustomized(uint256[],uint256[])": {
        "notice": "Estimates reward percentages for given DLPs"
      },
      "finalizeEpoch(uint256)": {
        "notice": "Saves or updates epoch performanceRatings for DLPs"
      },
      "getMultiplier(uint256)": {
        "notice": "Returns stake score multiplier based number of days staked"
      },
      "saveEpochPerformanceRatings(uint256,(uint256,uint256)[])": {
        "notice": "Saves or updates epoch performanceRatings for DLPs"
      },
      "topDlpsCustomized(uint256,uint256,uint256[],uint256[])": {
        "notice": "Gets top DLP IDs by rating (performanceRating + stakeRating)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19565,
        "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19569,
        "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
        "label": "dlpRoot",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDLPRoot)13218"
      },
      {
        "astId": 19574,
        "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
        "label": "_epochs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Epoch)19614_storage)"
      },
      {
        "astId": 19580,
        "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
        "label": "ratingPercentages",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(RatingType)19599,t_uint256)"
      },
      {
        "astId": 19582,
        "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
        "label": "_foundationWalletAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDLPRoot)13218": {
        "encoding": "inplace",
        "label": "contract IDLPRoot",
        "numberOfBytes": "20"
      },
      "t_enum(RatingType)19599": {
        "encoding": "inplace",
        "label": "enum IDLPRootMetrics.RatingType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(RatingType)19599,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(RatingType)19599",
        "label": "mapping(enum IDLPRootMetrics.RatingType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Epoch)19614_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRootMetrics.Epoch)",
        "numberOfBytes": "32",
        "value": "t_struct(Epoch)19614_storage"
      },
      "t_mapping(t_uint256,t_struct(EpochDlp)19604_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRootMetrics.EpochDlp)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochDlp)19604_storage"
      },
      "t_struct(Epoch)19614_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRootMetrics.Epoch",
        "members": [
          {
            "astId": 19606,
            "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
            "label": "totalPerformanceRating",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19608,
            "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
            "label": "finalized",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 19613,
            "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
            "label": "dlps",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(EpochDlp)19604_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(EpochDlp)19604_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRootMetrics.EpochDlp",
        "members": [
          {
            "astId": 19601,
            "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
            "label": "performanceRating",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19603,
            "contract": "contracts/rootMetrics/DLPRootMetricsImplementation.sol:DLPRootMetricsImplementation",
            "label": "stakeAmountAdjustment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}