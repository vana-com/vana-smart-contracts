{
  "address": "0x295f3c0086DF0E53aeF8643Ac137c65aea846aAa",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CheckpointUnorderedInsertion",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakersPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LastEpochMustBeFinalised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCallableAnymore",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotStakeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeActionPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeAlreadyClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeAlreadyWithdrawn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeWithdrawalTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "MinStakeAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardClaimDelay",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "RewardMigratedToVanaPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "StakeClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStakeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newDlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "StakeMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "StakeMigratedToVanaPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFinal",
          "type": "bool"
        }
      ],
      "name": "StakeRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStakeWithdrawalDelay",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawalDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NEW_MULTIPLIER_EPOCH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeStartBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEpochToClaim",
          "type": "uint256"
        }
      ],
      "name": "claimStakeRewardUntilEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "stakeIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimStakesReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "stakeIds",
          "type": "uint256[]"
        }
      ],
      "name": "closeStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "createStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeOwner",
          "type": "address"
        }
      ],
      "name": "createStakeOnBehalf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpRootCore",
      "outputs": [
        {
          "internalType": "contract IDLPRootCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpRootEpoch",
      "outputs": [
        {
          "internalType": "contract IDLPRootEpoch",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpRootMetrics",
      "outputs": [
        {
          "internalType": "contract IDLPRootMetrics",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpRootRewardsTreasury",
      "outputs": [
        {
          "internalType": "contract IDLPRootTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpRootStakesTreasury",
      "outputs": [
        {
          "internalType": "contract IDLPRootTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "migrateRewardToVanaPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "migrateStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "migrateStakeAndRewardToVanaPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entityId",
          "type": "uint256"
        }
      ],
      "name": "migrateStakeToVanaPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardClaimDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "stakeClaimedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "stakeEpochReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeWithdrawalDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "stakerDlpStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "stakerDlpsListAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakerDlpsListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakerDlpsListValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "stakerStakesListAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        }
      ],
      "name": "stakerStakesListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        }
      ],
      "name": "stakerStakesListValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        }
      ],
      "name": "stakerTotalStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "stakersListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakersListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stakerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "dlpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "withdrawn",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lastClaimedEpochId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRoot.StakeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingLastBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDlpRootCoreAddress",
          "type": "address"
        }
      ],
      "name": "updateDlpRootCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDlpRootEpochAddress",
          "type": "address"
        }
      ],
      "name": "updateDlpRootEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDlpRootMetricsAddress",
          "type": "address"
        }
      ],
      "name": "updateDlpRootMetrics",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDlpRootRewardsTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "updateDlpRootRewardsTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDlpRootStakesTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "updateDlpRootStakesTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRewardClaimDelay",
          "type": "uint256"
        }
      ],
      "name": "updateRewardClaimDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStakingLastBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "updateStakeLastBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStakeWithdrawalDelay",
          "type": "uint256"
        }
      ],
      "name": "updateStakeWithdrawalDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "updateTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVanaPoolStakingAddress",
          "type": "address"
        }
      ],
      "name": "updateVanaPoolStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vanaPoolStaking",
      "outputs": [
        {
          "internalType": "contract IVanaPoolStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "stakeIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf703209bbb0f3ee6e64ee8417a387484bf24e0fe38ca9e5fdb2324d84e675325",
  "receipt": {
    "to": null,
    "from": "0x2AC93684679a5bdA03C6160def908CdB8D46792f",
    "contractAddress": "0x295f3c0086DF0E53aeF8643Ac137c65aea846aAa",
    "transactionIndex": 3,
    "gasUsed": "4133159",
    "logsBloom": "0x
    "blockHash": "0xd5641626914a88424a871962dd12c3d26b9b499c0683734215b21cfa4ce7af3f",
    "transactionHash": "0xf703209bbb0f3ee6e64ee8417a387484bf24e0fe38ca9e5fdb2324d84e675325",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 2495738,
        "transactionHash": "0xf703209bbb0f3ee6e64ee8417a387484bf24e0fe38ca9e5fdb2324d84e675325",
        "address": "0x295f3c0086DF0E53aeF8643Ac137c65aea846aAa",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0xd5641626914a88424a871962dd12c3d26b9b499c0683734215b21cfa4ce7af3f"
      }
    ],
    "blockNumber": 2495738,
    "cumulativeGasUsed": "5142169",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "77ec1ac1bc03c26c4ac599b9845b003c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakersPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastEpochMustBeFinalised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCallableAnymore\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStakeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeActionPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeWithdrawalTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStakeAmount\",\"type\":\"uint256\"}],\"name\":\"MinStakeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardClaimDelay\",\"type\":\"uint256\"}],\"name\":\"RewardClaimDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"RewardMigratedToVanaPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"StakeClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"StakeMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"StakeMigratedToVanaPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"}],\"name\":\"StakeRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakeWithdrawalDelay\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawalDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEW_MULTIPLIER_EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"calculateStakeClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"calculateStakeScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEpochToClaim\",\"type\":\"uint256\"}],\"name\":\"claimStakeRewardUntilEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"claimStakesReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"closeStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeOwner\",\"type\":\"address\"}],\"name\":\"createStakeOnBehalf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRootCore\",\"outputs\":[{\"internalType\":\"contract IDLPRootCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRootEpoch\",\"outputs\":[{\"internalType\":\"contract IDLPRootEpoch\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRootMetrics\",\"outputs\":[{\"internalType\":\"contract IDLPRootMetrics\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRootRewardsTreasury\",\"outputs\":[{\"internalType\":\"contract IDLPRootTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRootStakesTreasury\",\"outputs\":[{\"internalType\":\"contract IDLPRootTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"migrateRewardToVanaPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"migrateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"migrateStakeAndRewardToVanaPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"migrateStakeToVanaPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardClaimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"stakeClaimedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"stakeEpochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"stakerDlpStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakerDlpsListAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerDlpsListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerDlpsListValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakerStakesListAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"stakerStakesListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"stakerStakesListValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"stakerTotalStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakersListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedEpochId\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRoot.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLastBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDlpRootCoreAddress\",\"type\":\"address\"}],\"name\":\"updateDlpRootCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDlpRootEpochAddress\",\"type\":\"address\"}],\"name\":\"updateDlpRootEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDlpRootMetricsAddress\",\"type\":\"address\"}],\"name\":\"updateDlpRootMetrics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDlpRootRewardsTreasuryAddress\",\"type\":\"address\"}],\"name\":\"updateDlpRootRewardsTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDlpRootStakesTreasuryAddress\",\"type\":\"address\"}],\"name\":\"updateDlpRootStakesTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinStakeAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardClaimDelay\",\"type\":\"uint256\"}],\"name\":\"updateRewardClaimDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakingLastBlockNumber\",\"type\":\"uint256\"}],\"name\":\"updateStakeLastBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakeWithdrawalDelay\",\"type\":\"uint256\"}],\"name\":\"updateStakeWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"updateTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVanaPoolStakingAddress\",\"type\":\"address\"}],\"name\":\"updateVanaPoolStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vanaPoolStaking\",\"outputs\":[{\"internalType\":\"contract IVanaPoolStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"calculateStakeClaimableAmount(uint256)\":{\"details\":\"Takes into account stake duration, score, and reward distributionThis method is not marked as view because is using a method that modifies state to call it as a view, please using static call\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateStakeClaimableAmount(uint256)\":{\"notice\":\"Calculates claimable rewards for a stake\"},\"calculateStakeScore(uint256,uint256,uint256)\":{\"notice\":\"Calculates stake score based on amount and duration\"},\"claimStakeRewardUntilEpoch(uint256,uint256)\":{\"notice\":\"Claims rewards for a stake up to specified epoch\"},\"claimStakesReward(uint256[])\":{\"notice\":\"Claims rewards for multiple stakes\"},\"closeStakes(uint256[])\":{\"notice\":\"Closes multiple stakes\"},\"withdrawStakes(uint256[])\":{\"notice\":\"Withdraws multiple closed stakes\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/root/DLPRootImplementation.sol\":\"DLPRootImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *\\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\\n * function only accessible if `msg.data.length == 0`.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /**\\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\\n     * invoke functions on this contract on behalf of other accounts.\\n     *\\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder_) {\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any particular address is the trusted forwarder.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder();\\n    }\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0x14b59e8cd5720c9cd31616450874b462f575bb52b387df2a54dbd26f9a07adf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/root/DLPRootImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/DLPRootStorageV1.sol\\\";\\n\\ncontract DLPRootImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC2771ContextUpgradeable,\\n    DLPRootStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    uint256 public constant NEW_MULTIPLIER_EPOCH = 3;\\n\\n    event MinStakeAmountUpdated(uint256 newMinStakeAmount);\\n    event StakeWithdrawalDelayUpdated(uint256 newStakeWithdrawalDelay);\\n    event RewardClaimDelayUpdated(uint256 newRewardClaimDelay);\\n    event StakeCreated(uint256 stakeId, address indexed staker, uint256 indexed dlpId, uint256 amount);\\n    event StakeClosed(uint256 indexed stakeId);\\n    event StakeWithdrawn(uint256 indexed stakeId);\\n    event StakeMigrated(uint256 oldStakeId, uint256 newStakeId, uint256 indexed newDlpId, uint256 newAmount);\\n    event StakeMigratedToVanaPool(uint256 indexed stakeId, uint256 amount, uint256 entityId);\\n    event RewardMigratedToVanaPool(uint256 indexed stakeId, uint256 amount, uint256 entityId);\\n    event StakeRewardClaimed(uint256 indexed stakeId, uint256 indexed epochId, uint256 amount, bool isFinal);\\n\\n    // Custom errors\\n    error InvalidParam();\\n    error InvalidStakeAmount();\\n    error StakeAlreadyWithdrawn();\\n    error StakeNotClosed();\\n    error StakeAlreadyClosed();\\n    error StakeWithdrawalTooEarly();\\n    error InvalidDlpId();\\n    error InvalidDlpStatus();\\n    error InvalidAddress();\\n    error StakeActionPaused();\\n    error NotStakeOwner();\\n    error NothingToClaim();\\n    error InvalidStakersPercentage();\\n    error TransferFailed();\\n    error EpochNotEnded();\\n    error LastEpochMustBeFinalised();\\n    error NotCallableAnymore();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() ERC2771ContextUpgradeable(address(0)) {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address ownerAddress) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    function _contextSuffixLength()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (uint256)\\n    {\\n        return ERC2771ContextUpgradeable._contextSuffixLength();\\n    }\\n\\n    function _checkRole(bytes32 role) internal view override {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual override returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    function version() external pure virtual override returns (uint256) {\\n        return 4;\\n    }\\n\\n    function stakeWithdrawalDelay() public view returns (uint256) {\\n        return _stakeWithdrawalDelayCheckpoints.latest();\\n    }\\n\\n    function rewardClaimDelay() public view returns (uint256) {\\n        return _rewardClaimDelayCheckpoints.latest();\\n    }\\n\\n    function stakes(uint256 stakeId) external view override returns (StakeInfo memory) {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        return\\n            StakeInfo({\\n                id: stakeId,\\n                stakerAddress: stake.stakerAddress,\\n                dlpId: stake.dlpId,\\n                amount: stake.amount,\\n                startBlock: stake.startBlock,\\n                withdrawn: stake.withdrawn,\\n                endBlock: stake.endBlock,\\n                lastClaimedEpochId: stake.lastClaimedIndexEpochId\\n            });\\n    }\\n\\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view override returns (uint256) {\\n        return _stakes[stakeId].claimedAmounts[epochId];\\n    }\\n\\n    function stakersListCount() external view returns (uint256) {\\n        return _stakersList.length();\\n    }\\n    function stakersListAt(uint256 index) external view returns (address) {\\n        return _stakersList.at(index);\\n    }\\n\\n    function stakerDlpsListCount(address staker) external view override returns (uint256) {\\n        return _stakers[staker].dlpIds.length();\\n    }\\n\\n    function stakerDlpsListAt(address staker, uint256 index) external view override returns (uint256) {\\n        return _stakers[staker].dlpIds.at(index);\\n    }\\n\\n    function stakerDlpsListValues(address staker) external view override returns (uint256[] memory) {\\n        return _stakers[staker].dlpIds.values();\\n    }\\n\\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256) {\\n        return _stakers[stakerAddress].stakeIds.length();\\n    }\\n\\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256) {\\n        return _stakers[stakerAddress].stakeIds.at(index);\\n    }\\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory) {\\n        return _stakers[stakerAddress].stakeIds.values();\\n    }\\n\\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256) {\\n        return _stakers[stakerAddress].totalStakeAmount;\\n    }\\n\\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256) {\\n        return _stakers[stakerAddress].dlpStakeAmounts[dlpId];\\n    }\\n\\n    /**\\n     * @notice Calculates claimable rewards for a stake\\n     * @dev Takes into account stake duration, score, and reward distribution\\n     * @dev This method is not marked as view because is using a method that modifies state\\n     * to call it as a view, please using static call\\n     */\\n    function calculateStakeClaimableAmount(uint256 stakeId) external override returns (uint256) {\\n        return _calculateStakeRewardUntilEpoch(stakeId, dlpRootEpoch.epochsCount() - 1, false);\\n    }\\n\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newMinStakeAmount > dlpRootCore.minDlpRegistrationStake()) {\\n            revert InvalidParam();\\n        }\\n\\n        minStakeAmount = newMinStakeAmount;\\n        emit MinStakeAmountUpdated(newMinStakeAmount);\\n    }\\n\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external override onlyRole(MAINTAINER_ROLE) {\\n        _checkpointPush(_stakeWithdrawalDelayCheckpoints, newStakeWithdrawalDelay);\\n        emit StakeWithdrawalDelayUpdated(newStakeWithdrawalDelay);\\n    }\\n\\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external override onlyRole(MAINTAINER_ROLE) {\\n        _checkpointPush(_rewardClaimDelayCheckpoints, newRewardClaimDelay);\\n        emit RewardClaimDelayUpdated(newRewardClaimDelay);\\n    }\\n\\n    function updateTrustedForwarder(address trustedForwarderAddress) external onlyRole(MAINTAINER_ROLE) {\\n        _trustedForwarder = trustedForwarderAddress;\\n    }\\n\\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        dlpRootMetrics = IDLPRootMetrics(newDlpRootMetricsAddress);\\n    }\\n\\n    function updateDlpRootCore(address newDlpRootCoreAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        dlpRootCore = IDLPRootCore(newDlpRootCoreAddress);\\n    }\\n    function updateDlpRootEpoch(address newDlpRootEpochAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        dlpRootEpoch = IDLPRootEpoch(newDlpRootEpochAddress);\\n    }\\n\\n    function updateDlpRootRewardsTreasury(\\n        address newDlpRootRewardsTreasuryAddress\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        dlpRootRewardsTreasury = IDLPRootTreasury(newDlpRootRewardsTreasuryAddress);\\n    }\\n\\n    function updateVanaPoolStaking(address newVanaPoolStakingAddress) external onlyRole(MAINTAINER_ROLE) {\\n        vanaPoolStaking = IVanaPoolStaking(newVanaPoolStakingAddress);\\n    }\\n\\n    function updateStakeLastBlockNumber(uint256 newStakingLastBlockNumber) external onlyRole(MAINTAINER_ROLE) {\\n        stakingLastBlockNumber = newStakingLastBlockNumber;\\n    }\\n\\n    function updateDlpRootStakesTreasury(\\n        address newDlpRootStakesTreasuryAddress\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        dlpRootStakesTreasury = IDLPRootTreasury(newDlpRootStakesTreasuryAddress);\\n    }\\n\\n    function createStake(uint256 dlpId) external payable override nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n\\n        _createStake(_msgSender(), dlpId, msg.value, block.number);\\n    }\\n\\n    function createStakeOnBehalf(\\n        uint256 dlpId,\\n        address stakeOwner\\n    ) external payable override nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n\\n        _createStake(stakeOwner, dlpId, msg.value, block.number);\\n    }\\n\\n    /**\\n     * @notice Closes multiple stakes\\n     */\\n    function closeStakes(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n        for (uint256 i = 0; i < stakeIds.length; ) {\\n            _closeStake(_msgSender(), stakeIds[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws multiple closed stakes\\n     */\\n    function withdrawStakes(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n        for (uint256 i = 0; i < stakeIds.length; ) {\\n            _withdrawStake(_msgSender(), stakeIds[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function migrateStake(\\n        uint256 stakeId,\\n        uint256 newDlpId,\\n        uint256 newAmount\\n    ) external override nonReentrant whenNotPaused {\\n        revert NotCallableAnymore();\\n    }\\n\\n    /**\\n     * @notice Claims rewards for multiple stakes\\n     */\\n    function claimStakesReward(uint256[] memory stakeIds) external override nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n\\n        for (uint256 i = 0; i < stakeIds.length; ) {\\n            _claimStakeRewardUntilEpoch(stakeIds[i], dlpRootEpoch.epochsCount() - 1);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims rewards for a stake up to specified epoch\\n     */\\n    function claimStakeRewardUntilEpoch(\\n        uint256 stakeId,\\n        uint256 lastEpochToClaim\\n    ) external override nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n        uint256 epochsCount = dlpRootEpoch.epochsCount();\\n        uint256 maxEpoch = lastEpochToClaim < epochsCount - 1 ? lastEpochToClaim : epochsCount - 1;\\n        _claimStakeRewardUntilEpoch(stakeId, maxEpoch);\\n    }\\n\\n    function migrateStakeAndRewardToVanaPool(uint256 stakeId, uint256 entityId) external nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n\\n        Stake storage stake = _stakes[stakeId];\\n\\n        if (stake.stakerAddress != _msgSender()) {\\n            revert NotStakeOwner();\\n        }\\n\\n        bool hasMigrated = false;\\n        if (stake.withdrawn == false) {\\n            uint256 amount = stake.amount - stake.movedAmount;\\n\\n            stake.movedAmount = stake.amount;\\n\\n            if (stake.endBlock == 0) {\\n                _closeStake(_msgSender(), stakeId);\\n            }\\n\\n            bool success = dlpRootStakesTreasury.transferVana(payable(address(this)), amount);\\n            if (!success) {\\n                revert TransferFailed();\\n            }\\n\\n            vanaPoolStaking.stake{value: amount}(entityId, stake.stakerAddress, 0);\\n\\n            emit StakeMigratedToVanaPool(stakeId, amount, entityId);\\n\\n            stake.withdrawn = true;\\n\\n            hasMigrated = true;\\n        }\\n\\n        uint256 rewardAmount = _calculateStakeRewardUntilEpoch(stakeId, dlpRootEpoch.epochsCount() - 1, true);\\n\\n        if (rewardAmount > 0) {\\n            bool success = dlpRootRewardsTreasury.transferVana(payable(address(this)), rewardAmount);\\n            if (!success) {\\n                revert TransferFailed();\\n            }\\n\\n            vanaPoolStaking.stake{value: rewardAmount}(entityId, stake.stakerAddress, 0);\\n\\n            emit RewardMigratedToVanaPool(stakeId, rewardAmount, entityId);\\n\\n            hasMigrated = true;\\n        }\\n\\n        if (!hasMigrated) {\\n            revert NothingToClaim();\\n        }\\n    }\\n\\n    function migrateStakeToVanaPool(uint256 stakeId, uint256 entityId) external nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n\\n        Stake storage stake = _stakes[stakeId];\\n\\n        if (stake.stakerAddress != _msgSender()) {\\n            revert NotStakeOwner();\\n        }\\n\\n        if (stake.withdrawn) {\\n            revert StakeAlreadyWithdrawn();\\n        }\\n\\n        uint256 amount = stake.amount - stake.movedAmount;\\n\\n        stake.movedAmount = stake.amount;\\n        if (stake.endBlock == 0) {\\n            _closeStake(_msgSender(), stakeId);\\n        }\\n\\n        stake.withdrawn = true;\\n\\n        bool success = dlpRootStakesTreasury.transferVana(payable(address(this)), amount);\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        vanaPoolStaking.stake{value: amount}(entityId, stake.stakerAddress, 0);\\n\\n        emit StakeMigratedToVanaPool(stakeId, amount, entityId);\\n    }\\n\\n    function migrateRewardToVanaPool(uint256 stakeId, uint256 entityId) external nonReentrant whenNotPaused {\\n        dlpRootEpoch.createEpochs();\\n\\n        Stake storage stake = _stakes[stakeId];\\n\\n        if (stake.stakerAddress != _msgSender()) {\\n            revert NotStakeOwner();\\n        }\\n\\n        uint256 rewardAmount = _calculateStakeRewardUntilEpoch(stakeId, dlpRootEpoch.epochsCount() - 1, true);\\n\\n        if (rewardAmount == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        bool success = dlpRootRewardsTreasury.transferVana(payable(address(this)), rewardAmount);\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        vanaPoolStaking.stake{value: rewardAmount}(entityId, stake.stakerAddress, 0);\\n\\n        emit RewardMigratedToVanaPool(stakeId, rewardAmount, entityId);\\n    }\\n\\n    /**\\n     * @notice Calculates stake score based on amount and duration\\n     */\\n    function calculateStakeScore(\\n        uint256 stakeAmount,\\n        uint256 stakeStartBlock,\\n        uint256 blockNumber\\n    ) public view override returns (uint256) {\\n        uint256 daySize = dlpRootEpoch.daySize();\\n        uint256 daysStaked = (blockNumber - stakeStartBlock) / daySize;\\n        // changed the multiplier formula but we want to keep the same behavior for stakes before epoch3\\n        if (stakeStartBlock <= dlpRootEpoch.epochs(NEW_MULTIPLIER_EPOCH - 1).endBlock) {\\n            daysStaked += dlpRootEpoch.epochSize() / daySize - 1;\\n        }\\n        return (stakeAmount * dlpRootMetrics.getMultiplier(daysStaked)) / 10000;\\n    }\\n\\n    /**\\n     * @notice Calculates reward for a stake up to specified epoch\\n     */\\n    function _calculateStakeRewardUntilEpoch(\\n        uint256 stakeId,\\n        uint256 lastEpochToClaim,\\n        bool isClaim\\n    ) internal returns (uint256) {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        uint256 totalRewardAmount;\\n        uint256 epochToClaim = stake.lastClaimedIndexEpochId + 1;\\n\\n        while (epochToClaim <= lastEpochToClaim) {\\n            totalRewardAmount += _calculateStakeRewardByEpoch(stakeId, epochToClaim, isClaim);\\n\\n            ++epochToClaim;\\n        }\\n\\n        return totalRewardAmount;\\n    }\\n\\n    /**\\n     * @notice Calculates reward for a stake up to specified epoch\\n     */\\n    function _calculateStakeRewardByEpoch(uint256 stakeId, uint256 epochId, bool isClaim) internal returns (uint256) {\\n        Stake storage stake = _stakes[stakeId];\\n        uint256 epochToClaim = stake.lastClaimedIndexEpochId + 1;\\n        uint256 rewardClaimDelayTmp = rewardClaimDelay();\\n\\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRootEpoch.epochs(epochId);\\n        IDLPRootEpoch.EpochDlpInfo memory epochDlp = dlpRootEpoch.epochDlps(epochId, stake.dlpId);\\n\\n        if (\\n            epochId == 0 ||\\n            epochDlp.totalStakesScore == 0 ||\\n            stake.startBlock > epoch.endBlock ||\\n            (stake.endBlock > 0 && epoch.endBlock > stake.endBlock)\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 stakeScore = calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock);\\n\\n        uint256 rewardAmount = (epochDlp.stakersRewardAmount * stakeScore) / epochDlp.totalStakesScore;\\n\\n        uint256 numberOfBlocks = block.number - epoch.endBlock;\\n\\n        bool fullRewardAmount = true;\\n\\n        if (rewardClaimDelayTmp > 0 && numberOfBlocks < rewardClaimDelayTmp) {\\n            rewardAmount = (rewardAmount * numberOfBlocks) / rewardClaimDelayTmp;\\n            fullRewardAmount = false;\\n        }\\n\\n        if (stake.claimedAmounts[epochId] >= rewardAmount) {\\n            return 0;\\n        }\\n\\n        uint256 claimableAmount = rewardAmount - stake.claimedAmounts[epochId];\\n        if (isClaim) {\\n            stake.claimedAmounts[epochId] = rewardAmount;\\n            emit StakeRewardClaimed(stakeId, epochId, rewardAmount, fullRewardAmount);\\n\\n            if (fullRewardAmount) {\\n                stake.lastClaimedIndexEpochId = epochToClaim;\\n            }\\n        }\\n\\n        return claimableAmount;\\n    }\\n\\n    /**\\n     * @notice Creates a new stake for a DLP\\n     * @dev Validates stake amount and DLP status before creating\\n     */\\n    function _createStake(address stakerAddress, uint256 dlpId, uint256 amount, uint256 startBlock) internal {\\n        if (block.number > stakingLastBlockNumber) {\\n            revert StakeActionPaused();\\n        }\\n\\n        if (stakerAddress == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        if (amount < minStakeAmount) {\\n            revert InvalidStakeAmount();\\n        }\\n\\n        IDLPRootCore.DlpInfo memory dlp = dlpRootCore.dlps(dlpId);\\n\\n        if (dlp.status == IDLPRootCore.DlpStatus.None || dlp.status == IDLPRootCore.DlpStatus.Deregistered) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        uint256 epochsCount = dlpRootEpoch.epochsCount();\\n\\n        Stake storage stake = _stakes[++stakesCount];\\n        stake.amount = amount;\\n        stake.startBlock = startBlock;\\n        stake.stakerAddress = stakerAddress;\\n        stake.dlpId = dlpId;\\n        stake.lastClaimedIndexEpochId = epochsCount > 1 ? epochsCount - 1 : 0;\\n\\n        Staker storage staker = _stakers[stakerAddress];\\n        staker.dlpIds.add(dlpId);\\n        staker.dlpStakeAmounts[dlpId] += amount;\\n        staker.stakeIds.add(stakesCount);\\n        staker.totalStakeAmount += amount;\\n\\n        _stakersList.add(stakerAddress);\\n\\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRootEpoch.epochs(epochsCount);\\n        if (startBlock >= epoch.startBlock && epochsCount >= NEW_MULTIPLIER_EPOCH) {\\n            // we know that amount > calculateStakeScore(amount, startBlock, _epochs[epochsCount].endBlock\\n            // because the multiplier during the current epoch is less than 10000\\n            dlpRootMetrics.updateEpochDlpStakeAmountAdjustment(\\n                epochsCount,\\n                dlpId,\\n                amount - calculateStakeScore(amount, startBlock, dlpRootEpoch.epochs(epochsCount).endBlock),\\n                true\\n            );\\n        }\\n\\n        (bool success, ) = payable(address(dlpRootStakesTreasury)).call{value: msg.value}(\\\"\\\");\\n\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit StakeCreated(stakesCount, stakerAddress, dlpId, amount);\\n\\n        dlpRootCore.addDlpStake(dlpId, amount);\\n\\n        //this part is only for transition from dlRoot -> dlpRootCore\\n        _checkpointAdd(_dlps[dlpId].stakeAmountCheckpoints, amount);\\n    }\\n\\n    /**\\n     * @notice Closes a stake and updates DLP status if needed\\n     */\\n    function _closeStake(address stakerAddress, uint256 stakeId) internal {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        if (stake.stakerAddress != stakerAddress) {\\n            revert NotStakeOwner();\\n        }\\n\\n        if (stake.endBlock != 0) {\\n            revert StakeAlreadyClosed();\\n        }\\n\\n        Staker storage staker = _stakers[stakerAddress];\\n        staker.dlpStakeAmounts[stake.dlpId] -= stake.amount;\\n        staker.totalStakeAmount -= stake.amount;\\n\\n        stake.endBlock = block.number;\\n\\n        uint256 epochsCount = dlpRootEpoch.epochsCount();\\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRootEpoch.epochs(epochsCount);\\n\\n        //we need to subtract the epoch dlp stake amount adjustment if the stake was created and closed in the current epoch\\n        if (epochsCount >= NEW_MULTIPLIER_EPOCH && stake.startBlock > epoch.startBlock) {\\n            dlpRootMetrics.updateEpochDlpStakeAmountAdjustment(\\n                epochsCount,\\n                stake.dlpId,\\n                stake.amount - calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock),\\n                false\\n            );\\n        }\\n\\n        emit StakeClosed(stakeId);\\n\\n        dlpRootCore.removeDlpStake(stake.dlpId, stake.amount);\\n\\n        if (stakeWithdrawalDelay() == 0) {\\n            _executeStakeWithdrawal(stakeId);\\n        }\\n\\n        //this part is only for transition from dlRoot -> dlpRootCore\\n        _checkpointAdd(_dlps[stake.dlpId].unstakeAmountCheckpoints, stake.amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws a closed stake after delay period\\n     */\\n    function _withdrawStake(address stakerAddress, uint256 stakeId) internal {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        if (stake.stakerAddress != stakerAddress) {\\n            revert NotStakeOwner();\\n        }\\n\\n        if (stake.withdrawn) {\\n            revert StakeAlreadyWithdrawn();\\n        }\\n\\n        if (stake.endBlock == 0) {\\n            revert StakeNotClosed();\\n        }\\n\\n        if (stake.endBlock + stakeWithdrawalDelay() > block.number) {\\n            revert StakeWithdrawalTooEarly();\\n        }\\n\\n        _executeStakeWithdrawal(stakeId);\\n    }\\n\\n    function _executeStakeWithdrawal(uint256 stakeId) internal {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        stake.withdrawn = true;\\n\\n        if (stake.amount - stake.movedAmount > 0) {\\n            bool success = dlpRootStakesTreasury.transferVana(\\n                payable(stake.stakerAddress),\\n                stake.amount - stake.movedAmount\\n            );\\n            if (!success) {\\n                revert TransferFailed();\\n            }\\n        }\\n\\n        emit StakeWithdrawn(stakeId);\\n    }\\n\\n    /**\\n     * @notice Claims reward for a stake up to specified epoch\\n     * @dev Calculates and distributes rewards based on stake score\\n     */\\n    function _claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) internal {\\n        uint256 totalRewardAmount = _calculateStakeRewardUntilEpoch(stakeId, lastEpochToClaim, true);\\n\\n        if (totalRewardAmount == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        Stake storage stake = _stakes[stakeId];\\n\\n        bool success = dlpRootRewardsTreasury.transferVana(payable(stake.stakerAddress), totalRewardAmount);\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to add value to checkpoint\\n     */\\n    function _checkpointAdd(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\\n        return store.push(uint48(block.number), store.latest() + uint208(delta));\\n    }\\n\\n    /**\\n     * @notice Helper function to set checkpoint value\\n     */\\n    function _checkpointPush(Checkpoints.Trace208 storage store, uint256 delta) private returns (uint208, uint208) {\\n        return store.push(uint48(block.number), uint208(delta));\\n    }\\n\\n    function stakeEpochReward(uint256 stakeId, uint256 epochId) external view returns (uint256) {\\n        Stake storage stake = _stakes[stakeId];\\n\\n        IDLPRootEpoch.EpochInfo memory epoch = dlpRootEpoch.epochs(epochId);\\n        IDLPRootEpoch.EpochDlpInfo memory epochDlp = dlpRootEpoch.epochDlps(epochId, stake.dlpId);\\n\\n        if (\\n            epochId == 0 ||\\n            epochDlp.totalStakesScore == 0 ||\\n            stake.startBlock > epoch.endBlock ||\\n            (stake.endBlock > 0 && epoch.endBlock > stake.endBlock)\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 stakeScore = calculateStakeScore(stake.amount, stake.startBlock, epoch.endBlock);\\n\\n        return (epochDlp.stakersRewardAmount * stakeScore) / epochDlp.totalStakesScore;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa7ef307485857f976ed3775a455a01e082ce6b7b6ac13d04da3880a490806683\",\"license\":\"MIT\"},\"contracts/root/interfaces/DLPRootStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./IDLPRoot.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {IDLPRootDeprecated} from \\\"./IDLPRootDeprecated.sol\\\";\\nimport {IVanaPoolStaking} from \\\"../../vanaPoolStaking/interfaces/IVanaPoolStaking.sol\\\";\\n\\n/**\\n * @notice For future upgrades, do not change DLPRootStorageV1. Create a new\\n * contract which implements DLPRootStorageV1\\n */\\nabstract contract DLPRootStorageV1 is IDLPRoot, IDLPRootDeprecated {\\n    address internal _trustedForwarder;\\n    uint256 private eligibleDlpsLimit; // not used anymore\\n    uint256 private epochDlpsLimit; // moved to DLPRootEpoch\\n    uint256 public override minStakeAmount; // Minimum stake allowed\\n    uint256 private minDlpStakersPercentage; // moved to DLPRootCore\\n    uint256 private minDlpRegistrationStake; // moved to DLPRootCore\\n    uint256 private dlpEligibilityThreshold; //moved to DLPRootCore\\n    uint256 private dlpSubEligibilityThreshold; // moved to DLPRootCore\\n\\n    // Historical values tracked using checkpoints\\n    Checkpoints.Trace208 internal _stakeWithdrawalDelayCheckpoints;\\n    Checkpoints.Trace208 internal _rewardClaimDelayCheckpoints;\\n\\n    uint256 private epochRewardAmount; // moved to DLPRootEpoch\\n    uint256 private epochSize; // moved to DLPRootEpoch\\n    uint256 private daySize; // moved to DLPRootCore\\n\\n    // DLP management\\n    uint256 private dlpsCount; // moved to DLPRootCore\\n    mapping(uint256 dlpId => Dlp dlp) internal _dlps; // moved to DLPRootCore\\n    mapping(address dlpAddress => uint256 dlpId) private dlpIds; // moved to DLPRootCore\\n    EnumerableSet.UintSet private _eligibleDlpsList; // moved to DLPRootCore\\n\\n    // Epoch tracking\\n    uint256 private epochsCount; // moved to DLPRootEpoch\\n    mapping(uint256 epochId => Epoch epoch) private _epochs; // moved to DLPRootEpoch\\n\\n    // Staker management\\n    EnumerableSet.AddressSet internal _stakersList;\\n    mapping(address stakerAddress => Staker staker) internal _stakers;\\n\\n    // Stake tracking\\n    uint256 public override stakesCount;\\n    mapping(uint256 stakeId => Stake stake) internal _stakes;\\n\\n    uint256 private maxDlpStakersPercentage; // moved to DLPRootCore\\n\\n    mapping(string dlpName => uint256 dlpId) private dlpNameToId; // moved to DLPRootCore\\n\\n    IDLPRootMetrics public override dlpRootMetrics;\\n    IDLPRootTreasury public override dlpRootRewardsTreasury;\\n    IDLPRootTreasury public override dlpRootStakesTreasury;\\n    IDLPRootCore public override dlpRootCore;\\n    IDLPRootEpoch public override dlpRootEpoch;\\n\\n    uint256 public stakingLastBlockNumber;\\n    IVanaPoolStaking public vanaPoolStaking;\\n}\\n\",\"keccak256\":\"0x1658f6263e7d2b62ea53fd119a15b2c292863e59d6fb44bbe4557aaee5073cd1\",\"license\":\"MIT\"},\"contracts/root/interfaces/IDLPRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\nimport {IDLPRootTreasury} from \\\"../../rootTreasury/interfaces/IDLPRootTreasury.sol\\\";\\n\\ninterface IDLPRoot {\\n    struct Stake {\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock; // 0 if active\\n        bool withdrawn;\\n        uint256 lastClaimedIndexEpochId; //todo: rename to lastClaimedEpochId\\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\\n        uint256 movedAmount; // Amount moved to new stake\\n    }\\n\\n    struct Staker {\\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\\n        uint256 totalStakeAmount;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootCore() external view returns (IDLPRootCore);\\n    function dlpRootEpoch() external view returns (IDLPRootEpoch);\\n\\n    // Additional view functions\\n    function minStakeAmount() external view returns (uint256);\\n    function stakeWithdrawalDelay() external view returns (uint256);\\n    function rewardClaimDelay() external view returns (uint256);\\n\\n    function stakersListCount() external view returns (uint256);\\n    function stakersListAt(uint256 index) external view returns (address);\\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\\n    function stakesCount() external view returns (uint256);\\n\\n    struct StakeInfo {\\n        uint256 id;\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        bool withdrawn;\\n        uint256 lastClaimedEpochId;\\n    }\\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\\n\\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\\n    function calculateStakeScore(\\n        uint256 stakeAmount,\\n        uint256 stakeStartBlock,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\\n    function updateDlpRootCore(address newDlpRootCoreAddress) external;\\n    function updateDlpRootEpoch(address newDlpRootEpochAddress) external;\\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\\n\\n    // Staking and rewards\\n    function createStake(uint256 dlpId) external payable;\\n    function createStakeOnBehalf(uint256 dlpId, address stakeOwner) external payable;\\n    function closeStakes(uint256[] memory stakeIds) external;\\n    function withdrawStakes(uint256[] memory stakeIds) external;\\n    function migrateStake(uint256 stakeId, uint256 newDlpId, uint256 newAmount) external;\\n    function claimStakesReward(uint256[] memory stakeIds) external;\\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\\n}\\n\",\"keccak256\":\"0x0ae279e92abc09eb9ab54021b326ec3edb0ca951990c1e8e9a5d8e9c99dd47d6\",\"license\":\"MIT\"},\"contracts/root/interfaces/IDLPRootDeprecated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\n\\ninterface IDLPRootDeprecated {\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Eligible, // Can participate in epochs\\n        SubEligible, // Below threshold but above minimum\\n        Deregistered\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress; // Receives non-staker rewards\\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\\n        Checkpoints.Trace208 unstakeAmountCheckpoints; // Historical unstake amounts\\n        uint256 epochIdsCount; // Number of participated epochs\\n        mapping(uint256 index => uint256 epochIds) epochIds;\\n        bool isVerified;\\n    }\\n\\n    struct EpochDlp {\\n        uint256 rewardAmount; // Rewards allocated to the DLP owner\\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\\n        uint256 totalStakesScore; // Sum of weighted stake scores\\n        bool rewardClaimed; // True if reward has been claimed\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n}\\n\",\"keccak256\":\"0x9735ed68e4cd211afb964a20976451a9048bd80c74a725511d4089f612147743\",\"license\":\"MIT\"},\"contracts/rootCore/interfaces/IDLPRootCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\n\\ninterface IDLPRootCore {\\n    // DLP lifecycle states from registration to deregistration\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Eligible, // Can participate in epochs\\n        SubEligible, // Below threshold but above minimum\\n        Deregistered\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress; // Receives non-staker rewards\\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\\n        bool isVerified;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\\n    function eligibleDlpsListCount() external view returns (uint256);\\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\\n\\n    function minDlpStakersPercentage() external view returns (uint256);\\n    function maxDlpStakersPercentage() external view returns (uint256);\\n    function minDlpRegistrationStake() external view returns (uint256);\\n    function dlpEligibilityThreshold() external view returns (uint256);\\n    function dlpSubEligibilityThreshold() external view returns (uint256);\\n    function eligibleDlpsLimit() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n\\n    struct DlpInfo {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address treasuryAddress;\\n        uint256 stakersPercentage;\\n        uint256 stakersPercentageEpoch;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 stakeAmount;\\n        bool isVerified;\\n    }\\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\\n\\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateDlpStakersPercentages(\\n        uint256 newMinDlpStakersPercentage,\\n        uint256 newMaxDlpStakersPercentage\\n    ) external;\\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\\n    function updateDlpEligibilityThresholds(\\n        uint256 newDlpSubEligibilityThreshold,\\n        uint256 newDlpEligibilityThreshold\\n    ) external;\\n    function updateDlpRoot(address newDlpRootAddress) external;\\n\\n    struct DlpRegistration {\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress;\\n        uint256 stakersPercentage;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n    }\\n\\n    // DLP lifecycle management\\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\\n    function updateDlpVerification(uint256 dlpId, bool isVerified) external;\\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\\n    function deregisterDlp(uint256 dlpId) external;\\n    function addDlpStake(uint256 dlpId, uint256 amount) external;\\n    function removeDlpStake(uint256 dlpId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdc0424a154d6e9bd25602d93a59a000e03760853d0c864d371078c1dc20af17b\",\"license\":\"MIT\"},\"contracts/rootEpoch/interfaces/IDLPRootEpoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\n\\ninterface IDLPRootEpoch {\\n    struct EpochDlp {\\n        uint256 ownerRewardAmount; // Rewards allocated to the DLP owner\\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\\n        uint256 totalStakesScore; // Sum of weighted stake scores\\n        uint256 rewardClaimed; // True if reward has been claimed\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function epochDlpsLimit() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function daySize() external view returns (uint256);\\n    function epochsCount() external view returns (uint256);\\n\\n    // Read-only struct views\\n    struct EpochInfo {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function epochRewardAmount() external view returns (uint256);\\n\\n    struct EpochDlpInfo {\\n        uint256 stakeAmount; // 0 if not a top DLP\\n        bool isTopDlp; // In top DLPs list this epoch\\n        uint256 ownerRewardAmount; // 0 if not top DLP or epoch not finished\\n        uint256 stakersPercentage; // 0 if not top DLP\\n        uint256 totalStakesScore; // 0 if not top DLP\\n        uint256 rewardClaimed;\\n        uint256 stakersRewardAmount;\\n    }\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\\n\\n    function epochDlpStakeAmount(uint256 epochId, uint256 dlpId) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n\\n    function updateDlpRoot(address newDlpRootAddress) external;\\n\\n    struct EpochDlpsTotalStakesScore {\\n        uint256 epochId;\\n        uint256 dlpId;\\n        uint256 totalStakesScore;\\n    }\\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\\n\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n    struct EpochDlpReward {\\n        uint256 dlpId;\\n        uint256 ownerRewardAmount;\\n        uint256 stakersRewardAmount;\\n    }\\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\\n}\\n\",\"keccak256\":\"0x2cb595764099116d4e0356f35fd40fcb6f31b3408af16461e2e6b1c8ee60e23d\",\"license\":\"MIT\"},\"contracts/rootMetrics/interfaces/IDLPRootMetrics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\n\\ninterface IDLPRootMetrics {\\n    enum RatingType {\\n        Stake,\\n        Performance\\n    }\\n    struct EpochDlp {\\n        uint256 performanceRating;\\n        uint256 stakeAmountAdjustment;\\n    }\\n\\n    struct Epoch {\\n        uint256 totalPerformanceRating;\\n        bool finalized; //deprecated\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    struct DlpRating {\\n        uint256 dlpId;\\n        uint256 rating;\\n    }\\n\\n    struct EpochInfo {\\n        uint256 totalPerformanceRating;\\n        bool finalized;\\n    }\\n\\n    struct EpochDlpInfo {\\n        uint256 performanceRating;\\n        uint256 stakeAmountAdjustment;\\n    }\\n\\n    struct DlpPerformanceRating {\\n        uint256 dlpId;\\n        uint256 performanceRating;\\n    }\\n\\n    struct StakeClaimableReward {\\n        uint256 totalClaimableAmount;\\n        StakeClaimableEpochReward[] stakeClaimableEpochRewards;\\n    }\\n\\n    struct StakeClaimableEpochReward {\\n        uint256 epochId;\\n        uint256 claimableAmount;\\n        bool fullRewardAmount;\\n    }\\n\\n    struct DlpRewardApy {\\n        uint256 dlpId;\\n        uint256 APY; //annual percentage yield for stakers\\n        uint256 EPY; //epoch percentage yield for stakers\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function foundationWalletAddress() external view returns (address payable);\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\\n    function ratingPercentages(RatingType rating) external view returns (uint256);\\n    function topDlpsCustomized(\\n        uint256 epochId,\\n        uint256 numberOfDlps,\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) external view returns (DlpRating[] memory);\\n    function topDlps(uint256 numberOfDlps) external view returns (DlpRating[] memory);\\n    function topDlpIds(uint256 numberOfDlps) external view returns (uint256[] memory);\\n    function estimatedDlpRewardPercentagesCustomized(\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) external view returns (DlpRewardApy[] memory);\\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\\n    function getMultiplier(uint256 index) external pure returns (uint256);\\n    function pause() external;\\n    function unpause() external;\\n    function updateDlpRoot(address dlpRootAddress) external;\\n    function updateFoundationWalletAddress(address payable newFoundationWalletAddress) external;\\n    function updateEpochDlpStakeAmountAdjustment(\\n        uint256 epochId,\\n        uint256 dlpId,\\n        uint256 adjustment,\\n        bool isAddition\\n    ) external;\\n    function saveEpochPerformanceRatings(uint256 epochId, DlpPerformanceRating[] memory dlpPerformanceRatings) external;\\n    function finalizeEpoch(uint256 epochId) external;\\n    function updateRatingPercentages(uint256 stakeRatingPercentage, uint256 performanceRatingPercentage) external;\\n}\\n\",\"keccak256\":\"0xc0d4f350c973e1d37dd51532e30a141492cf8fba9a18080123ddadf3d93d1f77\",\"license\":\"MIT\"},\"contracts/rootTreasury/interfaces/IDLPRootTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\n\\ninterface IDLPRootTreasury {\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function updateDlpRoot(address dlpRootAddress) external;\\n    function transferVana(address payable to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x88522b520c42c31138c1db9d9cbd38a0ccbfc03cfabf75ced0c727b0b0e8a5d3\",\"license\":\"MIT\"},\"contracts/vanaPoolEntity/interfaces/IVanaPoolEntity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IVanaPoolStaking} from \\\"../../vanaPoolStaking/interfaces/IVanaPoolStaking.sol\\\";\\n\\ninterface IVanaPoolEntity {\\n    enum EntityStatus {\\n        None,\\n        Active,\\n        Removed\\n    }\\n\\n    struct Entity {\\n        address ownerAddress;\\n        EntityStatus status;\\n        string name;\\n        uint256 maxAPY; // Maximum APY for this entity (in basis points, 1% = 100)\\n        uint256 lockedRewardPool; // Locked rewards for this entity\\n        uint256 activeRewardPool; // Active rewards available for distribution\\n        uint256 totalShares; // Total shares for this entity\\n        uint256 lastUpdateTimestamp; // When rewards were last processed\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function vanaPoolStaking() external view returns (IVanaPoolStaking);\\n    function minRegistrationStake() external view returns (uint256);\\n    function maxAPYDefault() external view returns (uint256);\\n\\n    struct EntityInfo {\\n        uint256 entityId;\\n        address ownerAddress;\\n        EntityStatus status;\\n        string name;\\n        uint256 maxAPY;\\n        uint256 lockedRewardPool;\\n        uint256 activeRewardPool;\\n        uint256 totalShares;\\n        uint256 lastUpdateTimestamp;\\n    }\\n\\n    function entitiesCount() external view returns (uint256);\\n    function entities(uint256 entityId) external view returns (EntityInfo memory);\\n    function entityByName(string calldata entityName) external view returns (EntityInfo memory);\\n    function entityNameToId(string calldata entityName) external view returns (uint256);\\n\\n    function entityShareToVana(uint256 entityId) external view returns (uint256);\\n    function vanaToEntityShare(uint256 entityId) external view returns (uint256);\\n\\n    function pause() external;\\n    function unpause() external;\\n    function updateVanaPool(address vanaPoolStakingAddress) external;\\n    function updateMinRegistrationStake(uint256 newMinRegistrationStake) external;\\n\\n    struct EntityRegistrationInfo {\\n        address ownerAddress;\\n        string name;\\n    }\\n\\n    function createEntity(EntityRegistrationInfo calldata entityRegistrationInfo) external payable;\\n    function updateEntity(uint256 entityId, EntityRegistrationInfo calldata entityRegistrationInfo) external;\\n    //    function removeEntity(uint256 entityId) external;\\n\\n    // Entity reward management\\n    function addRewards(uint256 entityId) external payable;\\n    function processRewards(uint256 entityId) external;\\n    function updateEntityMaxAPY(uint256 entityId, uint256 newMaxAPY) external;\\n\\n    // Get entities\\n    function activeEntitiesValues() external view returns (uint256[] memory);\\n\\n    function updateEntityPool(uint256 entityId, uint256 shares, uint256 amount, bool isStake) external;\\n\\n    function calculateYield(uint256 apy, uint256 principal, uint256 time) external pure returns (uint256);\\n\\n    function calculateContinuousAPYByEntity(uint256 entityId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4fc0fafd4e3ad9ebccb5a0779f35bfdec15bdea3e08c41bd2bb48a50cf1d5fe3\",\"license\":\"MIT\"},\"contracts/vanaPoolStaking/interfaces/IVanaPoolStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IVanaPoolEntity} from \\\"../../vanaPoolEntity/interfaces/IVanaPoolEntity.sol\\\";\\nimport {IVanaPoolTreasury} from \\\"../../vanaPoolTreasury/interfaces/IVanaPoolTreasury.sol\\\";\\n\\ninterface IVanaPoolStaking {\\n    struct StakerEntity {\\n        uint256 shares;\\n    }\\n\\n    struct Staker {\\n        mapping(uint256 entityId => StakerEntity entity) entities;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function vanaPoolEntity() external view returns (IVanaPoolEntity);\\n    function vanaPoolTreasury() external view returns (IVanaPoolTreasury);\\n    function minStakeAmount() external view returns (uint256);\\n\\n    function stake(uint256 entityId, address recipient, uint256 shareAmountMin) external payable;\\n    function unstake(uint256 entityId, uint256 amount, uint256 vanaAmountMin) external;\\n\\n    function stakerEntities(address staker, uint256 entityId) external view returns (StakerEntity memory);\\n\\n    function pause() external;\\n    function unpause() external;\\n    function updateVanaPoolEntity(address newVanaPoolEntityAddress) external;\\n    function updateVanaPoolTreasury(address newVanaPoolTreasuryAddress) external;\\n    function updateMinStakeAmount(uint256 newMinStake) external;\\n\\n    function registerEntityStake(uint256 entityId, address ownerAddress, uint256 registrationStake) external;\\n}\\n\",\"keccak256\":\"0x5b3f9ffbf0fdc5ea0eaddd0f27611c3ba3b402a988c493393fade48e23e489a6\",\"license\":\"MIT\"},\"contracts/vanaPoolTreasury/interfaces/IVanaPoolTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IVanaPoolTreasury {\\n    function version() external pure returns (uint256);\\n    function vanaPool() external view returns (address);\\n    function updateVanaPool(address vanaPoolAddress) external;\\n    function transferVana(address payable to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf5ea7e2f20f6416b2231539cdaf3145bfca259270adfffc17b255d7fd67d5bae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052306080523480156200001557600080fd5b50600060a052620000256200002b565b620000df565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007c5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dc5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b60805160a0516149596200011060003960005050600081816132c4015281816132ed015261343101526149596000f3fe6080604052600436106102ed5760003560e01c806301e22a69146102f957806301ffc9a71461031b57806307c4ec0f146103505780630fc779ae14610370578063151db1b9146103935780631bb2f452146103a85780631bf6ddae146103d55780631e6760d3146103e857806320930fa414610408578063248a9ca31461042857806324918d791461044857806325f6e987146104685780632f2ff15d1461048857806336568abe146104a85780633f4ba83a146104c857806346582583146104dd5780634c85c8d9146104f25780634f1ef2861461051257806352d1902d1461052557806354fd4d501461053a5780635690473e1461054e578063572b6c05146105955780635c975abb146105b55780635f5e4de7146105ca578063633e7e54146105ea57806363b8a87a1461060a57806364aad42314610620578063659ea4851461064057806368bd646a146106605780637217d22d146106805780637997d1b6146106ad5780637d40712c146106cd5780637da0a877146107095780637eb9b0c31461071e578063803d41d91461073e5780638456cb59146107775780638c31cd3e1461078c57806391d14854146107ac57806392b95db9146107cc57806397f2746c146107ec5780639889a3031461080c578063a217fddf1461082c578063ad3cb1cc14610841578063c4d66de81461087f578063c6ce301a1461089f578063d4e90b97146108bf578063d547741f146108d2578063d5a44f86146108f2578063d8060cd514610979578063db589c5b14610999578063dd8c017c146109b9578063e1d648d1146109d9578063e5331f17146109f9578063e6fe27c414610a0f578063e7ebaa6f14610a2f578063e837154514610a4f578063e983d10f14610a6f578063e98fa42b14610a8f578063ec5903f414610aaf578063ed2def1e14610ac4578063f188768414610ae4578063f874225414610afa578063f90b031114610b1c578063f9823b1314610b3c578063fb3b894614610b5c578063ff47cfb314610b7c57600080fd5b366102f457005b600080fd5b34801561030557600080fd5b50610319610314366004613fac565b610b9c565b005b34801561032757600080fd5b5061033b610336366004613fc9565b610bd7565b60405190151581526020015b60405180910390f35b34801561035c57600080fd5b5061031961036b366004613ff3565b610c0e565b34801561037c57600080fd5b50610385610e77565b604051908152602001610347565b34801561039f57600080fd5b50610385610e88565b3480156103b457600080fd5b50601e546103c8906001600160a01b031681565b6040516103479190614015565b6103196103e3366004614029565b610ea2565b3480156103f457600080fd5b50610319610403366004613ff3565b610f38565b34801561041457600080fd5b50601f546103c8906001600160a01b031681565b34801561043457600080fd5b50610385610443366004614029565b611066565b34801561045457600080fd5b506103196104633660046140f6565b611086565b34801561047457600080fd5b50610319610483366004613ff3565b611145565b34801561049457600080fd5b506103196104a3366004614180565b611583565b3480156104b457600080fd5b506103196104c3366004614180565b6115a5565b3480156104d457600080fd5b506103196115ed565b3480156104e957600080fd5b5061038561160d565b3480156104fe57600080fd5b5061038561050d3660046141b0565b611619565b610319610520366004614203565b611863565b34801561053157600080fd5b5061038561187e565b34801561054657600080fd5b506004610385565b34801561055a57600080fd5b50610385610569366004614290565b6001600160a01b0391909116600090815260166020908152604080832093835260029093019052205490565b3480156105a157600080fd5b5061033b6105b0366004613fac565b61189b565b3480156105c157600080fd5b5061033b6118c0565b3480156105d657600080fd5b506103c86105e5366004614029565b6118d5565b3480156105f657600080fd5b50610385610605366004614290565b6118e2565b34801561061657600080fd5b5061038560205481565b34801561062c57600080fd5b5061038561063b366004614290565b611904565b34801561064c57600080fd5b5061031961065b366004613fac565b611929565b34801561066c57600080fd5b506021546103c8906001600160a01b031681565b34801561068c57600080fd5b506106a061069b366004613fac565b611964565b60405161034791906142bc565b3480156106b957600080fd5b50601d546103c8906001600160a01b031681565b3480156106d957600080fd5b506103856106e8366004613ff3565b60009182526018602090815260408084209284526007909201905290205490565b34801561071557600080fd5b506103c8611988565b34801561072a57600080fd5b50610319610739366004613fac565b611997565b34801561074a57600080fd5b50610385610759366004613fac565b6001600160a01b031660009081526016602052604090206005015490565b34801561078357600080fd5b506103196119c5565b34801561079857600080fd5b506103856107a7366004614029565b6119e5565b3480156107b857600080fd5b5061033b6107c7366004614180565b611a75565b3480156107d857600080fd5b506106a06107e7366004613fac565b611aab565b3480156107f857600080fd5b50601b546103c8906001600160a01b031681565b34801561081857600080fd5b50601c546103c8906001600160a01b031681565b34801561083857600080fd5b50610385600081565b34801561084d57600080fd5b50610872604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516103479190614324565b34801561088b57600080fd5b5061031961089a366004613fac565b611ad2565b3480156108ab57600080fd5b506103196108ba366004613ff3565b611bee565b6103196108cd366004614180565b611e49565b3480156108de57600080fd5b506103196108ed366004614180565b611ed5565b3480156108fe57600080fd5b5061091261090d366004614029565b611ef1565b6040516103479190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c08083015115159082015260e091820151918101919091526101000190565b34801561098557600080fd5b50610319610994366004614029565b611fba565b3480156109a557600080fd5b506103196109b4366004613fac565b6120a6565b3480156109c557600080fd5b506103196109d43660046140f6565b6120e1565b3480156109e557600080fd5b506103196109f43660046140f6565b612212565b348015610a0557600080fd5b5061038560175481565b348015610a1b57600080fd5b50610319610a2a366004614029565b6122c8565b348015610a3b57600080fd5b50610385610a4a366004613fac565b61231d565b348015610a5b57600080fd5b50610385610a6a366004613fac565b61233e565b348015610a7b57600080fd5b50610319610a8a3660046141b0565b612362565b348015610a9b57600080fd5b50610319610aaa366004614029565b61238b565b348015610abb57600080fd5b50610385600381565b348015610ad057600080fd5b50610385610adf366004613ff3565b6123e0565b348015610af057600080fd5b5061038560035481565b348015610b0657600080fd5b5061038560008051602061490483398151915281565b348015610b2857600080fd5b50610319610b37366004613fac565b61257a565b348015610b4857600080fd5b50610319610b57366004613fac565b6125b5565b348015610b6857600080fd5b50610319610b77366004614029565b6125e3565b348015610b8857600080fd5b50610319610b97366004613fac565b612601565b600080516020614904833981519152610bb48161263c565b50601e80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b1480610c0857506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c16612646565b610c1e61267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6e57600080fd5b505af1158015610c82573d6000803e3d6000fd5b50505060008381526018602052604090209050610c9d6126a4565b81546001600160a01b03908116911614610cca5760405163335e79fb60e21b815260040160405180910390fd5b600581015460ff1615610cf05760405163190507cd60e21b815260040160405180910390fd5b600081600801548260020154610d06919061436d565b600283015460088401556004830154909150600003610d3057610d30610d2a6126a4565b856126ae565b60058201805460ff19166001179055601d5460405163117511c960e01b81526000916001600160a01b03169063117511c990610d729030908690600401614380565b6020604051808303816000875af1158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db591906143ae565b905080610dd5576040516312171d8360e31b815260040160405180910390fd5b6021548354604051631ba724c760e21b81526001600160a01b0392831692636e9c931c928692610e0e928a9216906000906004016143c9565b6000604051808303818588803b158015610e2757600080fd5b505af1158015610e3b573d6000803e3d6000fd5b5050505050846000805160206148c48339815191528386604051610e609291906143e8565b60405180910390a2505050610e736129f3565b5050565b6000610e836014612a04565b905090565b6000610e946008612a0e565b6001600160d01b0316905090565b610eaa612646565b610eb261267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f0257600080fd5b505af1158015610f16573d6000803e3d6000fd5b50505050610f2d610f256126a4565b823443612a55565b610f356129f3565b50565b610f40612646565b610f4861267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f9857600080fd5b505af1158015610fac573d6000803e3d6000fd5b505050506000601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102991906143f6565b9050600061103860018361436d565b831061104e5761104960018361436d565b611050565b825b905061105c8482612fbc565b5050610e736129f3565b60008061107161309c565b60009384526020525050604090206001015490565b61108e612646565b61109661267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b5050505060005b815181101561113c576111346111156126a4565b8383815181106111275761112761440f565b60200260200101516126ae565b600101611101565b50610f356129f3565b61114d612646565b61115561267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050600083815260186020526040902090506111d46126a4565b81546001600160a01b039081169116146112015760405163335e79fb60e21b815260040160405180910390fd5b600581015460009060ff16151581036113935760008260080154836002015461122a919061436d565b6002840154600885015560048401549091506000036112545761125461124e6126a4565b866126ae565b601d5460405163117511c960e01b81526000916001600160a01b03169063117511c9906112879030908690600401614380565b6020604051808303816000875af11580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca91906143ae565b9050806112ea576040516312171d8360e31b815260040160405180910390fd5b6021548454604051631ba724c760e21b81526001600160a01b0392831692636e9c931c928692611323928b9216906000906004016143c9565b6000604051808303818588803b15801561133c57600080fd5b505af1158015611350573d6000803e3d6000fd5b5050505050856000805160206148c483398151915283876040516113759291906143e8565b60405180910390a250505060058101805460ff191660019081179091555b6000611423856001601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141291906143f6565b61141c919061436d565b60016130c0565b9050801561155a57601c5460405163117511c960e01b81526000916001600160a01b03169063117511c99061145e9030908690600401614380565b6020604051808303816000875af115801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a191906143ae565b9050806114c1576040516312171d8360e31b815260040160405180910390fd5b6021548454604051631ba724c760e21b81526001600160a01b0392831692636e9c931c9286926114fa928b9216906000906004016143c9565b6000604051808303818588803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b5050505050856000805160206148a4833981519152838760405161154c9291906143e8565b60405180910390a260019250505b81611578576040516312d37ee560e31b815260040160405180910390fd5b505050610e736129f3565b61158c82611066565b6115958161263c565b61159f838361311d565b50505050565b6115ad6126a4565b6001600160a01b0316816001600160a01b0316146115de5760405163334bd91960e11b815260040160405180910390fd5b6115e882826131c6565b505050565b6000805160206149048339815191526116058161263c565b610f3561325c565b6000610e946009612a0e565b600080601f60009054906101000a90046001600160a01b03166001600160a01b031663d7033ca06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561166f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169391906143f6565b90506000816116a2868661436d565b6116ac9190614425565b601f549091506001600160a01b031663c6b61e4c6116cc6001600361436d565b6040518263ffffffff1660e01b81526004016116ea91815260200190565b600060405180830381865afa158015611707573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261172f9190810190614447565b6020015185116117d457600182601f60009054906101000a90046001600160a01b03166001600160a01b031663572d356e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b391906143f6565b6117bd9190614425565b6117c7919061436d565b6117d19082614538565b90505b601b5460405163adf8252d60e01b815260048101839052612710916001600160a01b03169063adf8252d90602401602060405180830381865afa15801561181f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184391906143f6565b61184d908861454b565b6118579190614425565b925050505b9392505050565b61186b6132b9565b6118748261335e565b610e738282613369565b6000611888613426565b506000805160206148e483398151915290565b60006118a5611988565b6001600160a01b0316826001600160a01b0316149050919050565b6000806118cb61346f565b5460ff1692915050565b6000610c08601483613493565b6001600160a01b038216600090815260166020526040812061185c9083613493565b6001600160a01b038216600090815260166020526040812061185c9060030183613493565b6000805160206149048339815191526119418161263c565b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152601660205260409020606090610c089061349f565b6000546001600160a01b031690565b60006119a28161263c565b50601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206149048339815191526119dd8161263c565b610f356134ac565b6000610c08826001601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6491906143f6565b611a6e919061436d565b60006130c0565b600080611a8061309c565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b6001600160a01b0381166000908152601660205260409020606090610c089060030161349f565b6000611adc6134f4565b805490915060ff600160401b82041615906001600160401b0316600081158015611b035750825b90506000826001600160401b03166001148015611b1f5750303b155b905081158015611b2d575080155b15611b4b5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315611b7457845460ff60401b1916600160401b1785555b611b7c613518565b611b84613518565b611b8c613520565b611b94613530565b611b9f60008761311d565b508315611be657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b611bf6612646565b611bfe61267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611c4e57600080fd5b505af1158015611c62573d6000803e3d6000fd5b50505060008381526018602052604090209050611c7d6126a4565b81546001600160a01b03908116911614611caa5760405163335e79fb60e21b815260040160405180910390fd5b6000611d05846001601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ee573d6000803e3d6000fd5b905080600003611d28576040516312d37ee560e31b815260040160405180910390fd5b601c5460405163117511c960e01b81526000916001600160a01b03169063117511c990611d5b9030908690600401614380565b6020604051808303816000875af1158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e91906143ae565b905080611dbe576040516312171d8360e31b815260040160405180910390fd5b6021548354604051631ba724c760e21b81526001600160a01b0392831692636e9c931c928692611df7928a9216906000906004016143c9565b6000604051808303818588803b158015611e1057600080fd5b505af1158015611e24573d6000803e3d6000fd5b5050505050846000805160206148a48339815191528386604051610e609291906143e8565b611e51612646565b611e5961267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b50505050611ecd81833443612a55565b610e736129f3565b611ede82611066565b611ee78161263c565b61159f83836131c6565b611f446040518061010001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b5060008181526018602090815260409182902082516101008101845293845280546001600160a01b0316918401919091526001810154918301919091526002810154606083015260038101546080830152600481015460a0830152600581015460ff16151560c08301526006015460e082015290565b600080516020614904833981519152611fd28161263c565b601e60009054906101000a90046001600160a01b03166001600160a01b0316638e991ff36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204991906143f6565b82111561206957604051633494a40d60e21b815260040160405180910390fd5b60038290556040518281527f8448c02797b448f4946bc25b3bf925e5556d1df822c944da701c54bab8a3162f906020015b60405180910390a15050565b6000805160206149048339815191526120be8161263c565b50601f80546001600160a01b0319166001600160a01b0392909216919091179055565b6120e9612646565b6120f161267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561214157600080fd5b505af1158015612155573d6000803e3d6000fd5b5050505060005b815181101561113c5761220a82828151811061217a5761217a61440f565b60200260200101516001601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fb91906143f6565b612205919061436d565b612fbc565b60010161215c565b61221a612646565b61222261267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561227257600080fd5b505af1158015612286573d6000803e3d6000fd5b5050505060005b815181101561113c576122c06122a16126a4565b8383815181106122b3576122b361440f565b6020026020010151613540565b60010161228d565b6000805160206149048339815191526122e08161263c565b6122eb600883613606565b50506040518281527f5f77bf3bb8edc470b5034e85a2d7123e6578eec3b9705c24d40d2e984d4f2a769060200161209a565b6001600160a01b0381166000908152601660205260408120610c0890612a04565b6001600160a01b0381166000908152601660205260408120610c0890600301612a04565b61236a612646565b61237261267c565b60405163d39a460360e01b815260040160405180910390fd5b6000805160206149048339815191526123a38161263c565b6123ae600983613606565b50506040518281527f4a675b4074075265c6da90abb559f75ec801d6e403d0dd6dde4bb38631929ede9060200161209a565b600082815260186020526040808220601f5491516331ad879360e21b815260048101859052909183916001600160a01b039091169063c6b61e4c90602401600060405180830381865afa15801561243b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124639190810190614447565b601f5460018401546040516359d3dced60e11b81529293506000926001600160a01b039092169163b3a7b9da9161249f918991906004016143e8565b60e060405180830381865afa1580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e09190614562565b90508415806124f157506080810151155b80612503575081602001518360030154115b80612524575060008360040154118015612524575082600401548260200151115b156125355760009350505050610c08565b600061254e846002015485600301548560200151611619565b90508160800151818360c00151612565919061454b565b61256f9190614425565b979650505050505050565b6000805160206149048339815191526125928161263c565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006125c08161263c565b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206149048339815191526125fb8161263c565b50602055565b6000805160206149048339815191526126198161263c565b50602180546001600160a01b0319166001600160a01b0392909216919091179055565b610f35813361361f565b600061265061364a565b80549091506001190161267657604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6126846118c0565b156126a25760405163d93c066560e01b815260040160405180910390fd5b565b6000610e8361366e565b600081815260186020526040902080546001600160a01b038481169116146126e95760405163335e79fb60e21b815260040160405180910390fd5b60048101541561270c57604051638ccbf9a560e01b815260040160405180910390fd5b6001600160a01b03831660009081526016602090815260408083206002808601546001870154865290820190935290832080549193909161274e90849061436d565b9091555050600282015460058201805460009061276c90849061436d565b909155505043600480840191909155601f546040805163916e1c5760e01b815290516000936001600160a01b039093169263916e1c57928082019260209290918290030181865afa1580156127c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e991906143f6565b601f546040516331ad879360e21b8152600481018390529192506000916001600160a01b039091169063c6b61e4c90602401600060405180830381865afa158015612838573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128609190810190614447565b905060038210158015612877575080516003850154115b1561291557601b5460018501546002860154600387015460208501516001600160a01b039094169363610b701093879390926128b292611619565b88600201546128c1919061436d565b60006040518563ffffffff1660e01b81526004016128e294939291906145ea565b600060405180830381600087803b1580156128fc57600080fd5b505af1158015612910573d6000803e3d6000fd5b505050505b60405185907fc46bc112bb28b616434d6e89582a82bdc7cf9ef52a0b1228d20f5e5ccca7ec4690600090a2601e54600185015460028601546040516307f4823f60e31b81526001600160a01b0390931692633fa411f89261297a9290916004016143e8565b600060405180830381600087803b15801561299457600080fd5b505af11580156129a8573d6000803e3d6000fd5b505050506129b4610e88565b6000036129c4576129c4856136c0565b60018401546000908152600e6020526040902060028501546129e991600c01906137dc565b5050505050505050565b60006129fd61364a565b6001905550565b6000610c08825490565b80546000908015612a4c57612a3683612a2860018461436d565b600091825260209091200190565b54600160301b90046001600160d01b031661185c565b60009392505050565b602054431115612a78576040516370af45df60e11b815260040160405180910390fd5b6001600160a01b038416612a9f5760405163e6c4247b60e01b815260040160405180910390fd5b600354821015612ac257604051630103be3b60e21b815260040160405180910390fd5b601e5460405163ea83e47b60e01b8152600481018590526000916001600160a01b03169063ea83e47b90602401600060405180830381865afa158015612b0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b34919081019061466e565b905060008161014001516004811115612b4f57612b4f6147de565b1480612b71575060048161014001516004811115612b6f57612b6f6147de565b145b15612b8f57604051636e1ed6c560e11b815260040160405180910390fd5b601f546040805163916e1c5760e01b815290516000926001600160a01b03169163916e1c579160048083019260209291908290030181865afa158015612bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfd91906143f6565b9050600060186000601760008154612c14906147f4565b918290555081526020810191909152604001600020600281018690556003810185905580546001600160a01b0319166001600160a01b03891617815560018082018890559091508211612c68576000612c73565b612c7360018361436d565b60068201556001600160a01b0387166000908152601660205260409020612c9a81886137ff565b50600087815260028201602052604081208054889290612cbb908490614538565b9091555050601754612cd19060038301906137ff565b5085816005016000828254612ce69190614538565b90915550612cf7905060148961380b565b50601f546040516331ad879360e21b8152600481018590526000916001600160a01b03169063c6b61e4c90602401600060405180830381865afa158015612d42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d6a9190810190614447565b80519091508610801590612d7f575060038410155b15612e7557601b54601f546040516331ad879360e21b8152600481018790526001600160a01b039283169263610b70109288928d92612e17928e928e929091169063c6b61e4c90602401600060405180830381865afa158015612de6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e0e9190810190614447565b60200151611619565b612e21908c61436d565b60016040518563ffffffff1660e01b8152600401612e4294939291906145ea565b600060405180830381600087803b158015612e5c57600080fd5b505af1158015612e70573d6000803e3d6000fd5b505050505b601d546040516000916001600160a01b03169034908381818185875af1925050503d8060008114612ec2576040519150601f19603f3d011682016040523d82523d6000602084013e612ec7565b606091505b5050905080612ee9576040516312171d8360e31b815260040160405180910390fd5b888a6001600160a01b03167ff234bd1a05f5a6f0b6af3f0c8bacad613635f0022e2ec2162717ef21a1591d6a6017548b604051612f279291906143e8565b60405180910390a3601e546040516302634bcf60e21b81526001600160a01b039091169063098d2f3c90612f61908c908c906004016143e8565b600060405180830381600087803b158015612f7b57600080fd5b505af1158015612f8f573d6000803e3d6000fd5b50505060008a8152600e60205260409020612fae9150600b01896137dc565b505050505050505050505050565b6000612fca838360016130c0565b905080600003612fed576040516312d37ee560e31b815260040160405180910390fd5b600083815260186020526040808220601c548154925163117511c960e01b81529193926001600160a01b039182169263117511c9926130329216908790600401614380565b6020604051808303816000875af1158015613051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307591906143ae565b905080613095576040516312171d8360e31b815260040160405180910390fd5b5050505050565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b60008381526018602052604081206006810154829081906130e2906001614538565b90505b858111613113576130f7878287613820565b6131019083614538565b915061310c816147f4565b90506130e5565b5095945050505050565b60008061312861309c565b90506131348484611a75565b6131b5576000848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561316b6126a4565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610c08565b6000915050610c08565b5092915050565b6000806131d161309c565b90506131dd8484611a75565b156131b5576000848152602082815260408083206001600160a01b03871684529091529020805460ff191690556132126126a4565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050610c08565b613264613ae1565b600061326e61346f565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6132a16126a4565b6040516132ae9190614015565b60405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061334057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166133346000805160206148e4833981519152546001600160a01b031690565b6001600160a01b031614155b156126a25760405163703e46dd60e11b815260040160405180910390fd5b6000610e738161263c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156133c3575060408051601f3d908101601f191682019092526133c0918101906143f6565b60015b6133eb5781604051634c9c8ce360e01b81526004016133e29190614015565b60405180910390fd5b6000805160206148e4833981519152811461341c57604051632a87526960e21b8152600481018290526024016133e2565b6115e88383613b06565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146126a25760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b600061185c8383613b5c565b6060600061185c83613b86565b6134b461267c565b60006134be61346f565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586132a16126a4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6126a2613be2565b613528613be2565b6126a2613c07565b613538613be2565b6126a2613c0f565b600081815260186020526040902080546001600160a01b0384811691161461357b5760405163335e79fb60e21b815260040160405180910390fd5b600581015460ff16156135a15760405163190507cd60e21b815260040160405180910390fd5b80600401546000036135c6576040516372728c7960e11b815260040160405180910390fd5b436135cf610e88565b82600401546135de9190614538565b11156135fd57604051630fae9a4560e41b815260040160405180910390fd5b6115e8826136c0565b600080613614844385613c2c565b915091509250929050565b6136298282611a75565b610e7357808260405163e2517d3f60e01b81526004016133e2929190614380565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b600036601461367c3361189b565b80156136885750808210155b156136b85760003661369a838561436d565b6136a592829061480d565b6136ae91614837565b60601c9250505090565b339250505090565b600081815260186020526040812060058101805460ff19166001179055600881015460028201549192916136f4919061436d565b11156137ad57601d548154600883015460028401546000936001600160a01b039081169363117511c99391169161372b919061436d565b6040518363ffffffff1660e01b8152600401613748929190614380565b6020604051808303816000875af1158015613767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378b91906143ae565b9050806137ab576040516312171d8360e31b815260040160405180910390fd5b505b60405182907fa78b9f12a7da0df7ced737c5f83d0c05723bb5f43aab37e233b862710414847290600090a25050565b60008061361443846137ed87612a0e565b6137f79190614867565b869190613c2c565b600061185c8383613c47565b600061185c836001600160a01b038416613c47565b600083815260186020526040812060068101548290613840906001614538565b9050600061384c61160d565b601f546040516331ad879360e21b8152600481018990529192506000916001600160a01b039091169063c6b61e4c90602401600060405180830381865afa15801561389b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138c39190810190614447565b601f5460018601546040516359d3dced60e11b81529293506000926001600160a01b039092169163b3a7b9da916138ff918c91906004016143e8565b60e060405180830381865afa15801561391c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139409190614562565b905087158061395157506080810151155b80613963575081602001518560030154115b80613984575060008560040154118015613984575084600401548260200151115b156139975760009550505050505061185c565b60006139b0866002015487600301548560200151611619565b905060008260800151828460c001516139c9919061454b565b6139d39190614425565b905060008460200151436139e7919061436d565b9050600186158015906139f957508682105b15613a1a5786613a09838561454b565b613a139190614425565b9250600090505b60008c815260078a0160205260409020548311613a43576000995050505050505050505061185c565b60008c815260078a016020526040812054613a5e908561436d565b90508b15613ad05760008d815260078b01602052604090819020859055518d908f907f84f18304332c1d0bc90eba2ce6fc3556bcfabe9ccc37f7d9f66225b293f903bf90613aba90889087909182521515602082015260400190565b60405180910390a38115613ad05760068a018990555b9d9c50505050505050505050505050565b613ae96118c0565b6126a257604051638dfc202b60e01b815260040160405180910390fd5b613b0f82613c96565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115613b54576115e88282613cf2565b610e73613d68565b6000826000018281548110613b7357613b7361440f565b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015613bd657602002820191906000526020600020905b815481526020019060010190808311613bc2575b50505050509050919050565b613bea613d87565b6126a257604051631afcd79f60e31b815260040160405180910390fd5b6129f3613be2565b613c17613be2565b6000613c2161346f565b805460ff1916905550565b600080613c3a858585613da1565b915091505b935093915050565b6000818152600183016020526040812054613c8e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c08565b506000610c08565b806001600160a01b03163b600003613cc35780604051634c9c8ce360e01b81526004016133e29190614015565b6000805160206148e483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051613d0f9190614887565b600060405180830381855af49150503d8060008114613d4a576040519150601f19603f3d011682016040523d82523d6000602084013e613d4f565b606091505b5091509150613d5f858383613f1b565b95945050505050565b34156126a25760405163b398979f60e01b815260040160405180910390fd5b6000613d916134f4565b54600160401b900460ff16919050565b825460009081908015613ec0576000613dbf87612a2860018561436d565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b031660208401529192509087161015613e1357604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603613e5f5784613e3688612a2860018661436d565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055613eb0565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b602001519250839150613c3f9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b029190931617920191909155905081613c3f565b606082613f3057613f2b82613f6e565b61185c565b8151158015613f4757506001600160a01b0384163b155b15613f675783604051639996b31560e01b81526004016133e29190614015565b508061185c565b805115613f7e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114610f3557600080fd5b600060208284031215613fbe57600080fd5b813561185c81613f97565b600060208284031215613fdb57600080fd5b81356001600160e01b03198116811461185c57600080fd5b6000806040838503121561400657600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b60006020828403121561403b57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561407a5761407a614042565b60405290565b6040516101c081016001600160401b038111828210171561407a5761407a614042565b604051601f8201601f191681016001600160401b03811182821017156140cb576140cb614042565b604052919050565b60006001600160401b038211156140ec576140ec614042565b5060051b60200190565b6000602080838503121561410957600080fd5b82356001600160401b0381111561411f57600080fd5b8301601f8101851361413057600080fd5b803561414361413e826140d3565b6140a3565b81815260059190911b8201830190838101908783111561416257600080fd5b928401925b8284101561256f57833582529284019290840190614167565b6000806040838503121561419357600080fd5b8235915060208301356141a581613f97565b809150509250929050565b6000806000606084860312156141c557600080fd5b505081359360208301359350604090920135919050565b60006001600160401b038211156141f5576141f5614042565b50601f01601f191660200190565b6000806040838503121561421657600080fd5b823561422181613f97565b915060208301356001600160401b0381111561423c57600080fd5b8301601f8101851361424d57600080fd5b803561425b61413e826141dc565b81815286602083850101111561427057600080fd5b816020840160208301376000602083830101528093505050509250929050565b600080604083850312156142a357600080fd5b82356142ae81613f97565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156142f4578351835292840192918401916001016142d8565b50909695505050505050565b60005b8381101561431b578181015183820152602001614303565b50506000910152565b6020815260008251806020840152614343816040850160208701614300565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c0857610c08614357565b6001600160a01b03929092168252602082015260400190565b805180151581146143a957600080fd5b919050565b6000602082840312156143c057600080fd5b61185c82614399565b9283526001600160a01b03919091166020830152604082015260600190565b918252602082015260400190565b60006020828403121561440857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008261444257634e487b7160e01b600052601260045260246000fd5b500490565b6000602080838503121561445a57600080fd5b82516001600160401b038082111561447157600080fd5b9084019060a0828703121561448557600080fd5b61448d614058565b825181528383015184820152604083015160408201526144af60608401614399565b60608201526080830151828111156144c657600080fd5b80840193505086601f8401126144db57600080fd5b825191506144eb61413e836140d3565b82815260059290921b8301840191848101908884111561450a57600080fd5b938501935b838510156145285784518252938501939085019061450f565b6080830152509695505050505050565b80820180821115610c0857610c08614357565b8082028115828204841417610c0857610c08614357565b600060e0828403121561457457600080fd5b60405160e081016001600160401b038111828210171561459657614596614042565b604052825181526145a960208401614399565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b938452602084019290925260408301521515606082015260800190565b80516143a981613f97565b600082601f83011261462357600080fd5b815161463161413e826141dc565b81815284602083860101111561464657600080fd5b614657826020830160208701614300565b949350505050565b8051600581106143a957600080fd5b60006020828403121561468057600080fd5b81516001600160401b038082111561469757600080fd5b908301906101c082860312156146ac57600080fd5b6146b4614080565b825181526146c460208401614607565b60208201526146d560408401614607565b60408201526146e660608401614607565b60608201526080830151608082015260a083015160a082015260c08301518281111561471157600080fd5b61471d87828601614612565b60c08301525060e08301518281111561473557600080fd5b61474187828601614612565b60e083015250610100808401518381111561475b57600080fd5b61476788828701614612565b828401525050610120808401518381111561478157600080fd5b61478d88828701614612565b82840152505061014091506147a382840161465f565b91810191909152610160828101519082015261018080830151908201526101a0906147cf828401614399565b91810191909152949350505050565b634e487b7160e01b600052602160045260246000fd5b60006001820161480657614806614357565b5060010190565b6000808585111561481d57600080fd5b8386111561482a57600080fd5b5050820193919092039150565b6001600160601b0319813581811691601485101561485f5780818660140360031b1b83161692505b505092915050565b6001600160d01b038181168382160190808211156131bf576131bf614357565b60008251614899818460208701614300565b919091019291505056fe2d7d3382db8acb6440c62abdeb6a91b1136fedaebbf7e52ede418d921778b0d29ad543c59d5f19d7487d967f2c38da7421c0e9386626ecfc23d22e933bbcf378360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a26469706673582212209df26de6308624b030a5202c903be51f2b9408117092403ca804f30c04a4a08b64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106102ed5760003560e01c806301e22a69146102f957806301ffc9a71461031b57806307c4ec0f146103505780630fc779ae14610370578063151db1b9146103935780631bb2f452146103a85780631bf6ddae146103d55780631e6760d3146103e857806320930fa414610408578063248a9ca31461042857806324918d791461044857806325f6e987146104685780632f2ff15d1461048857806336568abe146104a85780633f4ba83a146104c857806346582583146104dd5780634c85c8d9146104f25780634f1ef2861461051257806352d1902d1461052557806354fd4d501461053a5780635690473e1461054e578063572b6c05146105955780635c975abb146105b55780635f5e4de7146105ca578063633e7e54146105ea57806363b8a87a1461060a57806364aad42314610620578063659ea4851461064057806368bd646a146106605780637217d22d146106805780637997d1b6146106ad5780637d40712c146106cd5780637da0a877146107095780637eb9b0c31461071e578063803d41d91461073e5780638456cb59146107775780638c31cd3e1461078c57806391d14854146107ac57806392b95db9146107cc57806397f2746c146107ec5780639889a3031461080c578063a217fddf1461082c578063ad3cb1cc14610841578063c4d66de81461087f578063c6ce301a1461089f578063d4e90b97146108bf578063d547741f146108d2578063d5a44f86146108f2578063d8060cd514610979578063db589c5b14610999578063dd8c017c146109b9578063e1d648d1146109d9578063e5331f17146109f9578063e6fe27c414610a0f578063e7ebaa6f14610a2f578063e837154514610a4f578063e983d10f14610a6f578063e98fa42b14610a8f578063ec5903f414610aaf578063ed2def1e14610ac4578063f188768414610ae4578063f874225414610afa578063f90b031114610b1c578063f9823b1314610b3c578063fb3b894614610b5c578063ff47cfb314610b7c57600080fd5b366102f457005b600080fd5b34801561030557600080fd5b50610319610314366004613fac565b610b9c565b005b34801561032757600080fd5b5061033b610336366004613fc9565b610bd7565b60405190151581526020015b60405180910390f35b34801561035c57600080fd5b5061031961036b366004613ff3565b610c0e565b34801561037c57600080fd5b50610385610e77565b604051908152602001610347565b34801561039f57600080fd5b50610385610e88565b3480156103b457600080fd5b50601e546103c8906001600160a01b031681565b6040516103479190614015565b6103196103e3366004614029565b610ea2565b3480156103f457600080fd5b50610319610403366004613ff3565b610f38565b34801561041457600080fd5b50601f546103c8906001600160a01b031681565b34801561043457600080fd5b50610385610443366004614029565b611066565b34801561045457600080fd5b506103196104633660046140f6565b611086565b34801561047457600080fd5b50610319610483366004613ff3565b611145565b34801561049457600080fd5b506103196104a3366004614180565b611583565b3480156104b457600080fd5b506103196104c3366004614180565b6115a5565b3480156104d457600080fd5b506103196115ed565b3480156104e957600080fd5b5061038561160d565b3480156104fe57600080fd5b5061038561050d3660046141b0565b611619565b610319610520366004614203565b611863565b34801561053157600080fd5b5061038561187e565b34801561054657600080fd5b506004610385565b34801561055a57600080fd5b50610385610569366004614290565b6001600160a01b0391909116600090815260166020908152604080832093835260029093019052205490565b3480156105a157600080fd5b5061033b6105b0366004613fac565b61189b565b3480156105c157600080fd5b5061033b6118c0565b3480156105d657600080fd5b506103c86105e5366004614029565b6118d5565b3480156105f657600080fd5b50610385610605366004614290565b6118e2565b34801561061657600080fd5b5061038560205481565b34801561062c57600080fd5b5061038561063b366004614290565b611904565b34801561064c57600080fd5b5061031961065b366004613fac565b611929565b34801561066c57600080fd5b506021546103c8906001600160a01b031681565b34801561068c57600080fd5b506106a061069b366004613fac565b611964565b60405161034791906142bc565b3480156106b957600080fd5b50601d546103c8906001600160a01b031681565b3480156106d957600080fd5b506103856106e8366004613ff3565b60009182526018602090815260408084209284526007909201905290205490565b34801561071557600080fd5b506103c8611988565b34801561072a57600080fd5b50610319610739366004613fac565b611997565b34801561074a57600080fd5b50610385610759366004613fac565b6001600160a01b031660009081526016602052604090206005015490565b34801561078357600080fd5b506103196119c5565b34801561079857600080fd5b506103856107a7366004614029565b6119e5565b3480156107b857600080fd5b5061033b6107c7366004614180565b611a75565b3480156107d857600080fd5b506106a06107e7366004613fac565b611aab565b3480156107f857600080fd5b50601b546103c8906001600160a01b031681565b34801561081857600080fd5b50601c546103c8906001600160a01b031681565b34801561083857600080fd5b50610385600081565b34801561084d57600080fd5b50610872604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516103479190614324565b34801561088b57600080fd5b5061031961089a366004613fac565b611ad2565b3480156108ab57600080fd5b506103196108ba366004613ff3565b611bee565b6103196108cd366004614180565b611e49565b3480156108de57600080fd5b506103196108ed366004614180565b611ed5565b3480156108fe57600080fd5b5061091261090d366004614029565b611ef1565b6040516103479190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c08083015115159082015260e091820151918101919091526101000190565b34801561098557600080fd5b50610319610994366004614029565b611fba565b3480156109a557600080fd5b506103196109b4366004613fac565b6120a6565b3480156109c557600080fd5b506103196109d43660046140f6565b6120e1565b3480156109e557600080fd5b506103196109f43660046140f6565b612212565b348015610a0557600080fd5b5061038560175481565b348015610a1b57600080fd5b50610319610a2a366004614029565b6122c8565b348015610a3b57600080fd5b50610385610a4a366004613fac565b61231d565b348015610a5b57600080fd5b50610385610a6a366004613fac565b61233e565b348015610a7b57600080fd5b50610319610a8a3660046141b0565b612362565b348015610a9b57600080fd5b50610319610aaa366004614029565b61238b565b348015610abb57600080fd5b50610385600381565b348015610ad057600080fd5b50610385610adf366004613ff3565b6123e0565b348015610af057600080fd5b5061038560035481565b348015610b0657600080fd5b5061038560008051602061490483398151915281565b348015610b2857600080fd5b50610319610b37366004613fac565b61257a565b348015610b4857600080fd5b50610319610b57366004613fac565b6125b5565b348015610b6857600080fd5b50610319610b77366004614029565b6125e3565b348015610b8857600080fd5b50610319610b97366004613fac565b612601565b600080516020614904833981519152610bb48161263c565b50601e80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b1480610c0857506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c16612646565b610c1e61267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6e57600080fd5b505af1158015610c82573d6000803e3d6000fd5b50505060008381526018602052604090209050610c9d6126a4565b81546001600160a01b03908116911614610cca5760405163335e79fb60e21b815260040160405180910390fd5b600581015460ff1615610cf05760405163190507cd60e21b815260040160405180910390fd5b600081600801548260020154610d06919061436d565b600283015460088401556004830154909150600003610d3057610d30610d2a6126a4565b856126ae565b60058201805460ff19166001179055601d5460405163117511c960e01b81526000916001600160a01b03169063117511c990610d729030908690600401614380565b6020604051808303816000875af1158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db591906143ae565b905080610dd5576040516312171d8360e31b815260040160405180910390fd5b6021548354604051631ba724c760e21b81526001600160a01b0392831692636e9c931c928692610e0e928a9216906000906004016143c9565b6000604051808303818588803b158015610e2757600080fd5b505af1158015610e3b573d6000803e3d6000fd5b5050505050846000805160206148c48339815191528386604051610e609291906143e8565b60405180910390a2505050610e736129f3565b5050565b6000610e836014612a04565b905090565b6000610e946008612a0e565b6001600160d01b0316905090565b610eaa612646565b610eb261267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f0257600080fd5b505af1158015610f16573d6000803e3d6000fd5b50505050610f2d610f256126a4565b823443612a55565b610f356129f3565b50565b610f40612646565b610f4861267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f9857600080fd5b505af1158015610fac573d6000803e3d6000fd5b505050506000601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102991906143f6565b9050600061103860018361436d565b831061104e5761104960018361436d565b611050565b825b905061105c8482612fbc565b5050610e736129f3565b60008061107161309c565b60009384526020525050604090206001015490565b61108e612646565b61109661267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b5050505060005b815181101561113c576111346111156126a4565b8383815181106111275761112761440f565b60200260200101516126ae565b600101611101565b50610f356129f3565b61114d612646565b61115561267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050600083815260186020526040902090506111d46126a4565b81546001600160a01b039081169116146112015760405163335e79fb60e21b815260040160405180910390fd5b600581015460009060ff16151581036113935760008260080154836002015461122a919061436d565b6002840154600885015560048401549091506000036112545761125461124e6126a4565b866126ae565b601d5460405163117511c960e01b81526000916001600160a01b03169063117511c9906112879030908690600401614380565b6020604051808303816000875af11580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca91906143ae565b9050806112ea576040516312171d8360e31b815260040160405180910390fd5b6021548454604051631ba724c760e21b81526001600160a01b0392831692636e9c931c928692611323928b9216906000906004016143c9565b6000604051808303818588803b15801561133c57600080fd5b505af1158015611350573d6000803e3d6000fd5b5050505050856000805160206148c483398151915283876040516113759291906143e8565b60405180910390a250505060058101805460ff191660019081179091555b6000611423856001601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141291906143f6565b61141c919061436d565b60016130c0565b9050801561155a57601c5460405163117511c960e01b81526000916001600160a01b03169063117511c99061145e9030908690600401614380565b6020604051808303816000875af115801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a191906143ae565b9050806114c1576040516312171d8360e31b815260040160405180910390fd5b6021548454604051631ba724c760e21b81526001600160a01b0392831692636e9c931c9286926114fa928b9216906000906004016143c9565b6000604051808303818588803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b5050505050856000805160206148a4833981519152838760405161154c9291906143e8565b60405180910390a260019250505b81611578576040516312d37ee560e31b815260040160405180910390fd5b505050610e736129f3565b61158c82611066565b6115958161263c565b61159f838361311d565b50505050565b6115ad6126a4565b6001600160a01b0316816001600160a01b0316146115de5760405163334bd91960e11b815260040160405180910390fd5b6115e882826131c6565b505050565b6000805160206149048339815191526116058161263c565b610f3561325c565b6000610e946009612a0e565b600080601f60009054906101000a90046001600160a01b03166001600160a01b031663d7033ca06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561166f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169391906143f6565b90506000816116a2868661436d565b6116ac9190614425565b601f549091506001600160a01b031663c6b61e4c6116cc6001600361436d565b6040518263ffffffff1660e01b81526004016116ea91815260200190565b600060405180830381865afa158015611707573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261172f9190810190614447565b6020015185116117d457600182601f60009054906101000a90046001600160a01b03166001600160a01b031663572d356e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b391906143f6565b6117bd9190614425565b6117c7919061436d565b6117d19082614538565b90505b601b5460405163adf8252d60e01b815260048101839052612710916001600160a01b03169063adf8252d90602401602060405180830381865afa15801561181f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184391906143f6565b61184d908861454b565b6118579190614425565b925050505b9392505050565b61186b6132b9565b6118748261335e565b610e738282613369565b6000611888613426565b506000805160206148e483398151915290565b60006118a5611988565b6001600160a01b0316826001600160a01b0316149050919050565b6000806118cb61346f565b5460ff1692915050565b6000610c08601483613493565b6001600160a01b038216600090815260166020526040812061185c9083613493565b6001600160a01b038216600090815260166020526040812061185c9060030183613493565b6000805160206149048339815191526119418161263c565b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152601660205260409020606090610c089061349f565b6000546001600160a01b031690565b60006119a28161263c565b50601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206149048339815191526119dd8161263c565b610f356134ac565b6000610c08826001601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6491906143f6565b611a6e919061436d565b60006130c0565b600080611a8061309c565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b6001600160a01b0381166000908152601660205260409020606090610c089060030161349f565b6000611adc6134f4565b805490915060ff600160401b82041615906001600160401b0316600081158015611b035750825b90506000826001600160401b03166001148015611b1f5750303b155b905081158015611b2d575080155b15611b4b5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315611b7457845460ff60401b1916600160401b1785555b611b7c613518565b611b84613518565b611b8c613520565b611b94613530565b611b9f60008761311d565b508315611be657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b611bf6612646565b611bfe61267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611c4e57600080fd5b505af1158015611c62573d6000803e3d6000fd5b50505060008381526018602052604090209050611c7d6126a4565b81546001600160a01b03908116911614611caa5760405163335e79fb60e21b815260040160405180910390fd5b6000611d05846001601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ee573d6000803e3d6000fd5b905080600003611d28576040516312d37ee560e31b815260040160405180910390fd5b601c5460405163117511c960e01b81526000916001600160a01b03169063117511c990611d5b9030908690600401614380565b6020604051808303816000875af1158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e91906143ae565b905080611dbe576040516312171d8360e31b815260040160405180910390fd5b6021548354604051631ba724c760e21b81526001600160a01b0392831692636e9c931c928692611df7928a9216906000906004016143c9565b6000604051808303818588803b158015611e1057600080fd5b505af1158015611e24573d6000803e3d6000fd5b5050505050846000805160206148a48339815191528386604051610e609291906143e8565b611e51612646565b611e5961267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b50505050611ecd81833443612a55565b610e736129f3565b611ede82611066565b611ee78161263c565b61159f83836131c6565b611f446040518061010001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b5060008181526018602090815260409182902082516101008101845293845280546001600160a01b0316918401919091526001810154918301919091526002810154606083015260038101546080830152600481015460a0830152600581015460ff16151560c08301526006015460e082015290565b600080516020614904833981519152611fd28161263c565b601e60009054906101000a90046001600160a01b03166001600160a01b0316638e991ff36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204991906143f6565b82111561206957604051633494a40d60e21b815260040160405180910390fd5b60038290556040518281527f8448c02797b448f4946bc25b3bf925e5556d1df822c944da701c54bab8a3162f906020015b60405180910390a15050565b6000805160206149048339815191526120be8161263c565b50601f80546001600160a01b0319166001600160a01b0392909216919091179055565b6120e9612646565b6120f161267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561214157600080fd5b505af1158015612155573d6000803e3d6000fd5b5050505060005b815181101561113c5761220a82828151811061217a5761217a61440f565b60200260200101516001601f60009054906101000a90046001600160a01b03166001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fb91906143f6565b612205919061436d565b612fbc565b60010161215c565b61221a612646565b61222261267c565b601f60009054906101000a90046001600160a01b03166001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561227257600080fd5b505af1158015612286573d6000803e3d6000fd5b5050505060005b815181101561113c576122c06122a16126a4565b8383815181106122b3576122b361440f565b6020026020010151613540565b60010161228d565b6000805160206149048339815191526122e08161263c565b6122eb600883613606565b50506040518281527f5f77bf3bb8edc470b5034e85a2d7123e6578eec3b9705c24d40d2e984d4f2a769060200161209a565b6001600160a01b0381166000908152601660205260408120610c0890612a04565b6001600160a01b0381166000908152601660205260408120610c0890600301612a04565b61236a612646565b61237261267c565b60405163d39a460360e01b815260040160405180910390fd5b6000805160206149048339815191526123a38161263c565b6123ae600983613606565b50506040518281527f4a675b4074075265c6da90abb559f75ec801d6e403d0dd6dde4bb38631929ede9060200161209a565b600082815260186020526040808220601f5491516331ad879360e21b815260048101859052909183916001600160a01b039091169063c6b61e4c90602401600060405180830381865afa15801561243b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124639190810190614447565b601f5460018401546040516359d3dced60e11b81529293506000926001600160a01b039092169163b3a7b9da9161249f918991906004016143e8565b60e060405180830381865afa1580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e09190614562565b90508415806124f157506080810151155b80612503575081602001518360030154115b80612524575060008360040154118015612524575082600401548260200151115b156125355760009350505050610c08565b600061254e846002015485600301548560200151611619565b90508160800151818360c00151612565919061454b565b61256f9190614425565b979650505050505050565b6000805160206149048339815191526125928161263c565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006125c08161263c565b50601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206149048339815191526125fb8161263c565b50602055565b6000805160206149048339815191526126198161263c565b50602180546001600160a01b0319166001600160a01b0392909216919091179055565b610f35813361361f565b600061265061364a565b80549091506001190161267657604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6126846118c0565b156126a25760405163d93c066560e01b815260040160405180910390fd5b565b6000610e8361366e565b600081815260186020526040902080546001600160a01b038481169116146126e95760405163335e79fb60e21b815260040160405180910390fd5b60048101541561270c57604051638ccbf9a560e01b815260040160405180910390fd5b6001600160a01b03831660009081526016602090815260408083206002808601546001870154865290820190935290832080549193909161274e90849061436d565b9091555050600282015460058201805460009061276c90849061436d565b909155505043600480840191909155601f546040805163916e1c5760e01b815290516000936001600160a01b039093169263916e1c57928082019260209290918290030181865afa1580156127c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e991906143f6565b601f546040516331ad879360e21b8152600481018390529192506000916001600160a01b039091169063c6b61e4c90602401600060405180830381865afa158015612838573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128609190810190614447565b905060038210158015612877575080516003850154115b1561291557601b5460018501546002860154600387015460208501516001600160a01b039094169363610b701093879390926128b292611619565b88600201546128c1919061436d565b60006040518563ffffffff1660e01b81526004016128e294939291906145ea565b600060405180830381600087803b1580156128fc57600080fd5b505af1158015612910573d6000803e3d6000fd5b505050505b60405185907fc46bc112bb28b616434d6e89582a82bdc7cf9ef52a0b1228d20f5e5ccca7ec4690600090a2601e54600185015460028601546040516307f4823f60e31b81526001600160a01b0390931692633fa411f89261297a9290916004016143e8565b600060405180830381600087803b15801561299457600080fd5b505af11580156129a8573d6000803e3d6000fd5b505050506129b4610e88565b6000036129c4576129c4856136c0565b60018401546000908152600e6020526040902060028501546129e991600c01906137dc565b5050505050505050565b60006129fd61364a565b6001905550565b6000610c08825490565b80546000908015612a4c57612a3683612a2860018461436d565b600091825260209091200190565b54600160301b90046001600160d01b031661185c565b60009392505050565b602054431115612a78576040516370af45df60e11b815260040160405180910390fd5b6001600160a01b038416612a9f5760405163e6c4247b60e01b815260040160405180910390fd5b600354821015612ac257604051630103be3b60e21b815260040160405180910390fd5b601e5460405163ea83e47b60e01b8152600481018590526000916001600160a01b03169063ea83e47b90602401600060405180830381865afa158015612b0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b34919081019061466e565b905060008161014001516004811115612b4f57612b4f6147de565b1480612b71575060048161014001516004811115612b6f57612b6f6147de565b145b15612b8f57604051636e1ed6c560e11b815260040160405180910390fd5b601f546040805163916e1c5760e01b815290516000926001600160a01b03169163916e1c579160048083019260209291908290030181865afa158015612bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfd91906143f6565b9050600060186000601760008154612c14906147f4565b918290555081526020810191909152604001600020600281018690556003810185905580546001600160a01b0319166001600160a01b03891617815560018082018890559091508211612c68576000612c73565b612c7360018361436d565b60068201556001600160a01b0387166000908152601660205260409020612c9a81886137ff565b50600087815260028201602052604081208054889290612cbb908490614538565b9091555050601754612cd19060038301906137ff565b5085816005016000828254612ce69190614538565b90915550612cf7905060148961380b565b50601f546040516331ad879360e21b8152600481018590526000916001600160a01b03169063c6b61e4c90602401600060405180830381865afa158015612d42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d6a9190810190614447565b80519091508610801590612d7f575060038410155b15612e7557601b54601f546040516331ad879360e21b8152600481018790526001600160a01b039283169263610b70109288928d92612e17928e928e929091169063c6b61e4c90602401600060405180830381865afa158015612de6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e0e9190810190614447565b60200151611619565b612e21908c61436d565b60016040518563ffffffff1660e01b8152600401612e4294939291906145ea565b600060405180830381600087803b158015612e5c57600080fd5b505af1158015612e70573d6000803e3d6000fd5b505050505b601d546040516000916001600160a01b03169034908381818185875af1925050503d8060008114612ec2576040519150601f19603f3d011682016040523d82523d6000602084013e612ec7565b606091505b5050905080612ee9576040516312171d8360e31b815260040160405180910390fd5b888a6001600160a01b03167ff234bd1a05f5a6f0b6af3f0c8bacad613635f0022e2ec2162717ef21a1591d6a6017548b604051612f279291906143e8565b60405180910390a3601e546040516302634bcf60e21b81526001600160a01b039091169063098d2f3c90612f61908c908c906004016143e8565b600060405180830381600087803b158015612f7b57600080fd5b505af1158015612f8f573d6000803e3d6000fd5b50505060008a8152600e60205260409020612fae9150600b01896137dc565b505050505050505050505050565b6000612fca838360016130c0565b905080600003612fed576040516312d37ee560e31b815260040160405180910390fd5b600083815260186020526040808220601c548154925163117511c960e01b81529193926001600160a01b039182169263117511c9926130329216908790600401614380565b6020604051808303816000875af1158015613051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307591906143ae565b905080613095576040516312171d8360e31b815260040160405180910390fd5b5050505050565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b60008381526018602052604081206006810154829081906130e2906001614538565b90505b858111613113576130f7878287613820565b6131019083614538565b915061310c816147f4565b90506130e5565b5095945050505050565b60008061312861309c565b90506131348484611a75565b6131b5576000848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561316b6126a4565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610c08565b6000915050610c08565b5092915050565b6000806131d161309c565b90506131dd8484611a75565b156131b5576000848152602082815260408083206001600160a01b03871684529091529020805460ff191690556132126126a4565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050610c08565b613264613ae1565b600061326e61346f565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6132a16126a4565b6040516132ae9190614015565b60405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061334057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166133346000805160206148e4833981519152546001600160a01b031690565b6001600160a01b031614155b156126a25760405163703e46dd60e11b815260040160405180910390fd5b6000610e738161263c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156133c3575060408051601f3d908101601f191682019092526133c0918101906143f6565b60015b6133eb5781604051634c9c8ce360e01b81526004016133e29190614015565b60405180910390fd5b6000805160206148e4833981519152811461341c57604051632a87526960e21b8152600481018290526024016133e2565b6115e88383613b06565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146126a25760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b600061185c8383613b5c565b6060600061185c83613b86565b6134b461267c565b60006134be61346f565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586132a16126a4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6126a2613be2565b613528613be2565b6126a2613c07565b613538613be2565b6126a2613c0f565b600081815260186020526040902080546001600160a01b0384811691161461357b5760405163335e79fb60e21b815260040160405180910390fd5b600581015460ff16156135a15760405163190507cd60e21b815260040160405180910390fd5b80600401546000036135c6576040516372728c7960e11b815260040160405180910390fd5b436135cf610e88565b82600401546135de9190614538565b11156135fd57604051630fae9a4560e41b815260040160405180910390fd5b6115e8826136c0565b600080613614844385613c2c565b915091509250929050565b6136298282611a75565b610e7357808260405163e2517d3f60e01b81526004016133e2929190614380565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b600036601461367c3361189b565b80156136885750808210155b156136b85760003661369a838561436d565b6136a592829061480d565b6136ae91614837565b60601c9250505090565b339250505090565b600081815260186020526040812060058101805460ff19166001179055600881015460028201549192916136f4919061436d565b11156137ad57601d548154600883015460028401546000936001600160a01b039081169363117511c99391169161372b919061436d565b6040518363ffffffff1660e01b8152600401613748929190614380565b6020604051808303816000875af1158015613767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378b91906143ae565b9050806137ab576040516312171d8360e31b815260040160405180910390fd5b505b60405182907fa78b9f12a7da0df7ced737c5f83d0c05723bb5f43aab37e233b862710414847290600090a25050565b60008061361443846137ed87612a0e565b6137f79190614867565b869190613c2c565b600061185c8383613c47565b600061185c836001600160a01b038416613c47565b600083815260186020526040812060068101548290613840906001614538565b9050600061384c61160d565b601f546040516331ad879360e21b8152600481018990529192506000916001600160a01b039091169063c6b61e4c90602401600060405180830381865afa15801561389b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138c39190810190614447565b601f5460018601546040516359d3dced60e11b81529293506000926001600160a01b039092169163b3a7b9da916138ff918c91906004016143e8565b60e060405180830381865afa15801561391c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139409190614562565b905087158061395157506080810151155b80613963575081602001518560030154115b80613984575060008560040154118015613984575084600401548260200151115b156139975760009550505050505061185c565b60006139b0866002015487600301548560200151611619565b905060008260800151828460c001516139c9919061454b565b6139d39190614425565b905060008460200151436139e7919061436d565b9050600186158015906139f957508682105b15613a1a5786613a09838561454b565b613a139190614425565b9250600090505b60008c815260078a0160205260409020548311613a43576000995050505050505050505061185c565b60008c815260078a016020526040812054613a5e908561436d565b90508b15613ad05760008d815260078b01602052604090819020859055518d908f907f84f18304332c1d0bc90eba2ce6fc3556bcfabe9ccc37f7d9f66225b293f903bf90613aba90889087909182521515602082015260400190565b60405180910390a38115613ad05760068a018990555b9d9c50505050505050505050505050565b613ae96118c0565b6126a257604051638dfc202b60e01b815260040160405180910390fd5b613b0f82613c96565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115613b54576115e88282613cf2565b610e73613d68565b6000826000018281548110613b7357613b7361440f565b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015613bd657602002820191906000526020600020905b815481526020019060010190808311613bc2575b50505050509050919050565b613bea613d87565b6126a257604051631afcd79f60e31b815260040160405180910390fd5b6129f3613be2565b613c17613be2565b6000613c2161346f565b805460ff1916905550565b600080613c3a858585613da1565b915091505b935093915050565b6000818152600183016020526040812054613c8e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c08565b506000610c08565b806001600160a01b03163b600003613cc35780604051634c9c8ce360e01b81526004016133e29190614015565b6000805160206148e483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051613d0f9190614887565b600060405180830381855af49150503d8060008114613d4a576040519150601f19603f3d011682016040523d82523d6000602084013e613d4f565b606091505b5091509150613d5f858383613f1b565b95945050505050565b34156126a25760405163b398979f60e01b815260040160405180910390fd5b6000613d916134f4565b54600160401b900460ff16919050565b825460009081908015613ec0576000613dbf87612a2860018561436d565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b031660208401529192509087161015613e1357604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603613e5f5784613e3688612a2860018661436d565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055613eb0565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b602001519250839150613c3f9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b029190931617920191909155905081613c3f565b606082613f3057613f2b82613f6e565b61185c565b8151158015613f4757506001600160a01b0384163b155b15613f675783604051639996b31560e01b81526004016133e29190614015565b508061185c565b805115613f7e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114610f3557600080fd5b600060208284031215613fbe57600080fd5b813561185c81613f97565b600060208284031215613fdb57600080fd5b81356001600160e01b03198116811461185c57600080fd5b6000806040838503121561400657600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b60006020828403121561403b57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561407a5761407a614042565b60405290565b6040516101c081016001600160401b038111828210171561407a5761407a614042565b604051601f8201601f191681016001600160401b03811182821017156140cb576140cb614042565b604052919050565b60006001600160401b038211156140ec576140ec614042565b5060051b60200190565b6000602080838503121561410957600080fd5b82356001600160401b0381111561411f57600080fd5b8301601f8101851361413057600080fd5b803561414361413e826140d3565b6140a3565b81815260059190911b8201830190838101908783111561416257600080fd5b928401925b8284101561256f57833582529284019290840190614167565b6000806040838503121561419357600080fd5b8235915060208301356141a581613f97565b809150509250929050565b6000806000606084860312156141c557600080fd5b505081359360208301359350604090920135919050565b60006001600160401b038211156141f5576141f5614042565b50601f01601f191660200190565b6000806040838503121561421657600080fd5b823561422181613f97565b915060208301356001600160401b0381111561423c57600080fd5b8301601f8101851361424d57600080fd5b803561425b61413e826141dc565b81815286602083850101111561427057600080fd5b816020840160208301376000602083830101528093505050509250929050565b600080604083850312156142a357600080fd5b82356142ae81613f97565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156142f4578351835292840192918401916001016142d8565b50909695505050505050565b60005b8381101561431b578181015183820152602001614303565b50506000910152565b6020815260008251806020840152614343816040850160208701614300565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c0857610c08614357565b6001600160a01b03929092168252602082015260400190565b805180151581146143a957600080fd5b919050565b6000602082840312156143c057600080fd5b61185c82614399565b9283526001600160a01b03919091166020830152604082015260600190565b918252602082015260400190565b60006020828403121561440857600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008261444257634e487b7160e01b600052601260045260246000fd5b500490565b6000602080838503121561445a57600080fd5b82516001600160401b038082111561447157600080fd5b9084019060a0828703121561448557600080fd5b61448d614058565b825181528383015184820152604083015160408201526144af60608401614399565b60608201526080830151828111156144c657600080fd5b80840193505086601f8401126144db57600080fd5b825191506144eb61413e836140d3565b82815260059290921b8301840191848101908884111561450a57600080fd5b938501935b838510156145285784518252938501939085019061450f565b6080830152509695505050505050565b80820180821115610c0857610c08614357565b8082028115828204841417610c0857610c08614357565b600060e0828403121561457457600080fd5b60405160e081016001600160401b038111828210171561459657614596614042565b604052825181526145a960208401614399565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b938452602084019290925260408301521515606082015260800190565b80516143a981613f97565b600082601f83011261462357600080fd5b815161463161413e826141dc565b81815284602083860101111561464657600080fd5b614657826020830160208701614300565b949350505050565b8051600581106143a957600080fd5b60006020828403121561468057600080fd5b81516001600160401b038082111561469757600080fd5b908301906101c082860312156146ac57600080fd5b6146b4614080565b825181526146c460208401614607565b60208201526146d560408401614607565b60408201526146e660608401614607565b60608201526080830151608082015260a083015160a082015260c08301518281111561471157600080fd5b61471d87828601614612565b60c08301525060e08301518281111561473557600080fd5b61474187828601614612565b60e083015250610100808401518381111561475b57600080fd5b61476788828701614612565b828401525050610120808401518381111561478157600080fd5b61478d88828701614612565b82840152505061014091506147a382840161465f565b91810191909152610160828101519082015261018080830151908201526101a0906147cf828401614399565b91810191909152949350505050565b634e487b7160e01b600052602160045260246000fd5b60006001820161480657614806614357565b5060010190565b6000808585111561481d57600080fd5b8386111561482a57600080fd5b5050820193919092039150565b6001600160601b0319813581811691601485101561485f5780818660140360031b1b83161692505b505092915050565b6001600160d01b038181168382160190808211156131bf576131bf614357565b60008251614899818460208701614300565b919091019291505056fe2d7d3382db8acb6440c62abdeb6a91b1136fedaebbf7e52ede418d921778b0d29ad543c59d5f19d7487d967f2c38da7421c0e9386626ecfc23d22e933bbcf378360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a26469706673582212209df26de6308624b030a5202c903be51f2b9408117092403ca804f30c04a4a08b64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "CheckpointUnorderedInsertion()": [
        {
          "details": "A value was attempted to be inserted on a past checkpoint."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "calculateStakeClaimableAmount(uint256)": {
        "details": "Takes into account stake duration, score, and reward distributionThis method is not marked as view because is using a method that modifies state to call it as a view, please using static call"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateStakeClaimableAmount(uint256)": {
        "notice": "Calculates claimable rewards for a stake"
      },
      "calculateStakeScore(uint256,uint256,uint256)": {
        "notice": "Calculates stake score based on amount and duration"
      },
      "claimStakeRewardUntilEpoch(uint256,uint256)": {
        "notice": "Claims rewards for a stake up to specified epoch"
      },
      "claimStakesReward(uint256[])": {
        "notice": "Claims rewards for multiple stakes"
      },
      "closeStakes(uint256[])": {
        "notice": "Closes multiple stakes"
      },
      "withdrawStakes(uint256[])": {
        "notice": "Withdraws multiple closed stakes"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7857,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7859,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "eligibleDlpsLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7861,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "epochDlpsLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7864,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7866,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "minDlpStakersPercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7868,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "minDlpRegistrationStake",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7870,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpEligibilityThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7872,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpSubEligibilityThreshold",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7875,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_stakeWithdrawalDelayCheckpoints",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Trace208)3808_storage"
      },
      {
        "astId": 7878,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_rewardClaimDelayCheckpoints",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Trace208)3808_storage"
      },
      {
        "astId": 7880,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "epochRewardAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7882,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "epochSize",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7884,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "daySize",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7886,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpsCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7891,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_dlps",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Dlp)8323_storage)"
      },
      {
        "astId": 7895,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpIds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7898,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_eligibleDlpsList",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(UintSet)5329_storage"
      },
      {
        "astId": 7900,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "epochsCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 7905,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_epochs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(Epoch)8349_storage)"
      },
      {
        "astId": 7908,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_stakersList",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(AddressSet)5172_storage"
      },
      {
        "astId": 7913,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_stakers",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_struct(Staker)7998_storage)"
      },
      {
        "astId": 7916,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "stakesCount",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 7921,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "_stakes",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(Stake)7985_storage)"
      },
      {
        "astId": 7923,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "maxDlpStakersPercentage",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 7927,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpNameToId",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 7931,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpRootMetrics",
        "offset": 0,
        "slot": "27",
        "type": "t_contract(IDLPRootMetrics)9052"
      },
      {
        "astId": 7935,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpRootRewardsTreasury",
        "offset": 0,
        "slot": "28",
        "type": "t_contract(IDLPRootTreasury)9082"
      },
      {
        "astId": 7939,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpRootStakesTreasury",
        "offset": 0,
        "slot": "29",
        "type": "t_contract(IDLPRootTreasury)9082"
      },
      {
        "astId": 7943,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpRootCore",
        "offset": 0,
        "slot": "30",
        "type": "t_contract(IDLPRootCore)8625"
      },
      {
        "astId": 7947,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "dlpRootEpoch",
        "offset": 0,
        "slot": "31",
        "type": "t_contract(IDLPRootEpoch)8830"
      },
      {
        "astId": 7949,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "stakingLastBlockNumber",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 7952,
        "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
        "label": "vanaPoolStaking",
        "offset": 0,
        "slot": "33",
        "type": "t_contract(IVanaPoolStaking)11467"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Checkpoint208)3813_storage)dyn_storage": {
        "base": "t_struct(Checkpoint208)3813_storage",
        "encoding": "dynamic_array",
        "label": "struct Checkpoints.Checkpoint208[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDLPRootCore)8625": {
        "encoding": "inplace",
        "label": "contract IDLPRootCore",
        "numberOfBytes": "20"
      },
      "t_contract(IDLPRootEpoch)8830": {
        "encoding": "inplace",
        "label": "contract IDLPRootEpoch",
        "numberOfBytes": "20"
      },
      "t_contract(IDLPRootMetrics)9052": {
        "encoding": "inplace",
        "label": "contract IDLPRootMetrics",
        "numberOfBytes": "20"
      },
      "t_contract(IDLPRootTreasury)9082": {
        "encoding": "inplace",
        "label": "contract IDLPRootTreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IVanaPoolStaking)11467": {
        "encoding": "inplace",
        "label": "contract IVanaPoolStaking",
        "numberOfBytes": "20"
      },
      "t_enum(DlpStatus)8284": {
        "encoding": "inplace",
        "label": "enum IDLPRootDeprecated.DlpStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Staker)7998_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDLPRoot.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)7998_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Dlp)8323_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRootDeprecated.Dlp)",
        "numberOfBytes": "32",
        "value": "t_struct(Dlp)8323_storage"
      },
      "t_mapping(t_uint256,t_struct(Epoch)8349_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRootDeprecated.Epoch)",
        "numberOfBytes": "32",
        "value": "t_struct(Epoch)8349_storage"
      },
      "t_mapping(t_uint256,t_struct(EpochDlp)8332_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRootDeprecated.EpochDlp)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochDlp)8332_storage"
      },
      "t_mapping(t_uint256,t_struct(Stake)7985_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRoot.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)7985_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)5172_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5171,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4857_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint208)3813_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Checkpoint208",
        "members": [
          {
            "astId": 3810,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3812,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_value",
            "offset": 6,
            "slot": "0",
            "type": "t_uint208"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Dlp)8323_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRootDeprecated.Dlp",
        "members": [
          {
            "astId": 8286,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8288,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8290,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8292,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 8295,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakersPercentageCheckpoints",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Trace208)3808_storage"
          },
          {
            "astId": 8297,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 8299,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "iconUrl",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 8301,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "website",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 8303,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "metadata",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 8306,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(DlpStatus)8284"
          },
          {
            "astId": 8308,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "registrationBlockNumber",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8311,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakeAmountCheckpoints",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(Trace208)3808_storage"
          },
          {
            "astId": 8314,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "unstakeAmountCheckpoints",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Trace208)3808_storage"
          },
          {
            "astId": 8316,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "epochIdsCount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 8320,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "epochIds",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 8322,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "isVerified",
            "offset": 0,
            "slot": "15",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(Epoch)8349_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRootDeprecated.Epoch",
        "members": [
          {
            "astId": 8334,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8336,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8338,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8340,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "isFinalised",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8343,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpIds",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(UintSet)5329_storage"
          },
          {
            "astId": 8348,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlps",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(EpochDlp)8332_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(EpochDlp)8332_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRootDeprecated.EpochDlp",
        "members": [
          {
            "astId": 8325,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8327,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakersRewardAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8329,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "totalStakesScore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8331,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "rewardClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)4857_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4852,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4856,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)7985_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRoot.Stake",
        "members": [
          {
            "astId": 7966,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7968,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7970,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7972,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7974,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7976,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "withdrawn",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 7978,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "lastClaimedIndexEpochId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7982,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "claimedAmounts",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7984,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "movedAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Staker)7998_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRoot.Staker",
        "members": [
          {
            "astId": 7988,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpIds",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(UintSet)5329_storage"
          },
          {
            "astId": 7992,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "dlpStakeAmounts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7995,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "stakeIds",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(UintSet)5329_storage"
          },
          {
            "astId": 7997,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "totalStakeAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Trace208)3808_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Trace208",
        "members": [
          {
            "astId": 3807,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_checkpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint208)3813_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)5329_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 5328,
            "contract": "contracts/root/DLPRootImplementation.sol:DLPRootImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4857_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}