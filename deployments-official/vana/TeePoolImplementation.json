{
  "address": "0x4d3F0093F32917dAA4607718Df849b9d9DDc4f78",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CancelDelayNotPassed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidJobStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidJobTee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JobCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveTee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotJobOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TeeAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TeeNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "JobCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "JobSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "attestator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        }
      ],
      "name": "ProofAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "TeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "TeeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeTeeList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "activeTeeListAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum ITeePool.TeeStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobsCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            }
          ],
          "internalType": "struct ITeePool.TeeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeTeesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "score",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dlpId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "proofUrl",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "instruction",
                  "type": "string"
                }
              ],
              "internalType": "struct IDataRegistry.ProofData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDataRegistry.Proof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "addProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicKey",
          "type": "string"
        }
      ],
      "name": "addTee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "cancelJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataRegistry",
      "outputs": [
        {
          "internalType": "contract IDataRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        }
      ],
      "name": "fileJobIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dataRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialCancelDelay",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "isTee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jobId",
          "type": "uint256"
        }
      ],
      "name": "jobs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum ITeePool.JobStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "addedTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "teeAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ITeePool.Job",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jobsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "removeTee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        }
      ],
      "name": "requestContributionProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fileId",
          "type": "uint256"
        }
      ],
      "name": "submitJob",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "teeJobIdsPaginated",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teeList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "teeListAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum ITeePool.TeeStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobsCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            }
          ],
          "internalType": "struct ITeePool.TeeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "teeAddress",
          "type": "address"
        }
      ],
      "name": "tees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum ITeePool.TeeStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobsCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            }
          ],
          "internalType": "struct ITeePool.TeeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCancelDelay",
          "type": "uint256"
        }
      ],
      "name": "updateCancelDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDataRegistry",
          "name": "newDataRegistry",
          "type": "address"
        }
      ],
      "name": "updateDataRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTeeFee",
          "type": "uint256"
        }
      ],
      "name": "updateTeeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "updateTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x39640904c4c41206b1c034c04e5a0cda3d8fbcb7394f34cc7c51a81c4cdf55d5",
  "receipt": {
    "to": null,
    "from": "0x2AC93684679a5bdA03C6160def908CdB8D46792f",
    "contractAddress": "0x4d3F0093F32917dAA4607718Df849b9d9DDc4f78",
    "transactionIndex": 0,
    "gasUsed": "2732021",
    "logsBloom": "0x
    "blockHash": "0x1202c02ee2480e7b3e092a20407a1b3a4b084a09a98dbfafc79b3f80fe0fdccf",
    "transactionHash": "0x39640904c4c41206b1c034c04e5a0cda3d8fbcb7394f34cc7c51a81c4cdf55d5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 965579,
        "transactionHash": "0x39640904c4c41206b1c034c04e5a0cda3d8fbcb7394f34cc7c51a81c4cdf55d5",
        "address": "0x4d3F0093F32917dAA4607718Df849b9d9DDc4f78",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x1202c02ee2480e7b3e092a20407a1b3a4b084a09a98dbfafc79b3f80fe0fdccf"
      }
    ],
    "blockNumber": 965579,
    "cumulativeGasUsed": "2732021",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "825730942df3a624c057713ffce4c8f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CancelDelayNotPassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidJobStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidJobTee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JobCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveTee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotJobOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TeeAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TeeNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"JobCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"JobSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attestator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"ProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"TeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"TeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeTeeList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"activeTeeListAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum ITeePool.TeeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobsCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"internalType\":\"struct ITeePool.TeeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeTeesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"proofUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"instruction\",\"type\":\"string\"}],\"internalType\":\"struct IDataRegistry.ProofData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct IDataRegistry.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"addProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"name\":\"addTee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"cancelJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataRegistry\",\"outputs\":[{\"internalType\":\"contract IDataRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"fileJobIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialCancelDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"isTee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jobId\",\"type\":\"uint256\"}],\"name\":\"jobs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ITeePool.JobStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"addedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"internalType\":\"struct ITeePool.Job\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"removeTee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"requestContributionProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileId\",\"type\":\"uint256\"}],\"name\":\"submitJob\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"teeJobIdsPaginated\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teeList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"teeListAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum ITeePool.TeeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobsCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"internalType\":\"struct ITeePool.TeeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"}],\"name\":\"tees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum ITeePool.TeeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobsCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"internalType\":\"struct ITeePool.TeeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCancelDelay\",\"type\":\"uint256\"}],\"name\":\"updateCancelDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDataRegistry\",\"name\":\"newDataRegistry\",\"type\":\"address\"}],\"name\":\"updateDataRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTeeFee\",\"type\":\"uint256\"}],\"name\":\"updateTeeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"updateTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Claimed(address,uint256)\":{\"params\":{\"amount\":\"amount claimed\",\"teeAddress\":\"address of the tee\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"JobCanceled(uint256)\":{\"params\":{\"jobId\":\"id of the job\"}},\"JobSubmitted(uint256,uint256,address,uint256)\":{\"params\":{\"bidAmount\":\"bid amount\",\"fileId\":\"id of the file\",\"jobId\":\"id of the job\",\"teeAddress\":\"address of the tee\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"ProofAdded(address,uint256,uint256)\":{\"params\":{\"attestator\":\"address of the attestator\",\"fileId\":\"id of the file\",\"jobId\":\"id of the job\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TeeAdded(address)\":{\"params\":{\"teeAddress\":\"address of the tee\"}},\"TeeRemoved(address)\":{\"params\":{\"teeAddress\":\"address of the tee\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"activeTeeListAt(uint256)\":{\"params\":{\"index\":\"index of the tee\"},\"returns\":{\"_0\":\"TeeDetails                       details of the tee\"}},\"addProof(uint256,(bytes,(uint256,uint256,string,string,string)))\":{\"params\":{\"jobId\":\"id of the job\",\"proof\":\"proof for the file\"}},\"addTee(address,string,string)\":{\"params\":{\"publicKey\":\"public key of the tee\",\"teeAddress\":\"address of the tee\",\"url\":\"url of the tee\"}},\"cancelJob(uint256)\":{\"params\":{\"jobId\":\"id of the job\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,uint256)\":{\"params\":{\"dataRegistryAddress\":\"address of the data registry contract\",\"initialCancelDelay\":\"initial cancel delay\",\"ownerAddress\":\"address of the owner\",\"trustedForwarderAddress\":\"address of the trusted forwarder\"}},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"jobs(uint256)\":{\"params\":{\"jobId\":\"id of the job\"},\"returns\":{\"_0\":\"Job                              details of the job\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeTee(address)\":{\"params\":{\"teeAddress\":\"address of the tee\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"requestContributionProof(uint256)\":{\"params\":{\"fileId\":\"id of the file\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"submitJob(uint256)\":{\"params\":{\"fileId\":\"id of the file\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"teeJobIdsPaginated(address,uint256,uint256)\":{\"params\":{\"limit\":\"limit\",\"start\":\"start index\",\"teeAddress\":\"address of the tee\"},\"returns\":{\"_0\":\"uint256[]                        list of job ids\"}},\"teeListAt(uint256)\":{\"params\":{\"index\":\"index of the tee\"},\"returns\":{\"_0\":\"TeeDetails                       details of the tee\"}},\"tees(address)\":{\"params\":{\"teeAddress\":\"address of the tee\"},\"returns\":{\"_0\":\"TeeDetails                       details of the tee\"}},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"updateCancelDelay(uint256)\":{\"params\":{\"newCancelDelay\":\"new cancel delay\"}},\"updateDataRegistry(address)\":{\"params\":{\"newDataRegistry\":\"new file registry\"}},\"updateTeeFee(uint256)\":{\"params\":{\"newTeeFee\":\"new fee\"}},\"updateTrustedForwarder(address)\":{\"params\":{\"trustedForwarderAddress\":\"address of the trusted forwarder\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Claimed(address,uint256)\":{\"notice\":\"Triggered when a claim has been made\"},\"JobCanceled(uint256)\":{\"notice\":\"Triggered when a job has been cancelled\"},\"JobSubmitted(uint256,uint256,address,uint256)\":{\"notice\":\"Triggered when a job has been submitted\"},\"ProofAdded(address,uint256,uint256)\":{\"notice\":\"Triggered when a proof has been added\"},\"TeeAdded(address)\":{\"notice\":\"Triggered when a tee has been added\"},\"TeeRemoved(address)\":{\"notice\":\"Triggered when a tee has been removed\"}},\"kind\":\"user\",\"methods\":{\"activeTeeList()\":{\"notice\":\"Returns the list of active tees\"},\"activeTeeListAt(uint256)\":{\"notice\":\"Returns the details of the active tee at the given index\"},\"activeTeesCount()\":{\"notice\":\"Returns the number of active tees\"},\"addProof(uint256,(bytes,(uint256,uint256,string,string,string)))\":{\"notice\":\"Adds a proof to the file\"},\"addTee(address,string,string)\":{\"notice\":\"Adds a tee to the pool\"},\"cancelJob(uint256)\":{\"notice\":\"Cancels a contribution proof request\"},\"claim()\":{\"notice\":\"method used by tees for claiming their rewards\"},\"fileJobIds(uint256)\":{\"notice\":\"Returns a list of job ids for the given file\"},\"initialize(address,address,address,uint256)\":{\"notice\":\"Initialize the contract\"},\"jobs(uint256)\":{\"notice\":\"Returns the details of the job\"},\"removeTee(address)\":{\"notice\":\"Removes a tee from the pool\"},\"requestContributionProof(uint256)\":{\"notice\":\"Adds a contribution proof request\"},\"submitJob(uint256)\":{\"notice\":\"Submits a contribution proof request\"},\"teeJobIdsPaginated(address,uint256,uint256)\":{\"notice\":\"Returns a paginated list of jobs for the given tee\"},\"teeList()\":{\"notice\":\"Returns the list of tees\"},\"teeListAt(uint256)\":{\"notice\":\"Returns the details of the tee at the given index\"},\"tees(address)\":{\"notice\":\"Returns the details of the tee\"},\"teesCount()\":{\"notice\":\"Returns the number of tees\"},\"updateCancelDelay(uint256)\":{\"notice\":\"Updates the cancel delay\"},\"updateDataRegistry(address)\":{\"notice\":\"Updates the file registry\"},\"updateTeeFee(uint256)\":{\"notice\":\"Updates the tee fee\"},\"updateTrustedForwarder(address)\":{\"notice\":\"Update the trusted forwarder\"},\"version()\":{\"notice\":\"Returns the version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/teePool/TeePoolImplementation.sol\":\"TeePoolImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *\\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\\n * function only accessible if `msg.data.length == 0`.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /**\\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\\n     * invoke functions on this contract on behalf of other accounts.\\n     *\\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder_) {\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any particular address is the trusted forwarder.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder();\\n    }\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0x14b59e8cd5720c9cd31616450874b462f575bb52b387df2a54dbd26f9a07adf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ContextUpgradeable} from \\\"./ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x1545b1796f0b94f811d95b8b208c0668dacfc7768247d22b63161a47c4c5ef4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/dataRegistry/interfaces/IDataRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IDataRegistry {\\n    struct ProofData {\\n        uint256 score;\\n        uint256 dlpId;\\n        string metadata;\\n        string proofUrl;\\n        string instruction;\\n    }\\n\\n    struct Proof {\\n        bytes signature;\\n        ProofData data;\\n    }\\n\\n    struct File {\\n        address ownerAddress;\\n        string url;\\n        uint256 addedAtBlock;\\n        uint256 proofsCount;\\n        mapping(uint256 proofId => Proof proof) proofs;\\n        mapping(address account => string key) permissions;\\n    }\\n\\n    struct FileResponse {\\n        uint256 id;\\n        address ownerAddress;\\n        string url;\\n        uint256 addedAtBlock;\\n    }\\n\\n    struct Permission {\\n        address account;\\n        string key;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function filesCount() external view returns (uint256);\\n    function files(uint256 index) external view returns (FileResponse memory);\\n    function fileIdByUrl(string memory url) external view returns (uint256);\\n    function fileProofs(uint256 fileId, uint256 index) external view returns (Proof memory);\\n    function filePermissions(uint256 fileId, address account) external view returns (string memory);\\n    function pause() external;\\n    function unpause() external;\\n    function addFile(string memory url) external returns (uint256);\\n    function addFileWithPermissions(\\n        string memory url,\\n        address ownerAddress,\\n        Permission[] memory permissions\\n    ) external returns (uint256);\\n    function addProof(uint256 fileId, Proof memory proof) external;\\n    function addFilePermission(uint256 fileId, address account, string memory key) external;\\n}\\n\",\"keccak256\":\"0xe24624f47f498cb1b5c88792bbe9979340c61fcb0289e9861fd6be4cbea1adef\",\"license\":\"MIT\"},\"contracts/teePool/TeePoolImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/TeePoolStorageV1.sol\\\";\\n\\ncontract TeePoolImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    MulticallUpgradeable,\\n    ERC2771ContextUpgradeable,\\n    TeePoolStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    /**\\n     * @notice Triggered when a job has been submitted\\n     *\\n     * @param jobId                             id of the job\\n     * @param fileId                            id of the file\\n     * @param teeAddress                        address of the tee\\n     * @param bidAmount                         bid amount\\n     */\\n    event JobSubmitted(uint256 indexed jobId, uint256 indexed fileId, address teeAddress, uint256 bidAmount);\\n\\n    /**\\n     * @notice Triggered when a job has been cancelled\\n     *\\n     * @param jobId                             id of the job\\n     */\\n    event JobCanceled(uint256 indexed jobId);\\n\\n    /**\\n     * @notice Triggered when a proof has been added\\n     *\\n     * @param attestator                         address of the attestator\\n     * @param jobId                             id of the job\\n     * @param fileId                            id of the file\\n     */\\n    event ProofAdded(address indexed attestator, uint256 indexed jobId, uint256 indexed fileId);\\n\\n    /**\\n     * @notice Triggered when a tee has been added\\n     *\\n     * @param teeAddress                        address of the tee\\n     */\\n    event TeeAdded(address indexed teeAddress);\\n\\n    /**\\n     * @notice Triggered when a tee has been removed\\n     *\\n     * @param teeAddress                        address of the tee\\n     */\\n    event TeeRemoved(address indexed teeAddress);\\n\\n    /**\\n     * @notice Triggered when a claim has been made\\n     *\\n     * @param teeAddress                        address of the tee\\n     * @param amount                            amount claimed\\n     */\\n    event Claimed(address indexed teeAddress, uint256 amount);\\n\\n    error TeeAlreadyAdded();\\n    error TeeNotActive();\\n    error JobCompleted();\\n    error InvalidJobStatus();\\n    error InvalidJobTee();\\n    error NothingToClaim();\\n    error InsufficientFee();\\n    error NoActiveTee();\\n    error NotJobOwner();\\n    error CancelDelayNotPassed();\\n    error TransferFailed();\\n\\n    modifier onlyActiveTee() {\\n        if (!(_tees[_msgSender()].status == TeeStatus.Active)) {\\n            revert TeeNotActive();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() ERC2771ContextUpgradeable(address(0)) {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initialize the contract\\n     *\\n     * @param trustedForwarderAddress           address of the trusted forwarder\\n     * @param ownerAddress                      address of the owner\\n     * @param dataRegistryAddress               address of the data registry contract\\n     * @param initialCancelDelay                initial cancel delay\\n     */\\n    function initialize(\\n        address trustedForwarderAddress,\\n        address ownerAddress,\\n        address dataRegistryAddress,\\n        uint256 initialCancelDelay\\n    ) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _trustedForwarder = trustedForwarderAddress;\\n        dataRegistry = IDataRegistry(dataRegistryAddress);\\n        cancelDelay = initialCancelDelay;\\n\\n        _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\\n    }\\n\\n    /**\\n     * @notice Upgrade the contract\\n     * This function is required by OpenZeppelin's UUPSUpgradeable\\n     *\\n     * @param newImplementation                  new implementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    function _contextSuffixLength()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (uint256)\\n    {\\n        return ERC2771ContextUpgradeable._contextSuffixLength();\\n    }\\n\\n    function trustedForwarder() public view virtual override returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     */\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns the details of the job\\n     *\\n     * @param jobId                             id of the job\\n     * @return Job                              details of the job\\n     */\\n    function jobs(uint256 jobId) external view override returns (Job memory) {\\n        return _jobs[jobId];\\n    }\\n\\n    /**\\n     * @notice Returns the details of the tee\\n     *\\n     * @param teeAddress                        address of the tee\\n     * @return TeeDetails                       details of the tee\\n     */\\n    function tees(address teeAddress) public view override returns (TeeInfo memory) {\\n        return\\n            TeeInfo({\\n                teeAddress: teeAddress,\\n                url: _tees[teeAddress].url,\\n                status: _tees[teeAddress].status,\\n                amount: _tees[teeAddress].amount,\\n                withdrawnAmount: _tees[teeAddress].withdrawnAmount,\\n                jobsCount: _tees[teeAddress].jobIdsList.length(),\\n                publicKey: _tees[teeAddress].publicKey\\n            });\\n    }\\n\\n    /**\\n     * @notice Returns a paginated list of jobs for the given tee\\n     *\\n     * @param teeAddress                        address of the tee\\n     * @param start                             start index\\n     * @param limit                             limit\\n     * @return uint256[]                        list of job ids\\n     */\\n    function teeJobIdsPaginated(\\n        address teeAddress,\\n        uint256 start,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory) {\\n        EnumerableSet.UintSet storage teeJobs = _tees[teeAddress].jobIdsList;\\n\\n        uint256 teeJobsCount = teeJobs.length();\\n\\n        if (start >= teeJobsCount) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 end = start + limit > teeJobsCount ? teeJobsCount : start + limit;\\n\\n        uint256[] memory jobList = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            jobList[i - start] = teeJobs.at(i);\\n        }\\n\\n        return jobList;\\n    }\\n\\n    /**\\n     * @notice Returns the number of tees\\n     */\\n    function teesCount() external view override returns (uint256) {\\n        return _teeList.length();\\n    }\\n\\n    /**\\n     * @notice Returns the list of tees\\n     */\\n    function teeList() external view override returns (address[] memory) {\\n        return _teeList.values();\\n    }\\n\\n    /**\\n     * @notice Returns the details of the tee at the given index\\n     *\\n     * @param index                             index of the tee\\n     * @return TeeDetails                       details of the tee\\n     */\\n    function teeListAt(uint256 index) external view override returns (TeeInfo memory) {\\n        return tees(_teeList.at(index));\\n    }\\n\\n    /**\\n     * @notice Returns the number of active tees\\n     */\\n    function activeTeesCount() external view override returns (uint256) {\\n        return _activeTeeList.length();\\n    }\\n\\n    /**\\n     * @notice Returns the list of active tees\\n     */\\n    function activeTeeList() external view override returns (address[] memory) {\\n        return _activeTeeList.values();\\n    }\\n\\n    /**\\n     * @notice Returns the details of the active tee at the given index\\n     *\\n     * @param index                             index of the tee\\n     * @return TeeDetails                       details of the tee\\n     */\\n    function activeTeeListAt(uint256 index) external view override returns (TeeInfo memory) {\\n        return tees(_activeTeeList.at(index));\\n    }\\n\\n    function isTee(address teeAddress) external view override returns (bool) {\\n        return _tees[teeAddress].status == TeeStatus.Active;\\n    }\\n\\n    /**\\n     * @notice Returns a list of job ids for the given file\\n     */\\n    function fileJobIds(uint256 fileId) external view override returns (uint256[] memory) {\\n        return _fileJobsIds[fileId].values();\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Updates the file registry\\n     *\\n     * @param newDataRegistry                   new file registry\\n     */\\n    function updateDataRegistry(IDataRegistry newDataRegistry) external override onlyRole(MAINTAINER_ROLE) {\\n        dataRegistry = newDataRegistry;\\n    }\\n\\n    /**\\n     * @notice Updates the tee fee\\n     *\\n     * @param newTeeFee                         new fee\\n     */\\n    function updateTeeFee(uint256 newTeeFee) external override onlyRole(MAINTAINER_ROLE) {\\n        teeFee = newTeeFee;\\n    }\\n\\n    /**\\n     * @notice Updates the cancel delay\\n     *\\n     * @param newCancelDelay                    new cancel delay\\n     */\\n    function updateCancelDelay(uint256 newCancelDelay) external override onlyRole(MAINTAINER_ROLE) {\\n        cancelDelay = newCancelDelay;\\n    }\\n\\n    /**\\n     * @notice Update the trusted forwarder\\n     *\\n     * @param trustedForwarderAddress                  address of the trusted forwarder\\n     */\\n    function updateTrustedForwarder(address trustedForwarderAddress) external onlyRole(MAINTAINER_ROLE) {\\n        _trustedForwarder = trustedForwarderAddress;\\n    }\\n\\n    /**\\n     * @notice Adds a tee to the pool\\n     *\\n     * @param teeAddress                        address of the tee\\n     * @param url                               url of the tee\\n     * @param publicKey                         public key of the tee\\n     */\\n    function addTee(\\n        address teeAddress,\\n        string calldata url,\\n        string calldata publicKey\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (_activeTeeList.contains(teeAddress)) {\\n            revert TeeAlreadyAdded();\\n        }\\n        _teeList.add(teeAddress);\\n        _activeTeeList.add(teeAddress);\\n        _tees[teeAddress].status = TeeStatus.Active;\\n        _tees[teeAddress].url = url;\\n        _tees[teeAddress].publicKey = publicKey;\\n\\n        emit TeeAdded(teeAddress);\\n    }\\n\\n    /**\\n     * @notice Removes a tee from the pool\\n     *\\n     * @param teeAddress                        address of the tee\\n     */\\n    function removeTee(address teeAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        if (!_activeTeeList.contains(teeAddress)) {\\n            revert TeeNotActive();\\n        }\\n\\n        _tees[teeAddress].status = TeeStatus.Removed;\\n        _activeTeeList.remove(teeAddress);\\n\\n        emit TeeRemoved(teeAddress);\\n    }\\n\\n    /**\\n     * @notice Adds a contribution proof request\\n     *\\n     * @param fileId                            id of the file\\n     */\\n    function requestContributionProof(uint256 fileId) public payable override whenNotPaused {\\n        if (msg.value < teeFee) {\\n            revert InsufficientFee();\\n        }\\n\\n        if (_activeTeeList.length() == 0) {\\n            revert NoActiveTee();\\n        }\\n\\n        uint256 jobsCountTemp = ++jobsCount;\\n\\n        address teeAddress = tees(_activeTeeList.at(jobsCountTemp % _activeTeeList.length())).teeAddress;\\n\\n        _jobs[jobsCountTemp].fileId = fileId;\\n        _jobs[jobsCountTemp].bidAmount = msg.value;\\n        _jobs[jobsCountTemp].addedTimestamp = block.timestamp;\\n        _jobs[jobsCountTemp].ownerAddress = _msgSender();\\n        _jobs[jobsCountTemp].status = JobStatus.Submitted;\\n        _jobs[jobsCountTemp].teeAddress = teeAddress;\\n\\n        _fileJobsIds[fileId].add(jobsCountTemp);\\n\\n        _tees[teeAddress].jobIdsList.add(jobsCountTemp);\\n\\n        emit JobSubmitted(jobsCountTemp, fileId, teeAddress, msg.value);\\n    }\\n\\n    /**\\n     * @notice Submits a contribution proof request\\n     *\\n     * @param fileId                            id of the file\\n     */\\n    function submitJob(uint256 fileId) external payable override whenNotPaused {\\n        requestContributionProof(fileId);\\n    }\\n\\n    /**\\n     * @notice Cancels a contribution proof request\\n     *\\n     * @param jobId                            id of the job\\n     */\\n    function cancelJob(uint256 jobId) external override nonReentrant whenNotPaused {\\n        Job storage job = _jobs[jobId];\\n        if (job.ownerAddress != _msgSender()) {\\n            revert NotJobOwner();\\n        }\\n\\n        if (job.status != JobStatus.Submitted) {\\n            revert InvalidJobStatus();\\n        }\\n\\n        if (job.addedTimestamp + cancelDelay > block.timestamp) {\\n            revert CancelDelayNotPassed();\\n        }\\n\\n        job.status = JobStatus.Canceled;\\n        _tees[job.teeAddress].jobIdsList.remove(jobId);\\n\\n        (bool success, ) = payable(_msgSender()).call{value: job.bidAmount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit JobCanceled(jobId);\\n    }\\n\\n    /**\\n     * @notice Adds a proof to the file\\n     *\\n     * @param jobId                             id of the job\\n     * @param proof                             proof for the file\\n     */\\n    function addProof(uint256 jobId, IDataRegistry.Proof memory proof) external override onlyActiveTee whenNotPaused {\\n        Job storage job = _jobs[jobId];\\n\\n        if (job.status != JobStatus.Submitted) {\\n            revert InvalidJobStatus();\\n        }\\n\\n        if (job.teeAddress != _msgSender()) {\\n            revert InvalidJobTee();\\n        }\\n\\n        dataRegistry.addProof(job.fileId, proof);\\n\\n        _tees[_msgSender()].amount += job.bidAmount;\\n\\n        _tees[_msgSender()].jobIdsList.remove(jobId);\\n\\n        job.status = JobStatus.Completed;\\n\\n        emit ProofAdded(_msgSender(), jobId, job.fileId);\\n    }\\n\\n    /**\\n     * @notice method used by tees for claiming their rewards\\n     */\\n    function claim() external nonReentrant whenNotPaused {\\n        uint256 amount = _tees[_msgSender()].amount - _tees[_msgSender()].withdrawnAmount;\\n\\n        if (amount == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        _tees[_msgSender()].withdrawnAmount = _tees[_msgSender()].amount;\\n\\n        (bool success, ) = payable(_msgSender()).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n\\n        emit Claimed(_msgSender(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x89b6656c5d444cba630b0c10b80d9fb4e14399a1dcbcb58499352dfc5ba48276\",\"license\":\"MIT\"},\"contracts/teePool/interfaces/ITeePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDataRegistry} from \\\"../../dataRegistry/interfaces/IDataRegistry.sol\\\";\\n\\ninterface ITeePool {\\n    enum TeeStatus {\\n        None,\\n        Active,\\n        Removed\\n    }\\n\\n    enum JobStatus {\\n        None,\\n        Submitted,\\n        Completed,\\n        Canceled\\n    }\\n\\n    struct Job {\\n        uint256 fileId;\\n        uint256 bidAmount;\\n        JobStatus status;\\n        uint256 addedTimestamp;\\n        address ownerAddress;\\n        address teeAddress;\\n    }\\n\\n    struct Tee {\\n        TeeStatus status;\\n        string url;\\n        uint256 amount;\\n        uint256 withdrawnAmount;\\n        EnumerableSet.UintSet jobIdsList;\\n        string publicKey;\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function dataRegistry() external view returns (IDataRegistry);\\n    function cancelDelay() external view returns (uint256);\\n    function jobsCount() external view returns (uint256);\\n    function jobs(uint256 jobId) external view returns (Job memory);\\n    struct TeeInfo {\\n        address teeAddress;\\n        string url;\\n        TeeStatus status;\\n        uint256 amount;\\n        uint256 withdrawnAmount;\\n        uint256 jobsCount;\\n        string publicKey;\\n    }\\n    function tees(address teeAddress) external view returns (TeeInfo memory);\\n    function teesCount() external view returns (uint256);\\n    function teeList() external view returns (address[] memory);\\n    function teeListAt(uint256 index) external view returns (TeeInfo memory);\\n    function activeTeesCount() external view returns (uint256);\\n    function activeTeeList() external view returns (address[] memory);\\n    function activeTeeListAt(uint256 index) external view returns (TeeInfo memory);\\n    function isTee(address teeAddress) external view returns (bool);\\n    function teeFee() external view returns (uint256);\\n    function teeJobIdsPaginated(\\n        address teeAddress,\\n        uint256 start,\\n        uint256 limit\\n    ) external view returns (uint256[] memory);\\n    function fileJobIds(uint256 fileId) external view returns (uint256[] memory);\\n\\n    function pause() external;\\n    function unpause() external;\\n    function updateDataRegistry(IDataRegistry dataRegistry) external;\\n    function updateTeeFee(uint256 newTeeFee) external;\\n    function updateCancelDelay(uint256 newCancelDelay) external;\\n    function addTee(address teeAddress, string calldata url, string calldata publicKey) external;\\n    function removeTee(address teeAddress) external;\\n    function requestContributionProof(uint256 fileId) external payable;\\n    function submitJob(uint256 fileId) external payable;\\n    function cancelJob(uint256 jobId) external;\\n    function addProof(uint256 fileId, IDataRegistry.Proof memory proof) external;\\n}\\n\",\"keccak256\":\"0x60d9a26bc4ac2fc3d99fbc24c299e310b87a56006b7249bff0be6ce2e2b567d5\",\"license\":\"MIT\"},\"contracts/teePool/interfaces/TeePoolStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./ITeePool.sol\\\";\\n\\n/**`\\n * @title Storage for TeePool\\n * @notice For future upgrades, do not change TeePoolStorageV1. Create a new\\n * contract which implements TeePoolStorageV1\\n */\\nabstract contract TeePoolStorageV1 is ITeePool {\\n    address internal _trustedForwarder;\\n    IDataRegistry public override dataRegistry;\\n\\n    uint256 public override jobsCount;\\n    mapping(uint256 jobId => Job job) internal _jobs;\\n\\n    EnumerableSet.AddressSet internal _teeList;\\n    EnumerableSet.AddressSet internal _activeTeeList;\\n    mapping(address teeAddress => Tee tee) internal _tees;\\n\\n    uint256 public override teeFee;\\n    uint256 public override cancelDelay;\\n\\n    mapping(uint256 fileId => EnumerableSet.UintSet jobId) internal _fileJobsIds;\\n}\\n\",\"keccak256\":\"0x1dbde11b7fd584bdd07d54ffe493be13b744aa5f1fad9efd07936a4983ea5eee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052306080523480156200001557600080fd5b50600060a052620000256200002b565b620000df565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007c5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dc5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b60805160a051612ffe620001106000396000505060008181611c8a01528181611cb30152611df70152612ffe6000f3fe6080604052600436106102025760003560e01c806301ffc9a7146102075780630e2a14a31461023c57806310f3cd301461025e578063180aedf3146102805780631dffa3dc146102ad578063248a9ca3146102cd578063288fffac146102fb5780632f2ff15d1461031b57806336568abe1461033b5780633f4ba83a1461035b5780634c0eb9c9146103705780634e71d92d1461039d5780634f1ef286146103b257806352d1902d146103c557806354fd4d50146103da578063572b6c05146103ee578063576d6d4d1461040e5780635b818d361461042e5780635c975abb14610443578063638a0f091461045857806369e8de561461046e57806373c883961461048e5780637da0a877146104bb5780638456cb59146104dd5780638acfae94146104f257806391d1485414610512578063961884aa146105325780639f1b7a3c14610552578063a217fddf14610572578063a39c1d6b14610587578063a7016f70146105a7578063ac9650d8146105c7578063ad3cb1cc146105f4578063c26045f714610632578063ca45a28814610652578063cf756fdf14610672578063d2ef73d914610692578063d402919f146106a5578063d547741f146106ba578063d5fbcf42146106da578063e7aa0194146106f0578063eb07b9c614610703578063f5d548d814610718578063f87422541461072e578063f90b031114610750575b600080fd5b34801561021357600080fd5b506102276102223660046124c6565b610770565b60405190151581526020015b60405180910390f35b34801561024857600080fd5b5061025c610257366004612505565b6107a7565b005b34801561026a57600080fd5b506102736107e2565b6040516102339190612522565b34801561028c57600080fd5b506102a061029b36600461256f565b6107f3565b604051610233919061259e565b3480156102b957600080fd5b5061025c6102c836600461256f565b61088c565b3480156102d957600080fd5b506102ed6102e836600461256f565b610a3d565b604051908152602001610233565b34801561030757600080fd5b5061025c610316366004612505565b610a5d565b34801561032757600080fd5b5061025c6103363660046125ff565b610b04565b34801561034757600080fd5b5061025c6103563660046125ff565b610b26565b34801561036757600080fd5b5061025c610b6e565b34801561037c57600080fd5b5061039061038b36600461256f565b610b8e565b604051610233919061262f565b3480156103a957600080fd5b5061025c610ba8565b61025c6103c0366004612753565b610d7b565b3480156103d157600080fd5b506102ed610d9a565b3480156103e657600080fd5b5060016102ed565b3480156103fa57600080fd5b50610227610409366004612505565b610db7565b34801561041a57600080fd5b5061025c61042936600461256f565b610ddc565b34801561043a57600080fd5b50610273610dfa565b34801561044f57600080fd5b50610227610e06565b34801561046457600080fd5b506102ed600a5481565b34801561047a57600080fd5b5061025c61048936600461256f565b610e1b565b34801561049a57600080fd5b506104ae6104a936600461256f565b610e39565b60405161023391906127f2565b3480156104c757600080fd5b506104d0610e4f565b6040516102339190612878565b3480156104e957600080fd5b5061025c610e5e565b3480156104fe57600080fd5b5061025c61050d3660046128d4565b610e7e565b34801561051e57600080fd5b5061022761052d3660046125ff565b610f6c565b34801561053e57600080fd5b506104ae61054d366004612505565b610fa2565b34801561055e57600080fd5b5061039061056d366004612956565b6111a1565b34801561057e57600080fd5b506102ed600081565b34801561059357600080fd5b506001546104d0906001600160a01b031681565b3480156105b357600080fd5b506102276105c2366004612505565b6112b0565b3480156105d357600080fd5b506105e76105e236600461298b565b6112e8565b60405161023391906129ff565b34801561060057600080fd5b50610625604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516102339190612a63565b34801561063e57600080fd5b5061025c61064d366004612a76565b611446565b34801561065e57600080fd5b506104ae61066d36600461256f565b61165c565b34801561067e57600080fd5b5061025c61068d366004612b9c565b611672565b61025c6106a036600461256f565b6117f4565b3480156106b157600080fd5b506102ed61197b565b3480156106c657600080fd5b5061025c6106d53660046125ff565b611987565b3480156106e657600080fd5b506102ed60025481565b61025c6106fe36600461256f565b6119a3565b34801561070f57600080fd5b506102ed6119b4565b34801561072457600080fd5b506102ed60095481565b34801561073a57600080fd5b506102ed600080516020612fa983398151915281565b34801561075c57600080fd5b5061025c61076b366004612505565b6119c0565b60006001600160e01b03198216637965db0b60e01b14806107a157506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020612fa98339815191526107bf816119fb565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b60606107ee6006611a0c565b905090565b6107fb612442565b600082815260036020818152604092839020835160c081018552815481526001820154928101929092526002810154919390929084019160ff169081111561084557610845612588565b600381111561085657610856612588565b81526003820154602082015260048201546001600160a01b03908116604083015260059092015490911660609091015292915050565b610894611a19565b61089c611a4f565b60008181526003602052604090206108b2611a75565b60048201546001600160a01b039081169116146108e257604051639015f92360e01b815260040160405180910390fd5b6001600282015460ff1660038111156108fd576108fd612588565b1461091b5760405163b969563b60e01b815260040160405180910390fd5b42600a54826003015461092e9190612c03565b111561094d57604051634b40143d60e01b815260040160405180910390fd5b60028101805460ff1916600317905560058101546001600160a01b031660009081526008602052604090206109859060040183611a7f565b506000610990611a75565b6001600160a01b0316826001015460405160006040518083038185875af1925050503d80600081146109de576040519150601f19603f3d011682016040523d82523d6000602084013e6109e3565b606091505b5050905080610a05576040516312171d8360e31b815260040160405180910390fd5b60405183907f68a66a704ceacc38da3f12c63779e47866d9d72e875ec5d43237777adc666d6590600090a25050610a3a611a8b565b50565b600080610a48611a9c565b60009384526020525050604090206001015490565b600080516020612fa9833981519152610a75816119fb565b610a80600683611ac0565b610a9d576040516310eddccd60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260409020805460ff19166002179055610acb600683611ad5565b506040516001600160a01b038316907f18a003b29a5d1b1d6f0603956003fdc00a42ea8db3825c24a6bf532d5bae0bdf90600090a25050565b610b0d82610a3d565b610b16816119fb565b610b208383611aea565b50505050565b610b2e611a75565b6001600160a01b0316816001600160a01b031614610b5f5760405163334bd91960e11b815260040160405180910390fd5b610b698282611b8c565b505050565b600080516020612fa9833981519152610b86816119fb565b610a3a611c22565b6000818152600b602052604090206060906107a190611a0c565b610bb0611a19565b610bb8611a4f565b600060086000610bc6611a75565b6001600160a01b03166001600160a01b031681526020019081526020016000206003015460086000610bf6611a75565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020154610c249190612c16565b905080600003610c47576040516312d37ee560e31b815260040160405180910390fd5b60086000610c53611a75565b6001600160a01b03166001600160a01b031681526020019081526020016000206002015460086000610c83611a75565b6001600160a01b03166001600160a01b03168152602001908152602001600020600301819055506000610cb4611a75565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610cfe576040519150601f19603f3d011682016040523d82523d6000602084013e610d03565b606091505b5050905080610d25576040516312171d8360e31b815260040160405180910390fd5b610d2d611a75565b6001600160a01b03167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a83604051610d6791815260200190565b60405180910390a25050610d79611a8b565b565b610d83611c7f565b610d8c82611d24565b610d968282611d2f565b5050565b6000610da4611dec565b50600080516020612f8983398151915290565b6000610dc1610e4f565b6001600160a01b0316826001600160a01b0316149050919050565b600080516020612fa9833981519152610df4816119fb565b50600a55565b60606107ee6004611a0c565b600080610e11611e35565b5460ff1692915050565b600080516020612fa9833981519152610e33816119fb565b50600955565b610e41612489565b6107a161054d600484611e59565b6000546001600160a01b031690565b600080516020612fa9833981519152610e76816119fb565b610a3a611e65565b600080516020612fa9833981519152610e96816119fb565b610ea1600687611ac0565b15610ebf57604051637668d56b60e01b815260040160405180910390fd5b610eca600487611ead565b50610ed6600687611ead565b506001600160a01b0386166000908152600860205260409020805460ff19166001908117825501610f08858783612cb3565b506001600160a01b0386166000908152600860205260409020600601610f2f838583612cb3565b506040516001600160a01b038716907fcc7ab74a9b11b56487e4c7356320d0be894972f6132884ccd04e04baa284fb7990600090a2505050505050565b600080610f77611a9c565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b610faa612489565b6040805160e0810182526001600160a01b03841680825260009081526008602090815292902060010180549192830191610fe390612c29565b80601f016020809104026020016040519081016040528092919081815260200182805461100f90612c29565b801561105c5780601f106110315761010080835404028352916020019161105c565b820191906000526020600020905b81548152906001019060200180831161103f57829003601f168201915b50505091835250506001600160a01b03841660009081526008602090815260409091205491019060ff16600281111561109757611097612588565b81526001600160a01b03841660008181526008602081815260408084206002810154838801526003810154918701919091529390925290526060909101906110e190600401611ec2565b815260200160086000856001600160a01b03166001600160a01b03168152602001908152602001600020600601805461111990612c29565b80601f016020809104026020016040519081016040528092919081815260200182805461114590612c29565b80156111925780601f1061116757610100808354040283529160200191611192565b820191906000526020600020905b81548152906001019060200180831161117557829003601f168201915b50505050508152509050919050565b6001600160a01b03831660009081526008602052604081206060916004909101906111cb82611ec2565b90508085106111ec57505060408051600081526020810190915290506112a9565b6000816111f98688612c03565b1161120d576112088587612c03565b61120f565b815b9050600061121d8783612c16565b6001600160401b0381111561123457611234612667565b60405190808252806020026020018201604052801561125d578160200160208202803683370190505b509050865b828110156112a2576112748582611e59565b8261127f8a84612c16565b8151811061128f5761128f612d73565b6020908102919091010152600101611262565b5093505050505b9392505050565b600060016001600160a01b03831660009081526008602052604090205460ff1660028111156112e1576112e1612588565b1492915050565b606060006112f4611a75565b6001600160a01b0316336001600160a01b03161461135f5760003661131a601482612c16565b611325928290612d89565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061136f92505050565b6040805160008152602081019091525b9050826001600160401b0381111561138957611389612667565b6040519080825280602002602001820160405280156113bc57816020015b60608152602001906001900390816113a75790505b50915060005b8381101561143e57611419308686848181106113e0576113e0612d73565b90506020028101906113f29190612db3565b8560405160200161140593929190612df9565b604051602081830303815290604052611ecc565b83828151811061142b5761142b612d73565b60209081029190910101526001016113c2565b505092915050565b600160086000611454611a75565b6001600160a01b0316815260208101919091526040016000205460ff16600281111561148257611482612588565b146114a0576040516310eddccd60e01b815260040160405180910390fd5b6114a8611a4f565b60008281526003602052604090206001600282015460ff1660038111156114d1576114d1612588565b146114ef5760405163b969563b60e01b815260040160405180910390fd5b6114f7611a75565b60058201546001600160a01b039081169116146115275760405163d1e62b8560e01b815260040160405180910390fd5b600154815460405163c26045f760e01b81526001600160a01b039092169163c26045f791611559918690600401612e20565b600060405180830381600087803b15801561157357600080fd5b505af1158015611587573d6000803e3d6000fd5b5050505080600101546008600061159c611a75565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020160008282546115ce9190612c03565b90915550611606905083600860006115e4611a75565b6001600160a01b03168152602081019190915260400160002060040190611a7f565b506002818101805460ff19169091179055805483611622611a75565b6001600160a01b03167f41eb9d6336d189fb4bf444a6b5056628c51aa4405c87f7389a107686e805726360405160405180910390a4505050565b611664612489565b6107a161054d600684611e59565b600061167c611f42565b805490915060ff600160401b82041615906001600160401b03166000811580156116a35750825b90506000826001600160401b031660011480156116bf5750303b155b9050811580156116cd575080155b156116eb5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561171457845460ff60401b1916600160401b1785555b61171c611f66565b611724611f66565b61172c611f6e565b611734611f7e565b600080546001600160a01b03808c166001600160a01b031992831617835560018054918b1691909216179055600a87905561177e90600080516020612fa983398151915290611f8e565b611789600089611aea565b506117a2600080516020612fa983398151915289611aea565b5083156117e957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6117fc611a4f565b60095434101561181e5760405162976f7560e21b815260040160405180910390fd5b6118286006611ec2565b600003611848576040516329ed7f2760e01b815260040160405180910390fd5b600060026000815461185990612ebb565b91829055509050600061188461054d6118726006611ec2565b61187c9085612ed4565b600690611e59565b5160008381526003602081905260409091208581553460018201554291015590506118ad611a75565b60008381526003602090815260408083206004810180546001600160a01b03199081166001600160a01b039788161790915560028201805460ff191660011790556005909101805490911694861694909417909355858252600b9052206119149083611fee565b506001600160a01b038116600090815260086020526040902061193a9060040183611fee565b5082827f489e923ac6ba31ef19d89736ac6998000e3fe5b1d1f26174a2c12e02393aa67e833460405161196e929190612ef6565b60405180910390a3505050565b60006107ee6006611ec2565b61199082610a3d565b611999816119fb565b610b208383611b8c565b6119ab611a4f565b610a3a816117f4565b60006107ee6004611ec2565b600080516020612fa98339815191526119d8816119fb565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b610a3a81611a07611a75565b611ffa565b606060006112a983612025565b6000611a23612081565b805490915060011901611a4957604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b611a57610e06565b15610d795760405163d93c066560e01b815260040160405180910390fd5b60006107ee6120a5565b60006112a983836120f7565b6000611a95612081565b6001905550565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b60006112a9836001600160a01b0384166121e0565b60006112a9836001600160a01b0384166120f7565b600080611af5611a9c565b9050611b018484610f6c565b611b82576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611b38611a75565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506107a1565b60009150506107a1565b600080611b97611a9c565b9050611ba38484610f6c565b15611b82576000848152602082815260408083206001600160a01b03871684529091529020805460ff19169055611bd8611a75565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019150506107a1565b611c2a6121f8565b6000611c34611e35565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611c67611a75565b604051611c749190612878565b60405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611d0657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cfa600080516020612f89833981519152546001600160a01b031690565b6001600160a01b031614155b15610d795760405163703e46dd60e11b815260040160405180910390fd5b6000610d96816119fb565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d89575060408051601f3d908101601f19168201909252611d8691810190612f0f565b60015b611db15781604051634c9c8ce360e01b8152600401611da89190612878565b60405180910390fd5b600080516020612f898339815191528114611de257604051632a87526960e21b815260048101829052602401611da8565b610b69838361221d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d795760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b60006112a98383612273565b611e6d611a4f565b6000611e77611e35565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c67611a75565b60006112a9836001600160a01b03841661229d565b60006107a1825490565b6060600080846001600160a01b031684604051611ee99190612f28565b600060405180830381855af49150503d8060008114611f24576040519150601f19603f3d011682016040523d82523d6000602084013e611f29565b606091505b5091509150611f398583836122e7565b95945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b610d7961233a565b611f7661233a565b610d7961235f565b611f8661233a565b610d7961237c565b6000611f98611a9c565b90506000611fa584610a3d565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b60006112a9838361229d565b6120048282610f6c565b610d9657808260405163e2517d3f60e01b8152600401611da8929190612ef6565b60608160000180548060200260200160405190810160405280929190818152602001828054801561207557602002820191906000526020600020905b815481526020019060010190808311612061575b50505050509050919050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b60003660146120b333610db7565b80156120bf5750808210155b156120ef576000366120d18385612c16565b6120dc928290612d89565b6120e591612f44565b60601c9250505090565b339250505090565b60008181526001830160205260408120548015611b8257600061211b600183612c16565b855490915060009061212f90600190612c16565b905080821461219457600086600001828154811061214f5761214f612d73565b906000526020600020015490508087600001848154811061217257612172612d73565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806121a5576121a5612f72565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107a1565b60009081526001919091016020526040902054151590565b612200610e06565b610d7957604051638dfc202b60e01b815260040160405180910390fd5b61222682612384565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561226b57610b698282611ecc565b610d966123e0565b600082600001828154811061228a5761228a612d73565b9060005260206000200154905092915050565b60006122a983836121e0565b6122df575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107a1565b5060006107a1565b6060826122fc576122f7826123ff565b6112a9565b815115801561231357506001600160a01b0384163b155b156123335783604051639996b31560e01b8152600401611da89190612878565b50806112a9565b612342612428565b610d7957604051631afcd79f60e31b815260040160405180910390fd5b61236761233a565b6000612371611e35565b805460ff1916905550565b611a8b61233a565b806001600160a01b03163b6000036123b15780604051634c9c8ce360e01b8152600401611da89190612878565b600080516020612f8983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b3415610d795760405163b398979f60e01b815260040160405180910390fd5b80511561240f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000612432611f42565b54600160401b900460ff16919050565b6040518060c0016040528060008152602001600081526020016000600381111561246e5761246e612588565b81526000602082018190526040820181905260609091015290565b6040805160e08101825260008082526060602083015290918201908152602001600081526020016000815260200160008152602001606081525090565b6000602082840312156124d857600080fd5b81356001600160e01b0319811681146112a957600080fd5b6001600160a01b0381168114610a3a57600080fd5b60006020828403121561251757600080fd5b81356112a9816124f0565b6020808252825182820181905260009190848201906040850190845b818110156125635783516001600160a01b03168352928401929184019160010161253e565b50909695505050505050565b60006020828403121561258157600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b8151815260208083015190820152604082015160c0820190600481106125c6576125c6612588565b6040830152606083810151908301526080808401516001600160a01b039081169184019190915260a09384015116929091019190915290565b6000806040838503121561261257600080fd5b823591506020830135612624816124f0565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156125635783518352928401929184019160010161264b565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561269f5761269f612667565b60405290565b60405160a081016001600160401b038111828210171561269f5761269f612667565b600082601f8301126126d857600080fd5b81356001600160401b03808211156126f2576126f2612667565b604051601f8301601f19908116603f0116810190828211818310171561271a5761271a612667565b8160405283815286602085880101111561273357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561276657600080fd5b8235612771816124f0565b915060208301356001600160401b0381111561278c57600080fd5b612798858286016126c7565b9150509250929050565b60005b838110156127bd5781810151838201526020016127a5565b50506000910152565b600081518084526127de8160208601602086016127a2565b601f01601f19169290920160200192915050565b602080825282516001600160a01b03168282015282015160e060408301526000906128216101008401826127c6565b905060408401516003811061283857612838612588565b8060608501525060608401516080840152608084015160a084015260a084015160c084015260c0840151601f198483030160e0850152611f3982826127c6565b6001600160a01b0391909116815260200190565b60008083601f84011261289e57600080fd5b5081356001600160401b038111156128b557600080fd5b6020830191508360208285010111156128cd57600080fd5b9250929050565b6000806000806000606086880312156128ec57600080fd5b85356128f7816124f0565b945060208601356001600160401b038082111561291357600080fd5b61291f89838a0161288c565b9096509450604088013591508082111561293857600080fd5b506129458882890161288c565b969995985093965092949392505050565b60008060006060848603121561296b57600080fd5b8335612976816124f0565b95602085013595506040909401359392505050565b6000806020838503121561299e57600080fd5b82356001600160401b03808211156129b557600080fd5b818501915085601f8301126129c957600080fd5b8135818111156129d857600080fd5b8660208260051b85010111156129ed57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612a5657603f19888603018452612a448583516127c6565b94509285019290850190600101612a28565b5092979650505050505050565b6020815260006112a960208301846127c6565b60008060408385031215612a8957600080fd5b8235915060208301356001600160401b0380821115612aa757600080fd5b9084019060408287031215612abb57600080fd5b612ac361267d565b823582811115612ad257600080fd5b612ade888286016126c7565b825250602083013582811115612af357600080fd5b929092019160a08388031215612b0857600080fd5b612b106126a5565b8335815260208401356020820152604084013583811115612b3057600080fd5b612b3c898287016126c7565b604083015250606084013583811115612b5457600080fd5b612b60898287016126c7565b606083015250608084013583811115612b7857600080fd5b612b84898287016126c7565b60808301525060208201529396939550929350505050565b60008060008060808587031215612bb257600080fd5b8435612bbd816124f0565b93506020850135612bcd816124f0565b92506040850135612bdd816124f0565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107a1576107a1612bed565b818103818111156107a1576107a1612bed565b600181811c90821680612c3d57607f821691505b602082108103612c5d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b69576000816000526020600020601f850160051c81016020861015612c8c5750805b601f850160051c820191505b81811015612cab57828155600101612c98565b505050505050565b6001600160401b03831115612cca57612cca612667565b612cde83612cd88354612c29565b83612c63565b6000601f841160018114612d125760008515612cfa5750838201355b600019600387901b1c1916600186901b178355612d6c565b600083815260209020601f19861690835b82811015612d435786850135825560209485019460019092019101612d23565b5086821015612d605760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b60008085851115612d9957600080fd5b83861115612da657600080fd5b5050820193919092039150565b6000808335601e19843603018112612dca57600080fd5b8301803591506001600160401b03821115612de457600080fd5b6020019150368190038213156128cd57600080fd5b828482376000838201600081528351612e168183602088016127a2565b0195945050505050565b8281526040602082015260008251604080840152612e4160808401826127c6565b90506020840151603f198483030160608501528051825260208101516020830152604081015160a06040840152612e7b60a08401826127c6565b905060608201518382036060850152612e9482826127c6565b915050608082015191508281036080840152612eb081836127c6565b979650505050505050565b600060018201612ecd57612ecd612bed565b5060010190565b600082612ef157634e487b7160e01b600052601260045260246000fd5b500690565b6001600160a01b03929092168252602082015260400190565b600060208284031215612f2157600080fd5b5051919050565b60008251612f3a8184602087016127a2565b9190910192915050565b6001600160601b0319813581811691601485101561143e5760149490940360031b84901b1690921692915050565b634e487b7160e01b600052603160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220922387d5b829b4db6842bbf9af57d293da13ad0ac487e71813e0a2e1177f6e0964736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106102025760003560e01c806301ffc9a7146102075780630e2a14a31461023c57806310f3cd301461025e578063180aedf3146102805780631dffa3dc146102ad578063248a9ca3146102cd578063288fffac146102fb5780632f2ff15d1461031b57806336568abe1461033b5780633f4ba83a1461035b5780634c0eb9c9146103705780634e71d92d1461039d5780634f1ef286146103b257806352d1902d146103c557806354fd4d50146103da578063572b6c05146103ee578063576d6d4d1461040e5780635b818d361461042e5780635c975abb14610443578063638a0f091461045857806369e8de561461046e57806373c883961461048e5780637da0a877146104bb5780638456cb59146104dd5780638acfae94146104f257806391d1485414610512578063961884aa146105325780639f1b7a3c14610552578063a217fddf14610572578063a39c1d6b14610587578063a7016f70146105a7578063ac9650d8146105c7578063ad3cb1cc146105f4578063c26045f714610632578063ca45a28814610652578063cf756fdf14610672578063d2ef73d914610692578063d402919f146106a5578063d547741f146106ba578063d5fbcf42146106da578063e7aa0194146106f0578063eb07b9c614610703578063f5d548d814610718578063f87422541461072e578063f90b031114610750575b600080fd5b34801561021357600080fd5b506102276102223660046124c6565b610770565b60405190151581526020015b60405180910390f35b34801561024857600080fd5b5061025c610257366004612505565b6107a7565b005b34801561026a57600080fd5b506102736107e2565b6040516102339190612522565b34801561028c57600080fd5b506102a061029b36600461256f565b6107f3565b604051610233919061259e565b3480156102b957600080fd5b5061025c6102c836600461256f565b61088c565b3480156102d957600080fd5b506102ed6102e836600461256f565b610a3d565b604051908152602001610233565b34801561030757600080fd5b5061025c610316366004612505565b610a5d565b34801561032757600080fd5b5061025c6103363660046125ff565b610b04565b34801561034757600080fd5b5061025c6103563660046125ff565b610b26565b34801561036757600080fd5b5061025c610b6e565b34801561037c57600080fd5b5061039061038b36600461256f565b610b8e565b604051610233919061262f565b3480156103a957600080fd5b5061025c610ba8565b61025c6103c0366004612753565b610d7b565b3480156103d157600080fd5b506102ed610d9a565b3480156103e657600080fd5b5060016102ed565b3480156103fa57600080fd5b50610227610409366004612505565b610db7565b34801561041a57600080fd5b5061025c61042936600461256f565b610ddc565b34801561043a57600080fd5b50610273610dfa565b34801561044f57600080fd5b50610227610e06565b34801561046457600080fd5b506102ed600a5481565b34801561047a57600080fd5b5061025c61048936600461256f565b610e1b565b34801561049a57600080fd5b506104ae6104a936600461256f565b610e39565b60405161023391906127f2565b3480156104c757600080fd5b506104d0610e4f565b6040516102339190612878565b3480156104e957600080fd5b5061025c610e5e565b3480156104fe57600080fd5b5061025c61050d3660046128d4565b610e7e565b34801561051e57600080fd5b5061022761052d3660046125ff565b610f6c565b34801561053e57600080fd5b506104ae61054d366004612505565b610fa2565b34801561055e57600080fd5b5061039061056d366004612956565b6111a1565b34801561057e57600080fd5b506102ed600081565b34801561059357600080fd5b506001546104d0906001600160a01b031681565b3480156105b357600080fd5b506102276105c2366004612505565b6112b0565b3480156105d357600080fd5b506105e76105e236600461298b565b6112e8565b60405161023391906129ff565b34801561060057600080fd5b50610625604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516102339190612a63565b34801561063e57600080fd5b5061025c61064d366004612a76565b611446565b34801561065e57600080fd5b506104ae61066d36600461256f565b61165c565b34801561067e57600080fd5b5061025c61068d366004612b9c565b611672565b61025c6106a036600461256f565b6117f4565b3480156106b157600080fd5b506102ed61197b565b3480156106c657600080fd5b5061025c6106d53660046125ff565b611987565b3480156106e657600080fd5b506102ed60025481565b61025c6106fe36600461256f565b6119a3565b34801561070f57600080fd5b506102ed6119b4565b34801561072457600080fd5b506102ed60095481565b34801561073a57600080fd5b506102ed600080516020612fa983398151915281565b34801561075c57600080fd5b5061025c61076b366004612505565b6119c0565b60006001600160e01b03198216637965db0b60e01b14806107a157506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080516020612fa98339815191526107bf816119fb565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b60606107ee6006611a0c565b905090565b6107fb612442565b600082815260036020818152604092839020835160c081018552815481526001820154928101929092526002810154919390929084019160ff169081111561084557610845612588565b600381111561085657610856612588565b81526003820154602082015260048201546001600160a01b03908116604083015260059092015490911660609091015292915050565b610894611a19565b61089c611a4f565b60008181526003602052604090206108b2611a75565b60048201546001600160a01b039081169116146108e257604051639015f92360e01b815260040160405180910390fd5b6001600282015460ff1660038111156108fd576108fd612588565b1461091b5760405163b969563b60e01b815260040160405180910390fd5b42600a54826003015461092e9190612c03565b111561094d57604051634b40143d60e01b815260040160405180910390fd5b60028101805460ff1916600317905560058101546001600160a01b031660009081526008602052604090206109859060040183611a7f565b506000610990611a75565b6001600160a01b0316826001015460405160006040518083038185875af1925050503d80600081146109de576040519150601f19603f3d011682016040523d82523d6000602084013e6109e3565b606091505b5050905080610a05576040516312171d8360e31b815260040160405180910390fd5b60405183907f68a66a704ceacc38da3f12c63779e47866d9d72e875ec5d43237777adc666d6590600090a25050610a3a611a8b565b50565b600080610a48611a9c565b60009384526020525050604090206001015490565b600080516020612fa9833981519152610a75816119fb565b610a80600683611ac0565b610a9d576040516310eddccd60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600860205260409020805460ff19166002179055610acb600683611ad5565b506040516001600160a01b038316907f18a003b29a5d1b1d6f0603956003fdc00a42ea8db3825c24a6bf532d5bae0bdf90600090a25050565b610b0d82610a3d565b610b16816119fb565b610b208383611aea565b50505050565b610b2e611a75565b6001600160a01b0316816001600160a01b031614610b5f5760405163334bd91960e11b815260040160405180910390fd5b610b698282611b8c565b505050565b600080516020612fa9833981519152610b86816119fb565b610a3a611c22565b6000818152600b602052604090206060906107a190611a0c565b610bb0611a19565b610bb8611a4f565b600060086000610bc6611a75565b6001600160a01b03166001600160a01b031681526020019081526020016000206003015460086000610bf6611a75565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020154610c249190612c16565b905080600003610c47576040516312d37ee560e31b815260040160405180910390fd5b60086000610c53611a75565b6001600160a01b03166001600160a01b031681526020019081526020016000206002015460086000610c83611a75565b6001600160a01b03166001600160a01b03168152602001908152602001600020600301819055506000610cb4611a75565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610cfe576040519150601f19603f3d011682016040523d82523d6000602084013e610d03565b606091505b5050905080610d25576040516312171d8360e31b815260040160405180910390fd5b610d2d611a75565b6001600160a01b03167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a83604051610d6791815260200190565b60405180910390a25050610d79611a8b565b565b610d83611c7f565b610d8c82611d24565b610d968282611d2f565b5050565b6000610da4611dec565b50600080516020612f8983398151915290565b6000610dc1610e4f565b6001600160a01b0316826001600160a01b0316149050919050565b600080516020612fa9833981519152610df4816119fb565b50600a55565b60606107ee6004611a0c565b600080610e11611e35565b5460ff1692915050565b600080516020612fa9833981519152610e33816119fb565b50600955565b610e41612489565b6107a161054d600484611e59565b6000546001600160a01b031690565b600080516020612fa9833981519152610e76816119fb565b610a3a611e65565b600080516020612fa9833981519152610e96816119fb565b610ea1600687611ac0565b15610ebf57604051637668d56b60e01b815260040160405180910390fd5b610eca600487611ead565b50610ed6600687611ead565b506001600160a01b0386166000908152600860205260409020805460ff19166001908117825501610f08858783612cb3565b506001600160a01b0386166000908152600860205260409020600601610f2f838583612cb3565b506040516001600160a01b038716907fcc7ab74a9b11b56487e4c7356320d0be894972f6132884ccd04e04baa284fb7990600090a2505050505050565b600080610f77611a9c565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b610faa612489565b6040805160e0810182526001600160a01b03841680825260009081526008602090815292902060010180549192830191610fe390612c29565b80601f016020809104026020016040519081016040528092919081815260200182805461100f90612c29565b801561105c5780601f106110315761010080835404028352916020019161105c565b820191906000526020600020905b81548152906001019060200180831161103f57829003601f168201915b50505091835250506001600160a01b03841660009081526008602090815260409091205491019060ff16600281111561109757611097612588565b81526001600160a01b03841660008181526008602081815260408084206002810154838801526003810154918701919091529390925290526060909101906110e190600401611ec2565b815260200160086000856001600160a01b03166001600160a01b03168152602001908152602001600020600601805461111990612c29565b80601f016020809104026020016040519081016040528092919081815260200182805461114590612c29565b80156111925780601f1061116757610100808354040283529160200191611192565b820191906000526020600020905b81548152906001019060200180831161117557829003601f168201915b50505050508152509050919050565b6001600160a01b03831660009081526008602052604081206060916004909101906111cb82611ec2565b90508085106111ec57505060408051600081526020810190915290506112a9565b6000816111f98688612c03565b1161120d576112088587612c03565b61120f565b815b9050600061121d8783612c16565b6001600160401b0381111561123457611234612667565b60405190808252806020026020018201604052801561125d578160200160208202803683370190505b509050865b828110156112a2576112748582611e59565b8261127f8a84612c16565b8151811061128f5761128f612d73565b6020908102919091010152600101611262565b5093505050505b9392505050565b600060016001600160a01b03831660009081526008602052604090205460ff1660028111156112e1576112e1612588565b1492915050565b606060006112f4611a75565b6001600160a01b0316336001600160a01b03161461135f5760003661131a601482612c16565b611325928290612d89565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061136f92505050565b6040805160008152602081019091525b9050826001600160401b0381111561138957611389612667565b6040519080825280602002602001820160405280156113bc57816020015b60608152602001906001900390816113a75790505b50915060005b8381101561143e57611419308686848181106113e0576113e0612d73565b90506020028101906113f29190612db3565b8560405160200161140593929190612df9565b604051602081830303815290604052611ecc565b83828151811061142b5761142b612d73565b60209081029190910101526001016113c2565b505092915050565b600160086000611454611a75565b6001600160a01b0316815260208101919091526040016000205460ff16600281111561148257611482612588565b146114a0576040516310eddccd60e01b815260040160405180910390fd5b6114a8611a4f565b60008281526003602052604090206001600282015460ff1660038111156114d1576114d1612588565b146114ef5760405163b969563b60e01b815260040160405180910390fd5b6114f7611a75565b60058201546001600160a01b039081169116146115275760405163d1e62b8560e01b815260040160405180910390fd5b600154815460405163c26045f760e01b81526001600160a01b039092169163c26045f791611559918690600401612e20565b600060405180830381600087803b15801561157357600080fd5b505af1158015611587573d6000803e3d6000fd5b5050505080600101546008600061159c611a75565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020160008282546115ce9190612c03565b90915550611606905083600860006115e4611a75565b6001600160a01b03168152602081019190915260400160002060040190611a7f565b506002818101805460ff19169091179055805483611622611a75565b6001600160a01b03167f41eb9d6336d189fb4bf444a6b5056628c51aa4405c87f7389a107686e805726360405160405180910390a4505050565b611664612489565b6107a161054d600684611e59565b600061167c611f42565b805490915060ff600160401b82041615906001600160401b03166000811580156116a35750825b90506000826001600160401b031660011480156116bf5750303b155b9050811580156116cd575080155b156116eb5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561171457845460ff60401b1916600160401b1785555b61171c611f66565b611724611f66565b61172c611f6e565b611734611f7e565b600080546001600160a01b03808c166001600160a01b031992831617835560018054918b1691909216179055600a87905561177e90600080516020612fa983398151915290611f8e565b611789600089611aea565b506117a2600080516020612fa983398151915289611aea565b5083156117e957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6117fc611a4f565b60095434101561181e5760405162976f7560e21b815260040160405180910390fd5b6118286006611ec2565b600003611848576040516329ed7f2760e01b815260040160405180910390fd5b600060026000815461185990612ebb565b91829055509050600061188461054d6118726006611ec2565b61187c9085612ed4565b600690611e59565b5160008381526003602081905260409091208581553460018201554291015590506118ad611a75565b60008381526003602090815260408083206004810180546001600160a01b03199081166001600160a01b039788161790915560028201805460ff191660011790556005909101805490911694861694909417909355858252600b9052206119149083611fee565b506001600160a01b038116600090815260086020526040902061193a9060040183611fee565b5082827f489e923ac6ba31ef19d89736ac6998000e3fe5b1d1f26174a2c12e02393aa67e833460405161196e929190612ef6565b60405180910390a3505050565b60006107ee6006611ec2565b61199082610a3d565b611999816119fb565b610b208383611b8c565b6119ab611a4f565b610a3a816117f4565b60006107ee6004611ec2565b600080516020612fa98339815191526119d8816119fb565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b610a3a81611a07611a75565b611ffa565b606060006112a983612025565b6000611a23612081565b805490915060011901611a4957604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b611a57610e06565b15610d795760405163d93c066560e01b815260040160405180910390fd5b60006107ee6120a5565b60006112a983836120f7565b6000611a95612081565b6001905550565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b60006112a9836001600160a01b0384166121e0565b60006112a9836001600160a01b0384166120f7565b600080611af5611a9c565b9050611b018484610f6c565b611b82576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611b38611a75565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506107a1565b60009150506107a1565b600080611b97611a9c565b9050611ba38484610f6c565b15611b82576000848152602082815260408083206001600160a01b03871684529091529020805460ff19169055611bd8611a75565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019150506107a1565b611c2a6121f8565b6000611c34611e35565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611c67611a75565b604051611c749190612878565b60405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611d0657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cfa600080516020612f89833981519152546001600160a01b031690565b6001600160a01b031614155b15610d795760405163703e46dd60e11b815260040160405180910390fd5b6000610d96816119fb565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d89575060408051601f3d908101601f19168201909252611d8691810190612f0f565b60015b611db15781604051634c9c8ce360e01b8152600401611da89190612878565b60405180910390fd5b600080516020612f898339815191528114611de257604051632a87526960e21b815260048101829052602401611da8565b610b69838361221d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d795760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b60006112a98383612273565b611e6d611a4f565b6000611e77611e35565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c67611a75565b60006112a9836001600160a01b03841661229d565b60006107a1825490565b6060600080846001600160a01b031684604051611ee99190612f28565b600060405180830381855af49150503d8060008114611f24576040519150601f19603f3d011682016040523d82523d6000602084013e611f29565b606091505b5091509150611f398583836122e7565b95945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b610d7961233a565b611f7661233a565b610d7961235f565b611f8661233a565b610d7961237c565b6000611f98611a9c565b90506000611fa584610a3d565b600085815260208490526040808220600101869055519192508491839187917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a450505050565b60006112a9838361229d565b6120048282610f6c565b610d9657808260405163e2517d3f60e01b8152600401611da8929190612ef6565b60608160000180548060200260200160405190810160405280929190818152602001828054801561207557602002820191906000526020600020905b815481526020019060010190808311612061575b50505050509050919050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b60003660146120b333610db7565b80156120bf5750808210155b156120ef576000366120d18385612c16565b6120dc928290612d89565b6120e591612f44565b60601c9250505090565b339250505090565b60008181526001830160205260408120548015611b8257600061211b600183612c16565b855490915060009061212f90600190612c16565b905080821461219457600086600001828154811061214f5761214f612d73565b906000526020600020015490508087600001848154811061217257612172612d73565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806121a5576121a5612f72565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107a1565b60009081526001919091016020526040902054151590565b612200610e06565b610d7957604051638dfc202b60e01b815260040160405180910390fd5b61222682612384565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561226b57610b698282611ecc565b610d966123e0565b600082600001828154811061228a5761228a612d73565b9060005260206000200154905092915050565b60006122a983836121e0565b6122df575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107a1565b5060006107a1565b6060826122fc576122f7826123ff565b6112a9565b815115801561231357506001600160a01b0384163b155b156123335783604051639996b31560e01b8152600401611da89190612878565b50806112a9565b612342612428565b610d7957604051631afcd79f60e31b815260040160405180910390fd5b61236761233a565b6000612371611e35565b805460ff1916905550565b611a8b61233a565b806001600160a01b03163b6000036123b15780604051634c9c8ce360e01b8152600401611da89190612878565b600080516020612f8983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b3415610d795760405163b398979f60e01b815260040160405180910390fd5b80511561240f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000612432611f42565b54600160401b900460ff16919050565b6040518060c0016040528060008152602001600081526020016000600381111561246e5761246e612588565b81526000602082018190526040820181905260609091015290565b6040805160e08101825260008082526060602083015290918201908152602001600081526020016000815260200160008152602001606081525090565b6000602082840312156124d857600080fd5b81356001600160e01b0319811681146112a957600080fd5b6001600160a01b0381168114610a3a57600080fd5b60006020828403121561251757600080fd5b81356112a9816124f0565b6020808252825182820181905260009190848201906040850190845b818110156125635783516001600160a01b03168352928401929184019160010161253e565b50909695505050505050565b60006020828403121561258157600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b8151815260208083015190820152604082015160c0820190600481106125c6576125c6612588565b6040830152606083810151908301526080808401516001600160a01b039081169184019190915260a09384015116929091019190915290565b6000806040838503121561261257600080fd5b823591506020830135612624816124f0565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156125635783518352928401929184019160010161264b565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561269f5761269f612667565b60405290565b60405160a081016001600160401b038111828210171561269f5761269f612667565b600082601f8301126126d857600080fd5b81356001600160401b03808211156126f2576126f2612667565b604051601f8301601f19908116603f0116810190828211818310171561271a5761271a612667565b8160405283815286602085880101111561273357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561276657600080fd5b8235612771816124f0565b915060208301356001600160401b0381111561278c57600080fd5b612798858286016126c7565b9150509250929050565b60005b838110156127bd5781810151838201526020016127a5565b50506000910152565b600081518084526127de8160208601602086016127a2565b601f01601f19169290920160200192915050565b602080825282516001600160a01b03168282015282015160e060408301526000906128216101008401826127c6565b905060408401516003811061283857612838612588565b8060608501525060608401516080840152608084015160a084015260a084015160c084015260c0840151601f198483030160e0850152611f3982826127c6565b6001600160a01b0391909116815260200190565b60008083601f84011261289e57600080fd5b5081356001600160401b038111156128b557600080fd5b6020830191508360208285010111156128cd57600080fd5b9250929050565b6000806000806000606086880312156128ec57600080fd5b85356128f7816124f0565b945060208601356001600160401b038082111561291357600080fd5b61291f89838a0161288c565b9096509450604088013591508082111561293857600080fd5b506129458882890161288c565b969995985093965092949392505050565b60008060006060848603121561296b57600080fd5b8335612976816124f0565b95602085013595506040909401359392505050565b6000806020838503121561299e57600080fd5b82356001600160401b03808211156129b557600080fd5b818501915085601f8301126129c957600080fd5b8135818111156129d857600080fd5b8660208260051b85010111156129ed57600080fd5b60209290920196919550909350505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612a5657603f19888603018452612a448583516127c6565b94509285019290850190600101612a28565b5092979650505050505050565b6020815260006112a960208301846127c6565b60008060408385031215612a8957600080fd5b8235915060208301356001600160401b0380821115612aa757600080fd5b9084019060408287031215612abb57600080fd5b612ac361267d565b823582811115612ad257600080fd5b612ade888286016126c7565b825250602083013582811115612af357600080fd5b929092019160a08388031215612b0857600080fd5b612b106126a5565b8335815260208401356020820152604084013583811115612b3057600080fd5b612b3c898287016126c7565b604083015250606084013583811115612b5457600080fd5b612b60898287016126c7565b606083015250608084013583811115612b7857600080fd5b612b84898287016126c7565b60808301525060208201529396939550929350505050565b60008060008060808587031215612bb257600080fd5b8435612bbd816124f0565b93506020850135612bcd816124f0565b92506040850135612bdd816124f0565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107a1576107a1612bed565b818103818111156107a1576107a1612bed565b600181811c90821680612c3d57607f821691505b602082108103612c5d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b69576000816000526020600020601f850160051c81016020861015612c8c5750805b601f850160051c820191505b81811015612cab57828155600101612c98565b505050505050565b6001600160401b03831115612cca57612cca612667565b612cde83612cd88354612c29565b83612c63565b6000601f841160018114612d125760008515612cfa5750838201355b600019600387901b1c1916600186901b178355612d6c565b600083815260209020601f19861690835b82811015612d435786850135825560209485019460019092019101612d23565b5086821015612d605760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b60008085851115612d9957600080fd5b83861115612da657600080fd5b5050820193919092039150565b6000808335601e19843603018112612dca57600080fd5b8301803591506001600160401b03821115612de457600080fd5b6020019150368190038213156128cd57600080fd5b828482376000838201600081528351612e168183602088016127a2565b0195945050505050565b8281526040602082015260008251604080840152612e4160808401826127c6565b90506020840151603f198483030160608501528051825260208101516020830152604081015160a06040840152612e7b60a08401826127c6565b905060608201518382036060850152612e9482826127c6565b915050608082015191508281036080840152612eb081836127c6565b979650505050505050565b600060018201612ecd57612ecd612bed565b5060010190565b600082612ef157634e487b7160e01b600052601260045260246000fd5b500690565b6001600160a01b03929092168252602082015260400190565b600060208284031215612f2157600080fd5b5051919050565b60008251612f3a8184602087016127a2565b9190910192915050565b6001600160601b0319813581811691601485101561143e5760149490940360031b84901b1690921692915050565b634e487b7160e01b600052603160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220922387d5b829b4db6842bbf9af57d293da13ad0ac487e71813e0a2e1177f6e0964736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Claimed(address,uint256)": {
        "params": {
          "amount": "amount claimed",
          "teeAddress": "address of the tee"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "JobCanceled(uint256)": {
        "params": {
          "jobId": "id of the job"
        }
      },
      "JobSubmitted(uint256,uint256,address,uint256)": {
        "params": {
          "bidAmount": "bid amount",
          "fileId": "id of the file",
          "jobId": "id of the job",
          "teeAddress": "address of the tee"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "ProofAdded(address,uint256,uint256)": {
        "params": {
          "attestator": "address of the attestator",
          "fileId": "id of the file",
          "jobId": "id of the job"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TeeAdded(address)": {
        "params": {
          "teeAddress": "address of the tee"
        }
      },
      "TeeRemoved(address)": {
        "params": {
          "teeAddress": "address of the tee"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "activeTeeListAt(uint256)": {
        "params": {
          "index": "index of the tee"
        },
        "returns": {
          "_0": "TeeDetails                       details of the tee"
        }
      },
      "addProof(uint256,(bytes,(uint256,uint256,string,string,string)))": {
        "params": {
          "jobId": "id of the job",
          "proof": "proof for the file"
        }
      },
      "addTee(address,string,string)": {
        "params": {
          "publicKey": "public key of the tee",
          "teeAddress": "address of the tee",
          "url": "url of the tee"
        }
      },
      "cancelJob(uint256)": {
        "params": {
          "jobId": "id of the job"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,uint256)": {
        "params": {
          "dataRegistryAddress": "address of the data registry contract",
          "initialCancelDelay": "initial cancel delay",
          "ownerAddress": "address of the owner",
          "trustedForwarderAddress": "address of the trusted forwarder"
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "jobs(uint256)": {
        "params": {
          "jobId": "id of the job"
        },
        "returns": {
          "_0": "Job                              details of the job"
        }
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeTee(address)": {
        "params": {
          "teeAddress": "address of the tee"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "requestContributionProof(uint256)": {
        "params": {
          "fileId": "id of the file"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "submitJob(uint256)": {
        "params": {
          "fileId": "id of the file"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "teeJobIdsPaginated(address,uint256,uint256)": {
        "params": {
          "limit": "limit",
          "start": "start index",
          "teeAddress": "address of the tee"
        },
        "returns": {
          "_0": "uint256[]                        list of job ids"
        }
      },
      "teeListAt(uint256)": {
        "params": {
          "index": "index of the tee"
        },
        "returns": {
          "_0": "TeeDetails                       details of the tee"
        }
      },
      "tees(address)": {
        "params": {
          "teeAddress": "address of the tee"
        },
        "returns": {
          "_0": "TeeDetails                       details of the tee"
        }
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      },
      "updateCancelDelay(uint256)": {
        "params": {
          "newCancelDelay": "new cancel delay"
        }
      },
      "updateDataRegistry(address)": {
        "params": {
          "newDataRegistry": "new file registry"
        }
      },
      "updateTeeFee(uint256)": {
        "params": {
          "newTeeFee": "new fee"
        }
      },
      "updateTrustedForwarder(address)": {
        "params": {
          "trustedForwarderAddress": "address of the trusted forwarder"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(address,uint256)": {
        "notice": "Triggered when a claim has been made"
      },
      "JobCanceled(uint256)": {
        "notice": "Triggered when a job has been cancelled"
      },
      "JobSubmitted(uint256,uint256,address,uint256)": {
        "notice": "Triggered when a job has been submitted"
      },
      "ProofAdded(address,uint256,uint256)": {
        "notice": "Triggered when a proof has been added"
      },
      "TeeAdded(address)": {
        "notice": "Triggered when a tee has been added"
      },
      "TeeRemoved(address)": {
        "notice": "Triggered when a tee has been removed"
      }
    },
    "kind": "user",
    "methods": {
      "activeTeeList()": {
        "notice": "Returns the list of active tees"
      },
      "activeTeeListAt(uint256)": {
        "notice": "Returns the details of the active tee at the given index"
      },
      "activeTeesCount()": {
        "notice": "Returns the number of active tees"
      },
      "addProof(uint256,(bytes,(uint256,uint256,string,string,string)))": {
        "notice": "Adds a proof to the file"
      },
      "addTee(address,string,string)": {
        "notice": "Adds a tee to the pool"
      },
      "cancelJob(uint256)": {
        "notice": "Cancels a contribution proof request"
      },
      "claim()": {
        "notice": "method used by tees for claiming their rewards"
      },
      "fileJobIds(uint256)": {
        "notice": "Returns a list of job ids for the given file"
      },
      "initialize(address,address,address,uint256)": {
        "notice": "Initialize the contract"
      },
      "jobs(uint256)": {
        "notice": "Returns the details of the job"
      },
      "removeTee(address)": {
        "notice": "Removes a tee from the pool"
      },
      "requestContributionProof(uint256)": {
        "notice": "Adds a contribution proof request"
      },
      "submitJob(uint256)": {
        "notice": "Submits a contribution proof request"
      },
      "teeJobIdsPaginated(address,uint256,uint256)": {
        "notice": "Returns a paginated list of jobs for the given tee"
      },
      "teeList()": {
        "notice": "Returns the list of tees"
      },
      "teeListAt(uint256)": {
        "notice": "Returns the details of the tee at the given index"
      },
      "tees(address)": {
        "notice": "Returns the details of the tee"
      },
      "teesCount()": {
        "notice": "Returns the number of tees"
      },
      "updateCancelDelay(uint256)": {
        "notice": "Updates the cancel delay"
      },
      "updateDataRegistry(address)": {
        "notice": "Updates the file registry"
      },
      "updateTeeFee(uint256)": {
        "notice": "Updates the tee fee"
      },
      "updateTrustedForwarder(address)": {
        "notice": "Update the trusted forwarder"
      },
      "version()": {
        "notice": "Returns the version of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35229,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 35233,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "dataRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDataRegistry)12206"
      },
      {
        "astId": 35236,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "jobsCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 35241,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_jobs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Job)35023_storage)"
      },
      {
        "astId": 35244,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_teeList",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)10940_storage"
      },
      {
        "astId": 35247,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_activeTeeList",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)10940_storage"
      },
      {
        "astId": 35252,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_tees",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Tee)35038_storage)"
      },
      {
        "astId": 35255,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "teeFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 35258,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "cancelDelay",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 35263,
        "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
        "label": "_fileJobsIds",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(UintSet)11097_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDataRegistry)12206": {
        "encoding": "inplace",
        "label": "contract IDataRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(JobStatus)35009": {
        "encoding": "inplace",
        "label": "enum ITeePool.JobStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TeeStatus)35004": {
        "encoding": "inplace",
        "label": "enum ITeePool.TeeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Tee)35038_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITeePool.Tee)",
        "numberOfBytes": "32",
        "value": "t_struct(Tee)35038_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Job)35023_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITeePool.Job)",
        "numberOfBytes": "32",
        "value": "t_struct(Job)35023_storage"
      },
      "t_mapping(t_uint256,t_struct(UintSet)11097_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)11097_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)10940_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 10939,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10625_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Job)35023_storage": {
        "encoding": "inplace",
        "label": "struct ITeePool.Job",
        "members": [
          {
            "astId": 35011,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "fileId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 35013,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "bidAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 35016,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(JobStatus)35009"
          },
          {
            "astId": 35018,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "addedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 35020,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 35022,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "teeAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)10625_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10620,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10624,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tee)35038_storage": {
        "encoding": "inplace",
        "label": "struct ITeePool.Tee",
        "members": [
          {
            "astId": 35026,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TeeStatus)35004"
          },
          {
            "astId": 35028,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "url",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 35030,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 35032,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "withdrawnAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 35035,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "jobIdsList",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(UintSet)11097_storage"
          },
          {
            "astId": 35037,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "publicKey",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UintSet)11097_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 11096,
            "contract": "contracts/teePool/TeePoolImplementation.sol:TeePoolImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10625_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}