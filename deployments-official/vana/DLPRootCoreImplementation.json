{
  "address": "0x42455FbdC2B729f2e84765683B0b547b6941c2e9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CheckpointUnorderedInsertion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DlpAddressCannotBeChanged",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochDlpScoreAlreadySaved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochRewardsAlreadyDistributed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDlpStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStakersPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LastEpochMustBeFinalised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDlpOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotStakeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeAlreadyClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeAlreadyWithdrawn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeWithdrawalTooEarly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDlpEligibilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "DlpEligibilityThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakersPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "iconUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "DlpRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IDLPRootCore.DlpStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "DlpStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDlpSubEligibilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "DlpSubEligibilityThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakersPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "iconUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "DlpUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "DlpVerificationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDlpStakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "MaxDlpStakersPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDlpRegistrationStake",
          "type": "uint256"
        }
      ],
      "name": "MinDlpRegistrationStakeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDlpStakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "MinDlpStakersPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "MinStakeAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DLP_ROOT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NEW_MULTIPLIER_EPOCH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addDlpStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "deregisterDlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpEligibilityThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        }
      ],
      "name": "dlpEpochStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        }
      ],
      "name": "dlpIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dlpName",
          "type": "string"
        }
      ],
      "name": "dlpNameToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpRoot",
      "outputs": [
        {
          "internalType": "contract IDLPRoot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpSubEligibilityThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        }
      ],
      "name": "dlps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentageEpoch",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "enum IDLPRootCore.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct IDLPRootCore.DlpInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dlpAddress",
          "type": "address"
        }
      ],
      "name": "dlpsByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentageEpoch",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "enum IDLPRootCore.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct IDLPRootCore.DlpInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dlpName",
          "type": "string"
        }
      ],
      "name": "dlpsByName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentageEpoch",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "enum IDLPRootCore.DlpStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "registrationBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct IDLPRootCore.DlpInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dlpsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibleDlpsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "eligibleDlpsListAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibleDlpsListCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibleDlpsListValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dlpRootAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDlpStakersPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startDlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDlpId",
          "type": "uint256"
        }
      ],
      "name": "migrateDlpData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startDlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDlpId",
          "type": "uint256"
        }
      ],
      "name": "migrateLastEpochDlpStakeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateParametersData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDlpRegistrationStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDlpStakersPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IDLPRootCore.DlpRegistration",
          "name": "registrationInfo",
          "type": "tuple"
        }
      ],
      "name": "registerDlp",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeDlpStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "dlpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakersPercentage",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "iconUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IDLPRootCore.DlpRegistration",
          "name": "dlpUpdateInfo",
          "type": "tuple"
        }
      ],
      "name": "updateDlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDlpSubEligibilityThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDlpEligibilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateDlpEligibilityThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDlpRootAddress",
          "type": "address"
        }
      ],
      "name": "updateDlpRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDlpStakersPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newMaxDlpStakersPercentage",
          "type": "uint256"
        }
      ],
      "name": "updateDlpStakersPercentages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dlpId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        }
      ],
      "name": "updateDlpVerification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDlpRegistrationStake",
          "type": "uint256"
        }
      ],
      "name": "updateMinDlpRegistrationStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe594569f0381fb622c613d15bcc916231fe0a37be7527bc35b19dd6176c026ee",
  "receipt": {
    "to": null,
    "from": "0x2AC93684679a5bdA03C6160def908CdB8D46792f",
    "contractAddress": "0x42455FbdC2B729f2e84765683B0b547b6941c2e9",
    "transactionIndex": 5,
    "gasUsed": "4336404",
    "logsBloom": "0x
    "blockHash": "0x44bba06821e64665e1fe46d0bfa6391e5b71fb6f7d48c130897e0b350496799c",
    "transactionHash": "0xe594569f0381fb622c613d15bcc916231fe0a37be7527bc35b19dd6176c026ee",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 2106686,
        "transactionHash": "0xe594569f0381fb622c613d15bcc916231fe0a37be7527bc35b19dd6176c026ee",
        "address": "0x42455FbdC2B729f2e84765683B0b547b6941c2e9",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x44bba06821e64665e1fe46d0bfa6391e5b71fb6f7d48c130897e0b350496799c"
      }
    ],
    "blockNumber": 2106686,
    "cumulativeGasUsed": "5995791",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1f3018f734273939cf39145cdecb8e9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DlpAddressCannotBeChanged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochDlpScoreAlreadySaved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochRewardsAlreadyDistributed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDlpStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakersPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastEpochMustBeFinalised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDlpOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStakeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeWithdrawalTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDlpEligibilityThreshold\",\"type\":\"uint256\"}],\"name\":\"DlpEligibilityThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"DlpRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IDLPRootCore.DlpStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"DlpStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDlpSubEligibilityThreshold\",\"type\":\"uint256\"}],\"name\":\"DlpSubEligibilityThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"DlpUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"DlpVerificationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDlpStakersPercentage\",\"type\":\"uint256\"}],\"name\":\"MaxDlpStakersPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDlpRegistrationStake\",\"type\":\"uint256\"}],\"name\":\"MinDlpRegistrationStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDlpStakersPercentage\",\"type\":\"uint256\"}],\"name\":\"MinDlpStakersPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStakeAmount\",\"type\":\"uint256\"}],\"name\":\"MinStakeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DLP_ROOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEW_MULTIPLIER_EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addDlpStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"deregisterDlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpEligibilityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"dlpEpochStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"}],\"name\":\"dlpIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dlpName\",\"type\":\"string\"}],\"name\":\"dlpNameToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRoot\",\"outputs\":[{\"internalType\":\"contract IDLPRoot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpSubEligibilityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"}],\"name\":\"dlps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentageEpoch\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum IDLPRootCore.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct IDLPRootCore.DlpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"}],\"name\":\"dlpsByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentageEpoch\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum IDLPRootCore.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct IDLPRootCore.DlpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dlpName\",\"type\":\"string\"}],\"name\":\"dlpsByName\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentageEpoch\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum IDLPRootCore.DlpStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"registrationBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"internalType\":\"struct IDLPRootCore.DlpInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDlpsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"eligibleDlpsListAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDlpsListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDlpsListValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dlpRootAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDlpStakersPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDlpId\",\"type\":\"uint256\"}],\"name\":\"migrateDlpData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDlpId\",\"type\":\"uint256\"}],\"name\":\"migrateLastEpochDlpStakeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateParametersData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDlpRegistrationStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDlpStakersPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IDLPRootCore.DlpRegistration\",\"name\":\"registrationInfo\",\"type\":\"tuple\"}],\"name\":\"registerDlp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeDlpStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dlpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iconUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IDLPRootCore.DlpRegistration\",\"name\":\"dlpUpdateInfo\",\"type\":\"tuple\"}],\"name\":\"updateDlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDlpSubEligibilityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDlpEligibilityThreshold\",\"type\":\"uint256\"}],\"name\":\"updateDlpEligibilityThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDlpRootAddress\",\"type\":\"address\"}],\"name\":\"updateDlpRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDlpStakersPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxDlpStakersPercentage\",\"type\":\"uint256\"}],\"name\":\"updateDlpStakersPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dlpId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"name\":\"updateDlpVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDlpRegistrationStake\",\"type\":\"uint256\"}],\"name\":\"updateMinDlpRegistrationStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deregisterDlp(uint256)\":{\"details\":\"Only owner can deregister, must be in valid status\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateDlp(uint256,(address,address,address,uint256,string,string,string,string))\":{\"details\":\"Only DLP owner can update\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deregisterDlp(uint256)\":{\"notice\":\"Deregisters a DLP\"},\"dlps(uint256)\":{\"notice\":\"Gets DLP information including current stake and status\"},\"registerDlp((address,address,address,uint256,string,string,string,string))\":{\"notice\":\"Registers a new DLP with initial stake\"},\"updateDlp(uint256,(address,address,address,uint256,string,string,string,string))\":{\"notice\":\"Updates DLP information\"},\"updateDlpEligibilityThresholds(uint256,uint256)\":{\"notice\":\"Updates eligibility thresholds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rootCore/DLPRootCoreImplementation.sol\":\"DLPRootCoreImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/root/interfaces/IDLPRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\nimport {IDLPRootTreasury} from \\\"../../rootTreasury/interfaces/IDLPRootTreasury.sol\\\";\\n\\ninterface IDLPRoot {\\n    struct Stake {\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock; // 0 if active\\n        bool withdrawn;\\n        uint256 lastClaimedIndexEpochId; //todo: rename to lastClaimedEpochId\\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\\n        uint256 movedAmount; // Amount moved to new stake\\n    }\\n\\n    struct Staker {\\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\\n        uint256 totalStakeAmount;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootCore() external view returns (IDLPRootCore);\\n    function dlpRootEpoch() external view returns (IDLPRootEpoch);\\n\\n    // Additional view functions\\n    function minStakeAmount() external view returns (uint256);\\n    function stakeWithdrawalDelay() external view returns (uint256);\\n    function rewardClaimDelay() external view returns (uint256);\\n\\n    function stakersListCount() external view returns (uint256);\\n    function stakersListAt(uint256 index) external view returns (address);\\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\\n    function stakesCount() external view returns (uint256);\\n\\n    struct StakeInfo {\\n        uint256 id;\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        bool withdrawn;\\n        uint256 lastClaimedEpochId;\\n    }\\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\\n\\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\\n    function calculateStakeScore(\\n        uint256 stakeAmount,\\n        uint256 stakeStartBlock,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\\n    function updateDlpRootCore(address newDlpRootCoreAddress) external;\\n    function updateDlpRootEpoch(address newDlpRootEpochAddress) external;\\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\\n\\n    // Staking and rewards\\n    function createStake(uint256 dlpId) external payable;\\n    function createStakeOnBehalf(uint256 dlpId, address stakeOwner) external payable;\\n    function closeStakes(uint256[] memory stakeIds) external;\\n    function withdrawStakes(uint256[] memory stakeIds) external;\\n    function migrateStake(uint256 stakeId, uint256 newDlpId, uint256 newAmount) external;\\n    function claimStakesReward(uint256[] memory stakeIds) external;\\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\\n}\\n\",\"keccak256\":\"0x0ae279e92abc09eb9ab54021b326ec3edb0ca951990c1e8e9a5d8e9c99dd47d6\",\"license\":\"MIT\"},\"contracts/root/interfaces/IDLPRootOld.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\nimport {IDLPRootTreasury} from \\\"../../rootTreasury/interfaces/IDLPRootTreasury.sol\\\";\\n\\ninterface IDLPRootOld {\\n    // DLP lifecycle states from registration to deregistration\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Eligible, // Can participate in epochs\\n        SubEligible, // Below threshold but above minimum\\n        Deregistered\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress; // Receives non-staker rewards\\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\\n        Checkpoints.Trace208 unstakeAmountCheckpoints; // Historical unstake amounts\\n        uint256 epochIdsCount; // Number of participated epochs\\n        mapping(uint256 index => uint256 epochIds) epochIds;\\n        bool isVerified;\\n    }\\n\\n    struct EpochDlp {\\n        uint256 rewardAmount; // Rewards allocated to the DLP owner\\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\\n        uint256 totalStakesScore; // Sum of weighted stake scores\\n        bool rewardClaimed; // True if reward has been claimed\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    struct Stake {\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock; // 0 if active\\n        bool withdrawn;\\n        uint256 lastClaimedIndexEpochId;\\n        mapping(uint256 epochId => uint256 claimedAmount) claimedAmounts;\\n    }\\n\\n    struct Staker {\\n        EnumerableSet.UintSet dlpIds; // DLPs staked on by this staker\\n        mapping(uint256 dlpId => uint256 dlpStakeAmount) dlpStakeAmounts;\\n        EnumerableSet.UintSet stakeIds; // Stakes made by this staker\\n        uint256 totalStakeAmount;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRootMetrics() external view returns (IDLPRootMetrics);\\n    function dlpRootRewardsTreasury() external view returns (IDLPRootTreasury);\\n    function dlpRootStakesTreasury() external view returns (IDLPRootTreasury);\\n    function epochDlpsLimit() external view returns (uint256);\\n    function eligibleDlps() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function daySize() external view returns (uint256);\\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\\n    function eligibleDlpsListCount() external view returns (uint256);\\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\\n    function epochsCount() external view returns (uint256);\\n\\n    // Read-only struct views\\n    struct EpochInfo {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n\\n    // Additional view functions\\n    function minStakeAmount() external view returns (uint256);\\n    function minDlpStakersPercentage() external view returns (uint256);\\n    function maxDlpStakersPercentage() external view returns (uint256);\\n    function minDlpRegistrationStake() external view returns (uint256);\\n    function dlpEligibilityThreshold() external view returns (uint256);\\n    function dlpSubEligibilityThreshold() external view returns (uint256);\\n    function eligibleDlpsLimit() external view returns (uint256);\\n    function stakeWithdrawalDelay() external view returns (uint256);\\n    function rewardClaimDelay() external view returns (uint256);\\n    function epochRewardAmount() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n\\n    struct DlpInfo {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address treasuryAddress;\\n        uint256 stakersPercentage;\\n        uint256 stakersPercentageEpoch;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 stakeAmount;\\n        uint256[] epochIds;\\n        bool isVerified;\\n    }\\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\\n\\n    struct DlpEpochInfo {\\n        uint256 stakeAmount; // 0 if not a top DLP\\n        bool isTopDlp; // In top DLPs list this epoch\\n        uint256 rewardAmount; // 0 if not top DLP or epoch not finished\\n        uint256 stakersPercentage; // 0 if not top DLP\\n        uint256 totalStakesScore; // 0 if not top DLP\\n        bool rewardClaimed;\\n        uint256 stakersRewardAmount;\\n    }\\n    function dlpEpochs(uint256 dlpId, uint256 epochId) external view returns (DlpEpochInfo memory);\\n    function stakersListCount() external view returns (uint256);\\n    function stakersListAt(uint256 index) external view returns (address);\\n    function stakerDlpsListCount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpsListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerDlpsListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerStakesListCount(address stakerAddress) external view returns (uint256);\\n    function stakerStakesListAt(address stakerAddress, uint256 index) external view returns (uint256);\\n    function stakerStakesListValues(address stakerAddress) external view returns (uint256[] memory);\\n    function stakerTotalStakeAmount(address stakerAddress) external view returns (uint256);\\n    function stakerDlpStakeAmount(address stakerAddress, uint256 dlpId) external view returns (uint256);\\n    function stakesCount() external view returns (uint256);\\n\\n    struct StakeInfo {\\n        uint256 id;\\n        address stakerAddress;\\n        uint256 dlpId;\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        bool withdrawn;\\n        uint256 lastClaimedEpochId;\\n    }\\n    function stakes(uint256 stakeId) external view returns (StakeInfo memory);\\n    function stakeClaimedAmounts(uint256 stakeId, uint256 epochId) external view returns (uint256);\\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\\n\\n    // Core functionality\\n    function topDlpIds(uint256 numberOfDlps) external returns (uint256[] memory);\\n    function calculateStakeClaimableAmount(uint256 stakeId) external returns (uint256);\\n    function calculateStakeScore(\\n        uint256 stakeAmount,\\n        uint256 stakeStartBlock,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n\\n    struct DlpRewardApy {\\n        uint256 dlpId;\\n        uint256 APY; //annual percentage yield for stakers\\n        uint256 EPY; //epoch percentage yield for stakers\\n    }\\n\\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n    function updateMinStakeAmount(uint256 newMinStakeAmount) external;\\n    function updateDlpStakersPercentages(\\n        uint256 newMinDlpStakersPercentage,\\n        uint256 newMaxDlpStakersPercentage\\n    ) external;\\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\\n    function updateDlpEligibilityThresholds(\\n        uint256 newDlpSubEligibilityThreshold,\\n        uint256 newDlpEligibilityThreshold\\n    ) external;\\n    function updateStakeWithdrawalDelay(uint256 newStakeWithdrawalDelay) external;\\n    function updateRewardClaimDelay(uint256 newRewardClaimDelay) external;\\n    function updateDlpRootMetrics(address newDlpRootMetricsAddress) external;\\n    function updateDlpRootRewardsTreasury(address newDlpRootRewardsTreasuryAddress) external;\\n    function updateDlpRootStakesTreasury(address newDlpRootStakesTreasuryAddress) external;\\n\\n    struct EpochDlpsTotalStakesScore {\\n        uint256 epochId;\\n        uint256 dlpId;\\n        uint256 totalStakesScore;\\n    }\\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\\n\\n    // Epoch management\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n    struct EpochDlpReward {\\n        uint256 dlpId;\\n        uint256 rewardAmount;\\n        uint256 stakersRewardAmount;\\n    }\\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\\n\\n    struct DlpRegistration {\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress;\\n        uint256 stakersPercentage;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n    }\\n\\n    // DLP lifecycle management\\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\\n    function updateDlpVerification(uint256 dlpId, bool isVerified) external;\\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\\n    function deregisterDlp(uint256 dlpId) external;\\n\\n    // Staking and rewards\\n    function claimStakeRewardUntilEpoch(uint256 stakeId, uint256 lastEpochToClaim) external;\\n    function claimStakesReward(uint256[] memory stakeIds) external;\\n    function createStake(uint256 dlpId) external payable;\\n    function closeStakes(uint256[] memory stakeIds) external;\\n    function withdrawStakes(uint256[] memory stakeIds) external;\\n}\\n\",\"keccak256\":\"0x124fd0ab18493f44d7e5d646fcad76d02eaf3eac3969f86446e51335d62e24b4\",\"license\":\"MIT\"},\"contracts/rootCore/DLPRootCoreImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/DLPRootCoreStorageV1.sol\\\";\\nimport {IDLPRootOld} from \\\"../root/interfaces/IDLPRootOld.sol\\\";\\n\\ncontract DLPRootCoreImplementation is\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DLPRootCoreStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant DLP_ROOT_ROLE = keccak256(\\\"DLP_ROOT_ROLE\\\");\\n\\n    uint256 public constant NEW_MULTIPLIER_EPOCH = 3;\\n\\n    // Key events for DLP lifecycle and operations\\n    event DlpRegistered(\\n        uint256 indexed dlpId,\\n        address indexed dlpAddress,\\n        address ownerAddress,\\n        address treasuryAddress,\\n        uint256 stakersPercentage,\\n        string name,\\n        string iconUrl,\\n        string website,\\n        string metadata\\n    );\\n\\n    event DlpUpdated(\\n        uint256 indexed dlpId,\\n        address indexed dlpAddress,\\n        address ownerAddress,\\n        address treasuryAddress,\\n        uint256 stakersPercentage,\\n        string name,\\n        string iconUrl,\\n        string website,\\n        string metadata\\n    );\\n\\n    event DlpStatusUpdated(uint256 indexed dlpId, DlpStatus newStatus);\\n    event DlpVerificationUpdated(uint256 indexed dlpId, bool verified);\\n    event MinDlpStakersPercentageUpdated(uint256 newMinDlpStakersPercentage);\\n    event MaxDlpStakersPercentageUpdated(uint256 newMaxDlpStakersPercentage);\\n    event MinStakeAmountUpdated(uint256 newMinStakeAmount);\\n    event DlpEligibilityThresholdUpdated(uint256 newDlpEligibilityThreshold);\\n    event DlpSubEligibilityThresholdUpdated(uint256 newDlpSubEligibilityThreshold);\\n    event MinDlpRegistrationStakeUpdated(uint256 newMinDlpRegistrationStake);\\n\\n    // Custom errors\\n    error InvalidParam();\\n    error InvalidStakeAmount();\\n    error StakeAlreadyWithdrawn();\\n    error StakeNotClosed();\\n    error StakeAlreadyClosed();\\n    error StakeWithdrawalTooEarly();\\n    error InvalidDlpId();\\n    error InvalidDlpStatus();\\n    error InvalidAddress();\\n    error InvalidName();\\n    error NotDlpOwner();\\n    error NotStakeOwner();\\n    error NothingToClaim();\\n    error InvalidStakersPercentage();\\n    error DlpAddressCannotBeChanged();\\n    error TransferFailed();\\n    error EpochNotEnded();\\n    error EpochDlpScoreAlreadySaved();\\n    error EpochRewardsAlreadyDistributed();\\n    error LastEpochMustBeFinalised();\\n\\n    modifier onlyDlpOwner(uint256 dlpId) {\\n        if (_dlps[dlpId].ownerAddress != msg.sender) {\\n            revert NotDlpOwner();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address ownerAddress, address dlpRootAddress) external initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        dlpRoot = IDLPRoot(dlpRootAddress);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\\n        _grantRole(MANAGER_ROLE, ownerAddress);\\n        _grantRole(DLP_ROOT_ROLE, dlpRootAddress);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Gets DLP information including current stake and status\\n     */\\n    function dlps(uint256 dlpId) public view override returns (DlpInfo memory) {\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        uint256 epochsCount = _dlpRootEpoch().epochsCount();\\n        return\\n            DlpInfo({\\n                id: dlp.id,\\n                dlpAddress: dlp.dlpAddress,\\n                ownerAddress: dlp.ownerAddress,\\n                treasuryAddress: dlp.treasuryAddress,\\n                stakersPercentage: dlp.stakersPercentageCheckpoints.latest(),\\n                stakersPercentageEpoch: dlp.stakersPercentageCheckpoints.upperLookup(\\n                    epochsCount > 0 ? uint48(epochsCount - 1) : 0\\n                ),\\n                name: dlp.name,\\n                iconUrl: dlp.iconUrl,\\n                website: dlp.website,\\n                metadata: dlp.metadata,\\n                status: dlp.status,\\n                registrationBlockNumber: dlp.registrationBlockNumber,\\n                stakeAmount: dlp.stakeAmountCheckpoints.latest(),\\n                isVerified: dlp.isVerified\\n            });\\n    }\\n\\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view override returns (uint256) {\\n        return _dlps[dlpId].stakeAmountCheckpoints.upperLookup(uint48(epochId));\\n    }\\n\\n    function dlpsByAddress(address dlpAddress) external view override returns (DlpInfo memory) {\\n        return dlps(dlpIds[dlpAddress]);\\n    }\\n\\n    function dlpsByName(string calldata dlpName) external view override returns (DlpInfo memory) {\\n        return dlps(dlpNameToId[dlpName]);\\n    }\\n\\n    function eligibleDlpsListValues() external view override returns (uint256[] memory) {\\n        return _eligibleDlpsList.values();\\n    }\\n\\n    function eligibleDlpsListCount() external view override returns (uint256) {\\n        return _eligibleDlpsList.length();\\n    }\\n\\n    function eligibleDlpsListAt(uint256 index) external view override returns (uint256) {\\n        return _eligibleDlpsList.at(index);\\n    }\\n\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function updateDlpStakersPercentages(\\n        uint256 newMinDlpStakersPercentage,\\n        uint256 newMaxDlpStakersPercentage\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newMinDlpStakersPercentage < 1e16 || newMinDlpStakersPercentage > newMaxDlpStakersPercentage) {\\n            revert InvalidParam();\\n        }\\n\\n        minDlpStakersPercentage = newMinDlpStakersPercentage;\\n        maxDlpStakersPercentage = newMaxDlpStakersPercentage;\\n\\n        emit MinDlpStakersPercentageUpdated(newMinDlpStakersPercentage);\\n        emit MaxDlpStakersPercentageUpdated(newMaxDlpStakersPercentage);\\n\\n        uint256 _dlpsCount = dlpsCount;\\n        for (uint256 i = 1; i <= _dlpsCount; ) {\\n            Dlp storage dlp = _dlps[i];\\n            if (dlp.status != DlpStatus.Deregistered) {\\n                uint256 stakersPercentage = dlp.stakersPercentageCheckpoints.latest();\\n                if (stakersPercentage < newMinDlpStakersPercentage) {\\n                    _checkpointPush(\\n                        dlp.stakersPercentageCheckpoints,\\n                        _dlpRootEpoch().epochsCount(),\\n                        newMinDlpStakersPercentage\\n                    );\\n                    emit DlpUpdated(\\n                        i,\\n                        dlp.dlpAddress,\\n                        dlp.ownerAddress,\\n                        dlp.treasuryAddress,\\n                        newMinDlpStakersPercentage,\\n                        dlp.name,\\n                        dlp.iconUrl,\\n                        dlp.website,\\n                        dlp.metadata\\n                    );\\n                } else if (stakersPercentage > newMaxDlpStakersPercentage) {\\n                    _checkpointPush(\\n                        dlp.stakersPercentageCheckpoints,\\n                        _dlpRootEpoch().epochsCount(),\\n                        newMaxDlpStakersPercentage\\n                    );\\n                    emit DlpUpdated(\\n                        i,\\n                        dlp.dlpAddress,\\n                        dlp.ownerAddress,\\n                        dlp.treasuryAddress,\\n                        newMaxDlpStakersPercentage,\\n                        dlp.name,\\n                        dlp.iconUrl,\\n                        dlp.website,\\n                        dlp.metadata\\n                    );\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function updateMinDlpRegistrationStake(\\n        uint256 newMinDlpRegistrationStake\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (\\n            dlpRoot.minStakeAmount() > newMinDlpRegistrationStake ||\\n            newMinDlpRegistrationStake > dlpSubEligibilityThreshold\\n        ) {\\n            revert InvalidParam();\\n        }\\n        minDlpRegistrationStake = newMinDlpRegistrationStake;\\n        emit MinDlpRegistrationStakeUpdated(newMinDlpRegistrationStake);\\n    }\\n\\n    /**\\n     * @notice Updates eligibility thresholds\\n     */\\n    function updateDlpEligibilityThresholds(\\n        uint256 newDlpSubEligibilityThreshold,\\n        uint256 newDlpEligibilityThreshold\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        if (newDlpSubEligibilityThreshold > newDlpEligibilityThreshold) {\\n            revert InvalidParam();\\n        }\\n\\n        dlpSubEligibilityThreshold = newDlpSubEligibilityThreshold;\\n        dlpEligibilityThreshold = newDlpEligibilityThreshold;\\n\\n        emit DlpSubEligibilityThresholdUpdated(newDlpSubEligibilityThreshold);\\n        emit DlpEligibilityThresholdUpdated(newDlpEligibilityThreshold);\\n    }\\n\\n    function updateDlpRoot(address newDlpRootAddress) external override onlyRole(MAINTAINER_ROLE) {\\n        dlpRoot = IDLPRoot(newDlpRootAddress);\\n    }\\n\\n    /**\\n     * @notice Registers a new DLP with initial stake\\n     */\\n    function registerDlp(\\n        DlpRegistration calldata registrationInfo\\n    ) external payable override whenNotPaused nonReentrant {\\n        _dlpRootEpoch().createEpochs();\\n        _registerDlp(registrationInfo);\\n    }\\n\\n    function updateDlpVerification(uint256 dlpId, bool isVerified) external override onlyRole(MAINTAINER_ROLE) {\\n        Dlp storage dlp = _dlps[dlpId];\\n        dlp.isVerified = isVerified;\\n\\n        if (dlp.status == DlpStatus.None || dlp.status == DlpStatus.Deregistered) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        emit DlpVerificationUpdated(dlpId, isVerified);\\n\\n        if (dlp.stakeAmountCheckpoints.latest() >= dlpEligibilityThreshold) {\\n            if (isVerified) {\\n                _eligibleDlpsList.add(dlpId);\\n                dlp.status = DlpStatus.Eligible;\\n                emit DlpStatusUpdated(dlpId, DlpStatus.Eligible);\\n            } else {\\n                _eligibleDlpsList.remove(dlpId);\\n                dlp.status = DlpStatus.Registered;\\n                emit DlpStatusUpdated(dlpId, DlpStatus.Registered);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates DLP information\\n     * @dev Only DLP owner can update\\n     */\\n    function updateDlp(\\n        uint256 dlpId,\\n        DlpRegistration calldata dlpUpdateInfo\\n    ) external override whenNotPaused nonReentrant onlyDlpOwner(dlpId) {\\n        _dlpRootEpoch().createEpochs();\\n\\n        if (dlpUpdateInfo.ownerAddress == address(0) || dlpUpdateInfo.treasuryAddress == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        if (\\n            dlpUpdateInfo.stakersPercentage < minDlpStakersPercentage ||\\n            dlpUpdateInfo.stakersPercentage > maxDlpStakersPercentage\\n        ) {\\n            revert InvalidStakersPercentage();\\n        }\\n\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        //this validation will be removed in the future\\n        if (dlp.dlpAddress != dlpUpdateInfo.dlpAddress) {\\n            revert DlpAddressCannotBeChanged();\\n        }\\n\\n        dlp.ownerAddress = dlpUpdateInfo.ownerAddress;\\n        dlp.treasuryAddress = dlpUpdateInfo.treasuryAddress;\\n        if (dlp.stakersPercentageCheckpoints.latest() != dlpUpdateInfo.stakersPercentage) {\\n            _checkpointPush(\\n                dlp.stakersPercentageCheckpoints,\\n                _dlpRootEpoch().epochsCount(),\\n                dlpUpdateInfo.stakersPercentage\\n            );\\n        }\\n\\n        if (keccak256(bytes(dlpUpdateInfo.name)) != keccak256(bytes(dlp.name))) {\\n            if (dlpNameToId[dlpUpdateInfo.name] != 0 || !_validateDlpNameLength(dlpUpdateInfo.name)) {\\n                revert InvalidName();\\n            }\\n\\n            dlpNameToId[dlp.name] = 0;\\n            dlpNameToId[dlpUpdateInfo.name] = dlpId;\\n        }\\n\\n        dlp.name = dlpUpdateInfo.name;\\n        dlp.iconUrl = dlpUpdateInfo.iconUrl;\\n        dlp.website = dlpUpdateInfo.website;\\n        dlp.metadata = dlpUpdateInfo.metadata;\\n\\n        dlpIds[dlpUpdateInfo.dlpAddress] = dlpId;\\n\\n        emit DlpUpdated(\\n            dlpId,\\n            dlpUpdateInfo.dlpAddress,\\n            dlpUpdateInfo.ownerAddress,\\n            dlpUpdateInfo.treasuryAddress,\\n            dlpUpdateInfo.stakersPercentage,\\n            dlpUpdateInfo.name,\\n            dlpUpdateInfo.iconUrl,\\n            dlpUpdateInfo.website,\\n            dlpUpdateInfo.metadata\\n        );\\n    }\\n\\n    /**\\n     * @notice Deregisters a DLP\\n     * @dev Only owner can deregister, must be in valid status\\n     */\\n    function deregisterDlp(uint256 dlpId) external override whenNotPaused nonReentrant onlyDlpOwner(dlpId) {\\n        _dlpRootEpoch().createEpochs();\\n\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        if (dlp.status == DlpStatus.None || dlp.status == DlpStatus.Deregistered) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        dlp.status = DlpStatus.Deregistered;\\n        _eligibleDlpsList.remove(dlpId);\\n\\n        uint256 epochsCount = _dlpRootEpoch().epochsCount();\\n        if (epochsCount > 1 && !_dlpRootEpoch().epochs(epochsCount - 1).isFinalised) {\\n            revert LastEpochMustBeFinalised();\\n        }\\n\\n        emit DlpStatusUpdated(dlpId, DlpStatus.Deregistered);\\n    }\\n\\n    function addDlpStake(uint256 dlpId, uint256 amount) external override onlyRole(DLP_ROOT_ROLE) {\\n        Dlp storage dlp = _dlps[dlpId];\\n        _checkpointAdd(dlp.stakeAmountCheckpoints, _dlpRootEpoch().epochsCount(), amount);\\n\\n        // Check if DLP becomes eligible\\n        if (\\n            dlp.isVerified &&\\n            (dlp.status == DlpStatus.Registered || dlp.status == DlpStatus.SubEligible) &&\\n            dlp.stakeAmountCheckpoints.latest() >= dlpEligibilityThreshold\\n        ) {\\n            _eligibleDlpsList.add(dlpId);\\n            dlp.status = DlpStatus.Eligible;\\n\\n            uint256 epochsCount = _dlpRootEpoch().epochsCount();\\n            if (epochsCount > 1 && !_dlpRootEpoch().epochs(epochsCount - 1).isFinalised) {\\n                revert LastEpochMustBeFinalised();\\n            }\\n\\n            emit DlpStatusUpdated(dlpId, DlpStatus.Eligible);\\n        }\\n    }\\n\\n    function removeDlpStake(uint256 dlpId, uint256 amount) external override onlyRole(DLP_ROOT_ROLE) {\\n        Dlp storage dlp = _dlps[dlpId];\\n        _checkpointSub(dlp.stakeAmountCheckpoints, _dlpRootEpoch().epochsCount(), amount);\\n\\n        uint256 dlpStake = dlp.stakeAmountCheckpoints.latest();\\n\\n        // Update DLP status based on remaining stake\\n        if (\\n            dlpStake < dlpSubEligibilityThreshold &&\\n            (dlp.status == DlpStatus.SubEligible || dlp.status == DlpStatus.Eligible)\\n        ) {\\n            dlp.status = DlpStatus.Registered;\\n            _eligibleDlpsList.remove(dlpId);\\n\\n            uint256 epochsCount = _dlpRootEpoch().epochsCount();\\n            if (epochsCount > 1 && !_dlpRootEpoch().epochs(epochsCount - 1).isFinalised) {\\n                revert LastEpochMustBeFinalised();\\n            }\\n\\n            emit DlpStatusUpdated(dlpId, DlpStatus.Registered);\\n        } else if (dlpStake < dlpEligibilityThreshold && dlp.status == DlpStatus.Eligible) {\\n            dlp.status = DlpStatus.SubEligible;\\n\\n            emit DlpStatusUpdated(dlpId, DlpStatus.SubEligible);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to register a new DLP\\n     */\\n    function _registerDlp(DlpRegistration calldata registrationInfo) internal {\\n        if (registrationInfo.ownerAddress == address(0) || registrationInfo.treasuryAddress == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        if (dlpIds[registrationInfo.dlpAddress] != 0) {\\n            revert InvalidDlpStatus();\\n        }\\n\\n        if (dlpNameToId[registrationInfo.name] != 0 || !_validateDlpNameLength(registrationInfo.name)) {\\n            revert InvalidName();\\n        }\\n\\n        if (\\n            registrationInfo.stakersPercentage < minDlpStakersPercentage ||\\n            registrationInfo.stakersPercentage > maxDlpStakersPercentage\\n        ) {\\n            revert InvalidStakersPercentage();\\n        }\\n\\n        if (msg.value < minDlpRegistrationStake) {\\n            revert InvalidStakeAmount();\\n        }\\n\\n        uint256 dlpId = ++dlpsCount;\\n        Dlp storage dlp = _dlps[dlpId];\\n\\n        uint256 epochsCount = _dlpRootEpoch().epochsCount();\\n\\n        dlp.id = dlpId;\\n        dlp.dlpAddress = registrationInfo.dlpAddress;\\n        dlp.ownerAddress = registrationInfo.ownerAddress;\\n        dlp.treasuryAddress = registrationInfo.treasuryAddress;\\n        _checkpointPush(\\n            dlp.stakersPercentageCheckpoints,\\n            epochsCount > 0 ? epochsCount - 1 : 0,\\n            registrationInfo.stakersPercentage\\n        );\\n        dlp.name = registrationInfo.name;\\n        dlp.iconUrl = registrationInfo.iconUrl;\\n        dlp.website = registrationInfo.website;\\n        dlp.metadata = registrationInfo.metadata;\\n        dlp.registrationBlockNumber = block.number;\\n        dlp.status = DlpStatus.Registered;\\n\\n        dlpIds[registrationInfo.dlpAddress] = dlpId;\\n\\n        dlpNameToId[registrationInfo.name] = dlpId;\\n\\n        emit DlpRegistered(\\n            dlpId,\\n            registrationInfo.dlpAddress,\\n            registrationInfo.ownerAddress,\\n            registrationInfo.treasuryAddress,\\n            registrationInfo.stakersPercentage,\\n            registrationInfo.name,\\n            registrationInfo.iconUrl,\\n            registrationInfo.website,\\n            registrationInfo.metadata\\n        );\\n\\n        emit DlpStatusUpdated(dlpId, DlpStatus.Registered);\\n        dlpRoot.createStakeOnBehalf{value: msg.value}(dlpId, registrationInfo.ownerAddress);\\n    }\\n\\n    function _dlpRootEpoch() internal view returns (IDLPRootEpoch) {\\n        return dlpRoot.dlpRootEpoch();\\n    }\\n\\n    function _dlpRootMetrics() internal view returns (IDLPRootMetrics) {\\n        return dlpRoot.dlpRootMetrics();\\n    }\\n\\n    /**\\n     * @notice Helper function to set checkpoint value\\n     */\\n    function _checkpointPush(\\n        Checkpoints.Trace208 storage store,\\n        uint256 key,\\n        uint256 value\\n    ) private returns (uint208, uint208) {\\n        return store.push(uint48(key), uint208(value));\\n    }\\n\\n    function _checkpointAdd(\\n        Checkpoints.Trace208 storage store,\\n        uint256 key,\\n        uint256 delta\\n    ) private returns (uint208, uint208) {\\n        return store.push(uint48(key), store.latest() + uint208(delta));\\n    }\\n\\n    function _checkpointSub(\\n        Checkpoints.Trace208 storage store,\\n        uint256 epochId,\\n        uint256 delta\\n    ) private returns (uint208, uint208) {\\n        return store.push(uint48(epochId), store.latest() - uint208(delta));\\n    }\\n\\n    function _validateDlpNameLength(string memory str) internal pure returns (bool) {\\n        bytes memory strBytes = bytes(str);\\n        uint256 count = 0;\\n\\n        for (uint256 i = 0; i < strBytes.length; i++) {\\n            if (strBytes[i] != 0x20) {\\n                // 0x20 is the ASCII space character\\n                count++;\\n            }\\n        }\\n\\n        return count > 3;\\n    }\\n\\n    function migrateParametersData() external onlyRole(MANAGER_ROLE) {\\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\\n        minDlpStakersPercentage = dlpRootOld.minDlpStakersPercentage();\\n        maxDlpStakersPercentage = dlpRootOld.maxDlpStakersPercentage();\\n        minDlpRegistrationStake = dlpRootOld.minDlpRegistrationStake();\\n        dlpEligibilityThreshold = dlpRootOld.dlpEligibilityThreshold();\\n        dlpSubEligibilityThreshold = dlpRootOld.dlpSubEligibilityThreshold();\\n    }\\n\\n    function migrateDlpData(uint256 startDlpId, uint256 endDlpId) external onlyRole(MANAGER_ROLE) {\\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\\n\\n        uint256 epochsCount = dlpRootOld.epochsCount();\\n        for (uint256 dlpId = startDlpId; dlpId <= endDlpId; ) {\\n            IDLPRootOld.DlpInfo memory dlpInfo = dlpRootOld.dlps(dlpId);\\n            Dlp storage dlp = _dlps[dlpId];\\n\\n            dlp.id = dlpInfo.id;\\n            dlp.dlpAddress = dlpInfo.dlpAddress;\\n            dlp.ownerAddress = dlpInfo.ownerAddress;\\n            dlp.treasuryAddress = payable(dlpInfo.treasuryAddress);\\n            dlp.name = dlpInfo.name;\\n            dlp.iconUrl = dlpInfo.iconUrl;\\n            dlp.website = dlpInfo.website;\\n            dlp.metadata = dlpInfo.metadata;\\n            dlp.status = DlpStatus(uint256(dlpInfo.status));\\n            dlp.registrationBlockNumber = dlpInfo.registrationBlockNumber;\\n            dlp.isVerified = dlpInfo.isVerified;\\n\\n            for (uint256 epochId = 0; epochId <= epochsCount; ) {\\n                IDLPRootOld.DlpEpochInfo memory dlpEpochInfo = dlpRootOld.dlpEpochs(dlpId, epochId);\\n\\n                _checkpointPush(dlp.stakersPercentageCheckpoints, epochId, dlpEpochInfo.stakersPercentage);\\n                _checkpointPush(dlp.stakeAmountCheckpoints, epochId, dlpEpochInfo.stakeAmount);\\n\\n                unchecked {\\n                    ++epochId;\\n                }\\n            }\\n\\n            dlpIds[dlpInfo.dlpAddress] = dlpId;\\n            dlpNameToId[dlpInfo.name] = dlpId;\\n\\n            if (DlpStatus(uint256(dlpInfo.status)) == DlpStatus.Eligible) {\\n                _eligibleDlpsList.add(dlpId);\\n            }\\n\\n            dlpsCount++;\\n\\n            unchecked {\\n                ++dlpId;\\n            }\\n        }\\n    }\\n\\n    function migrateLastEpochDlpStakeData(uint256 startDlpId, uint256 endDlpId) external onlyRole(MANAGER_ROLE) {\\n        IDLPRootOld dlpRootOld = IDLPRootOld(address(dlpRoot));\\n\\n        uint256 epochsCount = dlpRootOld.epochsCount();\\n        for (uint256 dlpId = startDlpId; dlpId <= endDlpId; ) {\\n            Dlp storage dlp = _dlps[dlpId];\\n\\n            IDLPRootOld.DlpEpochInfo memory dlpEpochInfo = dlpRootOld.dlpEpochs(dlpId, epochsCount);\\n\\n            _checkpointPush(dlp.stakeAmountCheckpoints, epochsCount, dlpEpochInfo.stakeAmount);\\n\\n            unchecked {\\n                ++dlpId;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x763375fe739c2324ca3e25a3186c9358720ddd9471ad55e25153748de648ae1b\",\"license\":\"MIT\"},\"contracts/rootCore/interfaces/DLPRootCoreStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./IDLPRootCore.sol\\\";\\n\\nabstract contract DLPRootCoreStorageV1 is IDLPRootCore {\\n    IDLPRoot public override dlpRoot;\\n\\n    uint256 public override eligibleDlpsLimit;\\n    uint256 public override minDlpStakersPercentage; // Min % of rewards to stakers (in 1e18)\\n    uint256 public override maxDlpStakersPercentage; // Max % of rewards to stakers (in 1e18)\\n    uint256 public override minDlpRegistrationStake; // Min stake for new DLP registration\\n    uint256 public override dlpEligibilityThreshold; // Min stake for full eligibility\\n    uint256 public override dlpSubEligibilityThreshold; // Min stake for sub-eligibility\\n\\n    uint256 public override dlpsCount;\\n    mapping(uint256 dlpId => Dlp dlp) internal _dlps;\\n    mapping(address dlpAddress => uint256 dlpId) public override dlpIds;\\n    mapping(string dlpName => uint256 dlpId) public override dlpNameToId;\\n    EnumerableSet.UintSet internal _eligibleDlpsList;\\n}\\n\",\"keccak256\":\"0x7a69c34dd997af94133ee19ca8c2e9b1cac38b6d31e8d9ba1d067aac02a2bfaf\",\"license\":\"MIT\"},\"contracts/rootCore/interfaces/IDLPRootCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\nimport {IDLPRootMetrics} from \\\"../../rootMetrics/interfaces/IDLPRootMetrics.sol\\\";\\n\\ninterface IDLPRootCore {\\n    // DLP lifecycle states from registration to deregistration\\n    enum DlpStatus {\\n        None,\\n        Registered,\\n        Eligible, // Can participate in epochs\\n        SubEligible, // Below threshold but above minimum\\n        Deregistered\\n    }\\n\\n    struct Dlp {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress; // Receives non-staker rewards\\n        Checkpoints.Trace208 stakersPercentageCheckpoints; // Historical staker percentages\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        Checkpoints.Trace208 stakeAmountCheckpoints; // Historical stake amounts\\n        bool isVerified;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function eligibleDlpsListValues() external view returns (uint256[] memory);\\n    function eligibleDlpsListCount() external view returns (uint256);\\n    function eligibleDlpsListAt(uint256 index) external view returns (uint256);\\n\\n    function minDlpStakersPercentage() external view returns (uint256);\\n    function maxDlpStakersPercentage() external view returns (uint256);\\n    function minDlpRegistrationStake() external view returns (uint256);\\n    function dlpEligibilityThreshold() external view returns (uint256);\\n    function dlpSubEligibilityThreshold() external view returns (uint256);\\n    function eligibleDlpsLimit() external view returns (uint256);\\n    function dlpsCount() external view returns (uint256);\\n\\n    struct DlpInfo {\\n        uint256 id;\\n        address dlpAddress;\\n        address ownerAddress;\\n        address treasuryAddress;\\n        uint256 stakersPercentage;\\n        uint256 stakersPercentageEpoch;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n        DlpStatus status;\\n        uint256 registrationBlockNumber;\\n        uint256 stakeAmount;\\n        bool isVerified;\\n    }\\n    function dlps(uint256 dlpId) external view returns (DlpInfo memory);\\n    function dlpsByAddress(address dlpAddress) external view returns (DlpInfo memory);\\n    function dlpIds(address dlpAddress) external view returns (uint256);\\n    function dlpNameToId(string calldata dlpName) external view returns (uint256);\\n    function dlpsByName(string calldata dlpName) external view returns (DlpInfo memory);\\n\\n    function dlpEpochStakeAmount(uint256 dlpId, uint256 epochId) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateDlpStakersPercentages(\\n        uint256 newMinDlpStakersPercentage,\\n        uint256 newMaxDlpStakersPercentage\\n    ) external;\\n    function updateMinDlpRegistrationStake(uint256 newMinStakeAmount) external;\\n    function updateDlpEligibilityThresholds(\\n        uint256 newDlpSubEligibilityThreshold,\\n        uint256 newDlpEligibilityThreshold\\n    ) external;\\n    function updateDlpRoot(address newDlpRootAddress) external;\\n\\n    struct DlpRegistration {\\n        address dlpAddress;\\n        address ownerAddress;\\n        address payable treasuryAddress;\\n        uint256 stakersPercentage;\\n        string name;\\n        string iconUrl;\\n        string website;\\n        string metadata;\\n    }\\n\\n    // DLP lifecycle management\\n    function registerDlp(DlpRegistration calldata registrationInfo) external payable;\\n    function updateDlpVerification(uint256 dlpId, bool isVerified) external;\\n    function updateDlp(uint256 dlpId, DlpRegistration calldata dlpUpdateInfo) external;\\n    function deregisterDlp(uint256 dlpId) external;\\n    function addDlpStake(uint256 dlpId, uint256 amount) external;\\n    function removeDlpStake(uint256 dlpId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdc0424a154d6e9bd25602d93a59a000e03760853d0c864d371078c1dc20af17b\",\"license\":\"MIT\"},\"contracts/rootEpoch/interfaces/IDLPRootEpoch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\n\\ninterface IDLPRootEpoch {\\n    struct EpochDlp {\\n        uint256 ownerRewardAmount; // Rewards allocated to the DLP owner\\n        uint256 stakersRewardAmount; //Rewards allocated to the stakers of the DLP\\n        uint256 totalStakesScore; // Sum of weighted stake scores\\n        uint256 rewardClaimed; // True if reward has been claimed\\n    }\\n\\n    struct Epoch {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        EnumerableSet.UintSet dlpIds; // Participating DLPs\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    // View functions for contract state and configuration\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function epochDlpsLimit() external view returns (uint256);\\n    function epochSize() external view returns (uint256);\\n    function daySize() external view returns (uint256);\\n    function epochsCount() external view returns (uint256);\\n\\n    // Read-only struct views\\n    struct EpochInfo {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 rewardAmount;\\n        bool isFinalised;\\n        uint256[] dlpIds;\\n    }\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function epochRewardAmount() external view returns (uint256);\\n\\n    struct EpochDlpInfo {\\n        uint256 stakeAmount; // 0 if not a top DLP\\n        bool isTopDlp; // In top DLPs list this epoch\\n        uint256 ownerRewardAmount; // 0 if not top DLP or epoch not finished\\n        uint256 stakersPercentage; // 0 if not top DLP\\n        uint256 totalStakesScore; // 0 if not top DLP\\n        uint256 rewardClaimed;\\n        uint256 stakersRewardAmount;\\n    }\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\\n\\n    function epochDlpStakeAmount(uint256 epochId, uint256 dlpId) external view returns (uint256);\\n\\n    // Admin functions\\n    function pause() external;\\n    function unpause() external;\\n    function updateEpochDlpsLimit(uint256 newEpochDlpsLimit) external;\\n    function updateEpochSize(uint256 newEpochSize) external;\\n    function updateEpochRewardAmount(uint256 newEpochRewardAmount) external;\\n\\n    function updateDlpRoot(address newDlpRootAddress) external;\\n\\n    struct EpochDlpsTotalStakesScore {\\n        uint256 epochId;\\n        uint256 dlpId;\\n        uint256 totalStakesScore;\\n    }\\n    function saveEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore[] memory stakeScore) external;\\n    function overrideEpochDlpsTotalStakesScore(EpochDlpsTotalStakesScore memory stakeScore) external;\\n\\n    function createEpochs() external;\\n    function createEpochsUntilBlockNumber(uint256 blockNumber) external;\\n    struct EpochDlpReward {\\n        uint256 dlpId;\\n        uint256 ownerRewardAmount;\\n        uint256 stakersRewardAmount;\\n    }\\n    function distributeEpochRewards(uint256 epochId, EpochDlpReward[] memory epochDlpRewards) external;\\n    function overrideEpoch(uint256 epochId, uint256 startBlock, uint256 endBlock, uint256 rewardAmount) external;\\n}\\n\",\"keccak256\":\"0x2cb595764099116d4e0356f35fd40fcb6f31b3408af16461e2e6b1c8ee60e23d\",\"license\":\"MIT\"},\"contracts/rootMetrics/interfaces/IDLPRootMetrics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\nimport {IDLPRootCore} from \\\"../../rootCore/interfaces/IDLPRootCore.sol\\\";\\nimport {IDLPRootEpoch} from \\\"../../rootEpoch/interfaces/IDLPRootEpoch.sol\\\";\\n\\ninterface IDLPRootMetrics {\\n    enum RatingType {\\n        Stake,\\n        Performance\\n    }\\n    struct EpochDlp {\\n        uint256 performanceRating;\\n        uint256 stakeAmountAdjustment;\\n    }\\n\\n    struct Epoch {\\n        uint256 totalPerformanceRating;\\n        bool finalized; //deprecated\\n        mapping(uint256 dlpId => EpochDlp epochDlp) dlps;\\n    }\\n\\n    struct DlpRating {\\n        uint256 dlpId;\\n        uint256 rating;\\n    }\\n\\n    struct EpochInfo {\\n        uint256 totalPerformanceRating;\\n        bool finalized;\\n    }\\n\\n    struct EpochDlpInfo {\\n        uint256 performanceRating;\\n        uint256 stakeAmountAdjustment;\\n    }\\n\\n    struct DlpPerformanceRating {\\n        uint256 dlpId;\\n        uint256 performanceRating;\\n    }\\n\\n    struct StakeClaimableReward {\\n        uint256 totalClaimableAmount;\\n        StakeClaimableEpochReward[] stakeClaimableEpochRewards;\\n    }\\n\\n    struct StakeClaimableEpochReward {\\n        uint256 epochId;\\n        uint256 claimableAmount;\\n        bool fullRewardAmount;\\n    }\\n\\n    struct DlpRewardApy {\\n        uint256 dlpId;\\n        uint256 APY; //annual percentage yield for stakers\\n        uint256 EPY; //epoch percentage yield for stakers\\n    }\\n\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function foundationWalletAddress() external view returns (address payable);\\n    function epochs(uint256 epochId) external view returns (EpochInfo memory);\\n    function epochDlps(uint256 epochId, uint256 dlpId) external view returns (EpochDlpInfo memory);\\n    function ratingPercentages(RatingType rating) external view returns (uint256);\\n    function topDlpsCustomized(\\n        uint256 epochId,\\n        uint256 numberOfDlps,\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) external view returns (DlpRating[] memory);\\n    function topDlps(uint256 numberOfDlps) external view returns (DlpRating[] memory);\\n    function topDlpIds(uint256 numberOfDlps) external view returns (uint256[] memory);\\n    function estimatedDlpRewardPercentagesCustomized(\\n        uint256[] memory dlpIds,\\n        uint256[] memory customRatingPercentages\\n    ) external view returns (DlpRewardApy[] memory);\\n    function estimatedDlpRewardPercentages(uint256[] memory dlpIds) external view returns (DlpRewardApy[] memory);\\n    function getMultiplier(uint256 index) external pure returns (uint256);\\n    function pause() external;\\n    function unpause() external;\\n    function updateDlpRoot(address dlpRootAddress) external;\\n    function updateFoundationWalletAddress(address payable newFoundationWalletAddress) external;\\n    function updateEpochDlpStakeAmountAdjustment(\\n        uint256 epochId,\\n        uint256 dlpId,\\n        uint256 adjustment,\\n        bool isAddition\\n    ) external;\\n    function saveEpochPerformanceRatings(uint256 epochId, DlpPerformanceRating[] memory dlpPerformanceRatings) external;\\n    function finalizeEpoch(uint256 epochId) external;\\n    function updateRatingPercentages(uint256 stakeRatingPercentage, uint256 performanceRatingPercentage) external;\\n}\\n\",\"keccak256\":\"0xc0d4f350c973e1d37dd51532e30a141492cf8fba9a18080123ddadf3d93d1f77\",\"license\":\"MIT\"},\"contracts/rootTreasury/interfaces/IDLPRootTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IDLPRoot} from \\\"../../root/interfaces/IDLPRoot.sol\\\";\\n\\ninterface IDLPRootTreasury {\\n    function version() external pure returns (uint256);\\n    function dlpRoot() external view returns (IDLPRoot);\\n    function updateDlpRoot(address dlpRootAddress) external;\\n    function transferVana(address payable to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x88522b520c42c31138c1db9d9cbd38a0ccbfc03cfabf75ced0c727b0b0e8a5d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000da565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000775760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051614d0262000104600039600081816132f10152818161331a015261345e0152614d026000f3fe60806040526004361061022e5760003560e01c806301159c701461023357806301ffc9a714610255578063028f31f31461028a57806303a229f6146102ae57806305c1c3f4146102d057806307e0cd17146102e3578063098d2f3c146102f95780632393526f1461031957806324404fa714610339578063248a9ca3146103665780632cc90df7146103865780632f2ff15d146103a657806336568abe146103c65780633f4ba83a146103e65780633fa411f8146103fb578063439b37561461041b578063485cc955146104485780634f1ef2861461046857806352d1902d1461047b57806354fd4d50146104905780635c975abb146104a45780635d342e98146104b95780635ec47f7d146104ce57806368ed41ed146104ee5780636d3527111461050457806372c9acdc1461051957806373801a881461052f578063776ddebc1461054f5780638456cb59146105875780638e991ff31461059c578063901d97f6146105b257806391d14854146105d25780639dc6fe5a146105f25780639e8e6717146106125780639f80210414610628578063a217fddf14610648578063ad3cb1cc1461065d578063b4fcea1d1461069b578063c06020b0146106bb578063cdf2003e146106e8578063d210ecd4146106fe578063d25f33e51461071e578063d547741f14610740578063ddadf36914610760578063e5c8307d14610780578063ea83e47b146107a0578063ec5903f4146107c0578063ec87621c146107d5578063f8742254146107f7575b600080fd5b34801561023f57600080fd5b5061025361024e366004613cc6565b610819565b005b34801561026157600080fd5b50610275610270366004613ce3565b610854565b60405190151581526020015b60405180910390f35b34801561029657600080fd5b506102a060025481565b604051908152602001610281565b3480156102ba57600080fd5b506102c361088b565b6040516102819190613d0d565b6102536102de366004613d6a565b61089c565b3480156102ef57600080fd5b506102a060065481565b34801561030557600080fd5b50610253610314366004613da6565b61091a565b34801561032557600080fd5b506102a0610334366004613dc8565b610b97565b34801561034557600080fd5b50600054610359906001600160a01b031681565b6040516102819190613de1565b34801561037257600080fd5b506102a0610381366004613dc8565b610ba4565b34801561039257600080fd5b506102536103a1366004613da6565b610bc4565b3480156103b257600080fd5b506102536103c1366004613df5565b610d04565b3480156103d257600080fd5b506102536103e1366004613df5565b610d20565b3480156103f257600080fd5b50610253610d58565b34801561040757600080fd5b50610253610416366004613da6565b610d78565b34801561042757600080fd5b5061043b610436366004613cc6565b61104d565b6040516102819190613eba565b34801561045457600080fd5b50610253610463366004613fd3565b611077565b6102536104763660046140f7565b6111f9565b34801561048757600080fd5b506102a0611218565b34801561049c57600080fd5b5060016102a0565b3480156104b057600080fd5b50610275611235565b3480156104c557600080fd5b5061025361124a565b3480156104da57600080fd5b506102536104e9366004613da6565b611478565b3480156104fa57600080fd5b506102a060075481565b34801561051057600080fd5b506102a0611751565b34801561052557600080fd5b506102a060035481565b34801561053b57600080fd5b5061025361054a366004614168565b61175d565b34801561055b57600080fd5b506102a061056a36600461418d565b8051602081830181018051600a8252928201919093012091525481565b34801561059357600080fd5b506102536118e3565b3480156105a857600080fd5b506102a060045481565b3480156105be57600080fd5b506102536105cd366004613dc8565b611903565b3480156105de57600080fd5b506102756105ed366004613df5565b6119ef565b3480156105fe57600080fd5b5061043b61060d3660046141d5565b611a25565b34801561061e57600080fd5b506102a060015481565b34801561063457600080fd5b50610253610643366004613da6565b611a5d565b34801561065457600080fd5b506102a0600081565b34801561066957600080fd5b5061068e604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516102819190614246565b3480156106a757600080fd5b506102536106b6366004613dc8565b611b0b565b3480156106c757600080fd5b506102a06106d6366004613cc6565b60096020526000908152604090205481565b3480156106f457600080fd5b506102a060055481565b34801561070a57600080fd5b50610253610719366004613da6565b611d88565b34801561072a57600080fd5b506102a0600080516020614c6d83398151915281565b34801561074c57600080fd5b5061025361075b366004613df5565b612124565b34801561076c57600080fd5b5061025361077b366004614259565b612140565b34801561078c57600080fd5b506102a061079b366004613da6565b612652565b3480156107ac57600080fd5b5061043b6107bb366004613dc8565b61267d565b3480156107cc57600080fd5b506102a0600381565b3480156107e157600080fd5b506102a0600080516020614c4d83398151915281565b34801561080357600080fd5b506102a0600080516020614cad83398151915281565b600080516020614cad83398151915261083181612a38565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061088557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060610897600b612a42565b905090565b6108a4612a4f565b6108ac612a77565b6108b4612aad565b6001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108ee57600080fd5b505af1158015610902573d6000803e3d6000fd5b5050505061090f81612b25565b61091761302a565b50565b600080516020614c6d83398151915261093281612a38565b60008381526008602052604090206109b6600b820161094f612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190614295565b8561303b565b5050600c81015460ff168015610a0657506001600982015460ff1660048111156109e2576109e2613e82565b1480610a0657506003600982015460ff166004811115610a0457610a04613e82565b145b8015610a285750600554610a1c82600b0161306b565b6001600160d01b031610155b15610b9157610a38600b856130b2565b5060098101805460ff191660021790556000610a52612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190614295565b9050600181118015610b4a5750610ac8612aad565b6001600160a01b031663c6b61e4c610ae16001846142c4565b6040518263ffffffff1660e01b8152600401610aff91815260200190565b600060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b449190810190614366565b60600151155b15610b6857604051630a5564fb60e41b815260040160405180910390fd5b84600080516020614c8d8339815191526002604051610b879190614403565b60405180910390a2505b50505050565b6000610885600b836130be565b600080610baf6130ca565b60009384526020525050604090206001015490565b600080516020614c4d833981519152610bdc81612a38565b600080546040805163916e1c5760e01b815290516001600160a01b039092169291839163916e1c579160048083019260209291908290030181865afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d9190614295565b9050845b848111610cfc576000818152600860205260408082209051630ab9444d60e21b815260048101849052602481018590529091906001600160a01b03861690632ae511349060440160e060405180830381865afa158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd99190614411565b9050610ced82600b018583600001516130ee565b50508260010192505050610c51565b505050505050565b610d0d82610ba4565b610d1681612a38565b610b9183836130fc565b6001600160a01b0381163314610d495760405163334bd91960e11b815260040160405180910390fd5b610d5382826131a4565b505050565b600080516020614cad833981519152610d7081612a38565b61091761321c565b600080516020614c6d833981519152610d9081612a38565b6000838152600860205260409020610e14600b8201610dad612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e9190614295565b85613273565b50506000610e2482600b0161306b565b6001600160d01b0316905060065481108015610e7a57506003600983015460ff166004811115610e5657610e56613e82565b1480610e7a57506002600983015460ff166004811115610e7857610e78613e82565b145b15610fe75760098201805460ff19166001179055610e99600b8661328e565b506000610ea4612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f059190614295565b9050600181118015610f9c5750610f1a612aad565b6001600160a01b031663c6b61e4c610f336001846142c4565b6040518263ffffffff1660e01b8152600401610f5191815260200190565b600060405180830381865afa158015610f6e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f969190810190614366565b60600151155b15610fba57604051630a5564fb60e41b815260040160405180910390fd5b85600080516020614c8d8339815191526001604051610fd99190614403565b60405180910390a250611046565b6005548110801561101057506002600983015460ff16600481111561100e5761100e613e82565b145b156110465760098201805460ff191660039081179091556040518691600080516020614c8d83398151915291610b879190614403565b5050505050565b611055613c14565b6001600160a01b0382166000908152600960205260409020546108859061267d565b600061108161329a565b805490915060ff600160401b82041615906001600160401b03166000811580156110a85750825b90506000826001600160401b031660011480156110c45750303b155b9050811580156110d2575080155b156110f05760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561111957845460ff60401b1916600160401b1785555b6111216132be565b6111296132be565b6111316132c6565b6111396132d6565b600080546001600160a01b0319166001600160a01b03881617815561115e90886130fc565b50611177600080516020614cad833981519152886130fc565b50611190600080516020614c4d833981519152886130fc565b506111a9600080516020614c6d833981519152876130fc565b5083156111f057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6112016132e6565b61120a8261338b565b6112148282613396565b5050565b6000611222613453565b50600080516020614c2d83398151915290565b60008061124061349c565b5460ff1692915050565b600080516020614c4d83398151915261126281612a38565b6000546040805163028f31f360e01b815290516001600160a01b0390921691829163028f31f39160048083019260209291908290030181865afa1580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d19190614295565b600281905550806001600160a01b03166372c9acdc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113399190614295565b600381905550806001600160a01b0316638e991ff36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a19190614295565b600481905550806001600160a01b031663cdf2003e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190614295565b600581905550806001600160a01b03166307e0cd176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114719190614295565b6006555050565b600080516020614cad83398151915261149081612a38565b662386f26fc100008310806114a457508183115b156114c257604051633494a40d60e21b815260040160405180910390fd5b600283905560038290556040518381527fcf130ebf0154d300b5d8c2c20f243f2e34a4dbbd54ddd70492f35f89f5c72e009060200160405180910390a16040518281527f597ef447da3fcf95d1df392ba918a66ae2de15f4b5f47371c336b4e99a57008f9060200160405180910390a160075460015b8181116110465760008181526008602052604090206004600982015460ff16600481111561156857611568613e82565b1461174857600061157b8260040161306b565b6001600160d01b0316905086811015611668576116048260040161159d612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe9190614295565b896130ee565b50506001820154600283015460038401546040516001600160a01b03938416938793600080516020614c0d8339815191529361165b939183169216908d9060058a019060068b019060078c019060088d0190614556565b60405180910390a3611746565b85811115611746576116e68260040161167f612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190614295565b886130ee565b50506001820154600283015460038401546040516001600160a01b03938416938793600080516020614c0d8339815191529361173d939183169216908c9060058a019060068b019060078c019060088d0190614556565b60405180910390a35b505b50600101611538565b6000610897600b6134c0565b600080516020614cad83398151915261177581612a38565b6000838152600860205260408120600c8101805460ff191685151517905590600982015460ff1660048111156117ad576117ad613e82565b14806117d157506004600982015460ff1660048111156117cf576117cf613e82565b145b156117ef57604051636e1ed6c560e11b815260040160405180910390fd5b837fe11c4b38855d86735092f8c7e790a86765bacd0fe47618b41eb0c5142aea69c884604051611823911515815260200190565b60405180910390a260055461183a82600b0161306b565b6001600160d01b031610610b9157821561189857611859600b856130b2565b5060098101805460ff191660029081179091556040518591600080516020614c8d8339815191529161188b9190614403565b60405180910390a2610b91565b6118a3600b8561328e565b5060098101805460ff191660019081179091556040518591600080516020614c8d833981519152916118d59190614403565b60405180910390a250505050565b600080516020614cad8339815191526118fb81612a38565b6109176134ca565b600080516020614cad83398151915261191b81612a38565b60005460408051633c621da160e21b8152905184926001600160a01b03169163f18876849160048083019260209291908290030181865afa158015611964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119889190614295565b1180611995575060065482115b156119b357604051633494a40d60e21b815260040160405180910390fd5b60048290556040518281527ff2a6752ea06dfdf93ef2d0ac5db269e4d58636cd56f160ed0c96e0a0a272362a9060200160405180910390a15050565b6000806119fa6130ca565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b611a2d613c14565b611a56600a8484604051611a429291906145d1565b90815260200160405180910390205461267d565b9392505050565b600080516020614cad833981519152611a7581612a38565b81831115611a9657604051633494a40d60e21b815260040160405180910390fd5b600683905560058290556040518381527f5486872ddb5ca216cd9cb1f6e2e232e468aa32e312fbccba2ffb5edc831cfb2c9060200160405180910390a16040518281527f97eca98512abc502b3bb1ef19702bf7eb53a988b87fd250138fbbfd1b62782c99060200160405180910390a1505050565b611b13612a4f565b611b1b612a77565b60008181526008602052604090206002015481906001600160a01b03163314611b5757604051633387d70760e01b815260040160405180910390fd5b611b5f612aad565b6001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b9957600080fd5b505af1158015611bad573d6000803e3d6000fd5b50505060008381526008602052604081209150600982015460ff166004811115611bd957611bd9613e82565b1480611bfd57506004600982015460ff166004811115611bfb57611bfb613e82565b145b15611c1b57604051636e1ed6c560e11b815260040160405180910390fd5b60098101805460ff19166004179055611c35600b8461328e565b506000611c40612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca19190614295565b9050600181118015611d385750611cb6612aad565b6001600160a01b031663c6b61e4c611ccf6001846142c4565b6040518263ffffffff1660e01b8152600401611ced91815260200190565b600060405180830381865afa158015611d0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d329190810190614366565b60600151155b15611d5657604051630a5564fb60e41b815260040160405180910390fd5b83600080516020614c8d8339815191526004604051611d759190614403565b60405180910390a250505061091761302a565b600080516020614c4d833981519152611da081612a38565b600080546040805163916e1c5760e01b815290516001600160a01b039092169291839163916e1c579160048083019260209291908290030181865afa158015611ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e119190614295565b9050845b848111610cfc5760405163ea83e47b60e01b8152600481018290526000906001600160a01b0385169063ea83e47b90602401600060405180830381865afa158015611e64573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e8c9190810190614640565b60008381526008602090815260409182902083518155908301516001820180546001600160a01b03199081166001600160a01b0393841617909155928401516002830180548516918316919091179055606084015160038301805490941691161790915560c0820151919250906005820190611f08908261482f565b5060e08201516006820190611f1d908261482f565b506101008201516007820190611f33908261482f565b506101208201516008820190611f49908261482f565b508161014001516004811115611f6157611f61613e82565b6004811115611f7257611f72613e82565b60098201805460ff19166001836004811115611f9057611f90613e82565b0217905550610160820151600a8201556101c0820151600c8201805460ff191691151591909117905560005b84811161206c57604051630ab9444d60e21b815260048101859052602481018290526000906001600160a01b03881690632ae511349060440160e060405180830381865afa158015612012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120369190614411565b905061204a836004018383606001516130ee565b505061205e83600b018383600001516130ee565b505081600101915050611fbc565b506020808301516001600160a01b03166000908152600990915260409081902084905560c083015190518491600a916120a591906148e8565b90815260405190819003602001902055600282610140015160048111156120ce576120ce613e82565b60048111156120df576120df613e82565b60048111156120f0576120f0613e82565b0361210257612100600b846130b2565b505b6007805490600061211283614904565b91905055508260010192505050611e15565b61212d82610ba4565b61213681612a38565b610b9183836131a4565b612148612a4f565b612150612a77565b60008281526008602052604090206002015482906001600160a01b0316331461218c57604051633387d70760e01b815260040160405180910390fd5b612194612aad565b6001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156121ce57600080fd5b505af11580156121e2573d6000803e3d6000fd5b50600092506121fa9150506040840160208501613cc6565b6001600160a01b031614806122275750600061221c6060840160408501613cc6565b6001600160a01b0316145b156122455760405163e6c4247b60e01b815260040160405180910390fd5b6002548260600135108061225e57506003548260600135115b1561227c5760405163d1be20e560e01b815260040160405180910390fd5b60008381526008602090815260409091209061229a90840184613cc6565b60018201546001600160a01b039081169116146122ca57604051630cd0dd4360e11b815260040160405180910390fd5b6122da6040840160208501613cc6565b6002820180546001600160a01b0319166001600160a01b039290921691909117905561230c6060840160408501613cc6565b6003820180546001600160a01b0319166001600160a01b0392909216919091179055606083013561233f6004830161306b565b6001600160d01b0316146123ca576123c78160040161235c612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015612399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bd9190614295565b85606001356130ee565b50505b806005016040516123db9190614990565b6040519081900390206123f1608085018561499c565b6040516123ff9291906145d1565b60405180910390201461250057600a61241b608085018561499c565b6040516124299291906145d1565b908152602001604051809103902054600014158061248e575061248c612452608085018561499c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061351192505050565b155b156124ac5760405163430f13b360e01b815260040160405180910390fd5b6000600a826005016040516124c19190614990565b9081526040519081900360200190205583600a6124e1608086018661499c565b6040516124ef9291906145d1565b908152604051908190036020019020555b61250d608084018461499c565b600583019161251d9190836149e9565b5061252b60a084018461499c565b600683019161253b9190836149e9565b5061254960c084018461499c565b60078301916125599190836149e9565b5061256760e084018461499c565b60088301916125779190836149e9565b50836009600061258a6020870187613cc6565b6001600160a01b03168152602080820192909252604001600020919091556125b490840184613cc6565b6001600160a01b031684600080516020614c0d8339815191526125dd6040870160208801613cc6565b6125ed6060880160408901613cc6565b60608801356125ff60808a018a61499c565b61260c60a08c018c61499c565b61261960c08e018e61499c565b8e8060e00190612629919061499c565b6040516126409b9a99989796959493929190614acb565b60405180910390a3505061121461302a565b600082815260086020526040812061266d90600b018361356d565b6001600160d01b03169392505050565b612685613c14565b60008281526008602052604081209061269c612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fd9190614295565b604080516101c0810182528454815260018501546001600160a01b0390811660208301526002860154811692820192909252600385015490911660608201529091506080810161274f6004850161306b565b6001600160d01b031681526020016127846000841161276f57600061277a565b61277a6001856142c4565b600486019061356d565b6001600160d01b031681526020018360050180546127a1906144a5565b80601f01602080910402602001604051908101604052809291908181526020018280546127cd906144a5565b801561281a5780601f106127ef5761010080835404028352916020019161281a565b820191906000526020600020905b8154815290600101906020018083116127fd57829003601f168201915b50505050508152602001836006018054612833906144a5565b80601f016020809104026020016040519081016040528092919081815260200182805461285f906144a5565b80156128ac5780601f10612881576101008083540402835291602001916128ac565b820191906000526020600020905b81548152906001019060200180831161288f57829003601f168201915b505050505081526020018360070180546128c5906144a5565b80601f01602080910402602001604051908101604052809291908181526020018280546128f1906144a5565b801561293e5780601f106129135761010080835404028352916020019161293e565b820191906000526020600020905b81548152906001019060200180831161292157829003601f168201915b50505050508152602001836008018054612957906144a5565b80601f0160208091040260200160405190810160405280929190818152602001828054612983906144a5565b80156129d05780601f106129a5576101008083540402835291602001916129d0565b820191906000526020600020905b8154815290600101906020018083116129b357829003601f168201915b5050509183525050600984015460209091019060ff1660048111156129f7576129f7613e82565b815260200183600a01548152602001612a1284600b0161306b565b6001600160d01b03168152600c9093015460ff1615156020909301929092525092915050565b61091781336135b8565b60606000611a56836135f1565b612a57611235565b15612a755760405163d93c066560e01b815260040160405180910390fd5b565b6000612a8161364d565b805490915060011901612aa757604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60008060009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b01573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190614b4e565b6000612b376040830160208401613cc6565b6001600160a01b03161480612b6457506000612b596060830160408401613cc6565b6001600160a01b0316145b15612b825760405163e6c4247b60e01b815260040160405180910390fd5b60096000612b936020840184613cc6565b6001600160a01b0316815260208101919091526040016000205415612bcb57604051636e1ed6c560e11b815260040160405180910390fd5b600a612bda608083018361499c565b604051612be89291906145d1565b9081526020016040518091039020546000141580612c135750612c11612452608083018361499c565b155b15612c315760405163430f13b360e01b815260040160405180910390fd5b60025481606001351080612c4a57506003548160600135115b15612c685760405163d1be20e560e01b815260040160405180910390fd5b600454341015612c8b57604051630103be3b60e21b815260040160405180910390fd5b6000600760008154612c9c90614904565b91829055506000818152600860205260408120919250612cba612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1b9190614295565b8383559050612d2d6020850185613cc6565b6001830180546001600160a01b0319166001600160a01b0392909216919091179055612d5f6040850160208601613cc6565b6002830180546001600160a01b0319166001600160a01b0392909216919091179055612d916060850160408601613cc6565b6003830180546001600160a01b0319166001600160a01b0392909216919091179055612ddb6004830182612dc6576000612dd1565b612dd16001846142c4565b86606001356130ee565b50612deb9050608085018561499c565b6005840191612dfb9190836149e9565b50612e0960a085018561499c565b6006840191612e199190836149e9565b50612e2760c085018561499c565b6007840191612e379190836149e9565b50612e4560e085018561499c565b6008840191612e559190836149e9565b5043600a8301556009808301805460ff1916600117905583906000612e7d6020880188613cc6565b6001600160a01b0316815260208101919091526040016000205582600a612ea7608087018761499c565b604051612eb59291906145d1565b9081526040516020918190038201902091909155612ed590850185613cc6565b6001600160a01b0316837fb7474aa65f72ae77dbf02c6bd0a0d85749e7101f97fc94d524af373e832dc06a612f106040880160208901613cc6565b612f206060890160408a01613cc6565b6060890135612f3260808b018b61499c565b612f3f60a08d018d61499c565b612f4c60c08f018f61499c565b8f8060e00190612f5c919061499c565b604051612f739b9a99989796959493929190614acb565b60405180910390a382600080516020614c8d8339815191526001604051612f9a9190614403565b60405180910390a26000546001600160a01b031663d4e90b973485612fc56040890160208a01613cc6565b6040516001600160e01b031960e086901b16815260048101929092526001600160a01b031660248201526044016000604051808303818588803b15801561300b57600080fd5b505af115801561301f573d6000803e3d6000fd5b505050505050505050565b600061303461364d565b6001905550565b60008061305e848461304c8861306b565b6130569190614b6b565b879190613671565b915091505b935093915050565b805460009080156130a957613093836130856001846142c4565b600091825260209091200190565b54600160301b90046001600160d01b0316611a56565b60009392505050565b6000611a56838361367f565b6000611a5683836136ce565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b60008061305e858585613671565b6000806131076130ca565b905061311384846119ef565b613193576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556131493390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610885565b6000915050610885565b5092915050565b6000806131af6130ca565b90506131bb84846119ef565b15613193576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610885565b6132246136f8565b600061322e61349c565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516132689190613de1565b60405180910390a150565b60008061305e84846132848861306b565b6130569190614b8b565b6000611a56838361371d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b612a75613806565b6132ce613806565b612a7561382b565b6132de613806565b612a75613833565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061336d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316613361600080516020614c2d833981519152546001600160a01b031690565b6001600160a01b031614155b15612a755760405163703e46dd60e11b815260040160405180910390fd5b600061121481612a38565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156133f0575060408051601f3d908101601f191682019092526133ed91810190614295565b60015b6134185781604051634c9c8ce360e01b815260040161340f9190613de1565b60405180910390fd5b600080516020614c2d833981519152811461344957604051632a87526960e21b81526004810182905260240161340f565b610d538383613850565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612a755760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b6000610885825490565b6134d2612a4f565b60006134dc61349c565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861325b3390565b60008181805b82518110156135625782818151811061353257613532614bab565b6020910101516001600160f81b031916600160fd1b1461355a578161355681614904565b9250505b600101613517565b506003109392505050565b81546000908161357f858583856138a6565b905080156135ac57613596856130856001846142c4565b54600160301b90046001600160d01b03166135af565b60005b95945050505050565b6135c282826119ef565b6112145760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161340f565b60608160000180548060200260200160405190810160405280929190818152602001828054801561364157602002820191906000526020600020905b81548152602001906001019080831161362d575b50505050509050919050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b60008061305e858585613908565b60008181526001830160205260408120546136c657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610885565b506000610885565b60008260000182815481106136e5576136e5614bab565b9060005260206000200154905092915050565b613700611235565b612a7557604051638dfc202b60e01b815260040160405180910390fd5b600081815260018301602052604081205480156131935760006137416001836142c4565b8554909150600090613755906001906142c4565b90508082146137ba57600086600001828154811061377557613775614bab565b906000526020600020015490508087600001848154811061379857613798614bab565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806137cb576137cb614bc1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610885565b61380e613a82565b612a7557604051631afcd79f60e31b815260040160405180910390fd5b61302a613806565b61383b613806565b600061384561349c565b805460ff1916905550565b61385982613a9c565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561389e57610d538282613af8565b611214613b65565b60005b818310156139005760006138bd8484613b84565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff1611156138ec578092506138fa565b6138f7816001614bd7565b93505b506138a9565b509392505050565b825460009081908015613a27576000613926876130856001856142c4565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b03166020840152919250908716101561397a57604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff8088169116036139c6578461399d886130856001866142c4565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055613a17565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b6020015192508391506130639050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b029190931617920191909155905081613063565b6000613a8c61329a565b54600160401b900460ff16919050565b806001600160a01b03163b600003613ac95780604051634c9c8ce360e01b815260040161340f9190613de1565b600080516020614c2d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051613b1591906148e8565b600060405180830381855af49150503d8060008114613b50576040519150601f19603f3d011682016040523d82523d6000602084013e613b55565b606091505b50915091506135af858383613b9f565b3415612a755760405163b398979f60e01b815260040160405180910390fd5b6000613b936002848418614bea565b611a5690848416614bd7565b606082613bb457613baf82613beb565b611a56565b8151158015613bcb57506001600160a01b0384163b155b1561319d5783604051639996b31560e01b815260040161340f9190613de1565b805115613bfb5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806101c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160608152602001606081526020016060815260200160006004811115613c9457613c94613e82565b815260200160008152602001600081526020016000151581525090565b6001600160a01b038116811461091757600080fd5b600060208284031215613cd857600080fd5b8135611a5681613cb1565b600060208284031215613cf557600080fd5b81356001600160e01b031981168114611a5657600080fd5b6020808252825182820181905260009190848201906040850190845b81811015613d4557835183529284019291840191600101613d29565b50909695505050505050565b60006101008284031215613d6457600080fd5b50919050565b600060208284031215613d7c57600080fd5b81356001600160401b03811115613d9257600080fd5b613d9e84828501613d51565b949350505050565b60008060408385031215613db957600080fd5b50508035926020909101359150565b600060208284031215613dda57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215613e0857600080fd5b823591506020830135613e1a81613cb1565b809150509250929050565b6001600160a01b03169052565b60005b83811015613e4d578181015183820152602001613e35565b50506000910152565b60008151808452613e6e816020860160208601613e32565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60058110613eb657634e487b7160e01b600052602160045260246000fd5b9052565b602081528151602082015260006020830151613ed96040840182613e25565b506040830151613eec6060840182613e25565b506060830151613eff6080840182613e25565b50608083015160a083015260a083015160c083015260c08301516101c08060e0850152613f306101e0850183613e56565b915060e0850151601f19610100818786030181880152613f508584613e56565b945080880151925050610120818786030181880152613f6f8584613e56565b945080880151925050610140818786030181880152613f8e8584613e56565b94508088015192505050610160613fa781870183613e98565b860151610180868101919091528601516101a08087019190915290950151151593019290925250919050565b60008060408385031215613fe657600080fd5b8235613ff181613cb1565b91506020830135613e1a81613cb1565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561403957614039614001565b60405290565b6040516101e081016001600160401b038111828210171561403957614039614001565b604051601f8201601f191681016001600160401b038111828210171561408a5761408a614001565b604052919050565b60006001600160401b038211156140ab576140ab614001565b50601f01601f191660200190565b60006140cc6140c784614092565b614062565b90508281528383830111156140e057600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561410a57600080fd5b823561411581613cb1565b915060208301356001600160401b0381111561413057600080fd5b8301601f8101851361414157600080fd5b614150858235602084016140b9565b9150509250929050565b801515811461091757600080fd5b6000806040838503121561417b57600080fd5b823591506020830135613e1a8161415a565b60006020828403121561419f57600080fd5b81356001600160401b038111156141b557600080fd5b8201601f810184136141c657600080fd5b613d9e848235602084016140b9565b600080602083850312156141e857600080fd5b82356001600160401b03808211156141ff57600080fd5b818501915085601f83011261421357600080fd5b81358181111561422257600080fd5b86602082850101111561423457600080fd5b60209290920196919550909350505050565b602081526000611a566020830184613e56565b6000806040838503121561426c57600080fd5b8235915060208301356001600160401b0381111561428957600080fd5b61415085828601613d51565b6000602082840312156142a757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610885576108856142ae565b80516142e28161415a565b919050565b600082601f8301126142f857600080fd5b815160206001600160401b0382111561431357614313614001565b8160051b614322828201614062565b928352848101820192828101908785111561433c57600080fd5b83870192505b8483101561435b57825182529183019190830190614342565b979650505050505050565b60006020828403121561437857600080fd5b81516001600160401b038082111561438f57600080fd5b9083019060a082860312156143a357600080fd5b6143ab614017565b82518152602083015160208201526040830151604082015260608301516143d18161415a565b60608201526080830151828111156143e857600080fd5b6143f4878286016142e7565b60808301525095945050505050565b602081016108858284613e98565b600060e0828403121561442357600080fd5b60405160e081016001600160401b038111828210171561444557614445614001565b60405282518152602083015161445a8161415a565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015161448d8161415a565b60a082015260c0928301519281019290925250919050565b600181811c908216806144b957607f821691505b602082108103613d6457634e487b7160e01b600052602260045260246000fd5b600081546144e6816144a5565b808552602060018381168015614503576001811461451d5761454b565b60ff1985168884015283151560051b88018301955061454b565b866000528260002060005b858110156145435781548a8201860152908301908401614528565b890184019650505b505050505092915050565b6001600160a01b038881168252871660208201526040810186905260e060608201819052600090614589908301876144d9565b828103608084015261459b81876144d9565b905082810360a08401526145af81866144d9565b905082810360c08401526145c381856144d9565b9a9950505050505050505050565b8183823760009101908152919050565b80516142e281613cb1565b600082601f8301126145fd57600080fd5b815161460b6140c782614092565b81815284602083860101111561462057600080fd5b613d9e826020830160208701613e32565b8051600581106142e257600080fd5b60006020828403121561465257600080fd5b81516001600160401b038082111561466957600080fd5b908301906101e0828603121561467e57600080fd5b61468661403f565b82518152614696602084016145e1565b60208201526146a7604084016145e1565b60408201526146b8606084016145e1565b60608201526080830151608082015260a083015160a082015260c0830151828111156146e357600080fd5b6146ef878286016145ec565b60c08301525060e08301518281111561470757600080fd5b614713878286016145ec565b60e083015250610100808401518381111561472d57600080fd5b614739888287016145ec565b828401525050610120808401518381111561475357600080fd5b61475f888287016145ec565b828401525050610140614773818501614631565b90820152610160838101519082015261018080840151908201526101a080840151838111156147a157600080fd5b6147ad888287016142e7565b8284015250506101c091506147c38284016142d7565b91810191909152949350505050565b601f821115610d53576000816000526020600020601f850160051c810160208610156147fb5750805b601f850160051c820191505b81811015610cfc57828155600101614807565b600019600383901b1c191660019190911b1790565b81516001600160401b0381111561484857614848614001565b61485c8161485684546144a5565b846147d2565b602080601f83116001811461488b57600084156148795750858301515b614883858261481a565b865550610cfc565b600085815260208120601f198616915b828110156148ba5788860151825594840194600190910190840161489b565b50858210156148d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516148fa818460208701613e32565b9190910192915050565b600060018201614916576149166142ae565b5060010190565b6000815461492a816144a5565b60018281168015614942576001811461495757614986565b60ff1984168752821515830287019450614986565b8560005260208060002060005b8581101561497d5781548a820152908401908201614964565b50505082870194505b5050505092915050565b6000611a56828461491d565b6000808335601e198436030181126149b357600080fd5b8301803591506001600160401b038211156149cd57600080fd5b6020019150368190038213156149e257600080fd5b9250929050565b6001600160401b03831115614a0057614a00614001565b614a1483614a0e83546144a5565b836147d2565b6000601f841160018114614a425760008515614a305750838201355b614a3a868261481a565b845550611046565b600083815260209020601f19861690835b82811015614a735786850135825560209485019460019092019101614a53565b5086821015614a905760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038c811682528b166020820152604081018a905260e060608201819052600090614aff9083018a8c614aa2565b8281036080840152614b1281898b614aa2565b905082810360a0840152614b27818789614aa2565b905082810360c0840152614b3c818587614aa2565b9e9d5050505050505050505050505050565b600060208284031215614b6057600080fd5b8151611a5681613cb1565b6001600160d01b0381811683821601908082111561319d5761319d6142ae565b6001600160d01b0382811682821603908082111561319d5761319d6142ae565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b80820180821115610885576108856142ae565b600082614c0757634e487b7160e01b600052601260045260246000fd5b50049056fedfb704f30cb8b5a69562201718d3bdfd1299983f120f8ff3932b295bfa15aede360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b087a1532a7a87f7aacbb5e1d89fc13c95143d976fa27740467ab52d352a319ec6b77c6570970c38bcbef0f4075021f00b93c11bf5ecdb11f0a03db50dcbf584ad8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220118c4b2713edf9515e8e0eb6bbe3b86ebc36d3eed6444f3696d16724a7f09f7764736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061022e5760003560e01c806301159c701461023357806301ffc9a714610255578063028f31f31461028a57806303a229f6146102ae57806305c1c3f4146102d057806307e0cd17146102e3578063098d2f3c146102f95780632393526f1461031957806324404fa714610339578063248a9ca3146103665780632cc90df7146103865780632f2ff15d146103a657806336568abe146103c65780633f4ba83a146103e65780633fa411f8146103fb578063439b37561461041b578063485cc955146104485780634f1ef2861461046857806352d1902d1461047b57806354fd4d50146104905780635c975abb146104a45780635d342e98146104b95780635ec47f7d146104ce57806368ed41ed146104ee5780636d3527111461050457806372c9acdc1461051957806373801a881461052f578063776ddebc1461054f5780638456cb59146105875780638e991ff31461059c578063901d97f6146105b257806391d14854146105d25780639dc6fe5a146105f25780639e8e6717146106125780639f80210414610628578063a217fddf14610648578063ad3cb1cc1461065d578063b4fcea1d1461069b578063c06020b0146106bb578063cdf2003e146106e8578063d210ecd4146106fe578063d25f33e51461071e578063d547741f14610740578063ddadf36914610760578063e5c8307d14610780578063ea83e47b146107a0578063ec5903f4146107c0578063ec87621c146107d5578063f8742254146107f7575b600080fd5b34801561023f57600080fd5b5061025361024e366004613cc6565b610819565b005b34801561026157600080fd5b50610275610270366004613ce3565b610854565b60405190151581526020015b60405180910390f35b34801561029657600080fd5b506102a060025481565b604051908152602001610281565b3480156102ba57600080fd5b506102c361088b565b6040516102819190613d0d565b6102536102de366004613d6a565b61089c565b3480156102ef57600080fd5b506102a060065481565b34801561030557600080fd5b50610253610314366004613da6565b61091a565b34801561032557600080fd5b506102a0610334366004613dc8565b610b97565b34801561034557600080fd5b50600054610359906001600160a01b031681565b6040516102819190613de1565b34801561037257600080fd5b506102a0610381366004613dc8565b610ba4565b34801561039257600080fd5b506102536103a1366004613da6565b610bc4565b3480156103b257600080fd5b506102536103c1366004613df5565b610d04565b3480156103d257600080fd5b506102536103e1366004613df5565b610d20565b3480156103f257600080fd5b50610253610d58565b34801561040757600080fd5b50610253610416366004613da6565b610d78565b34801561042757600080fd5b5061043b610436366004613cc6565b61104d565b6040516102819190613eba565b34801561045457600080fd5b50610253610463366004613fd3565b611077565b6102536104763660046140f7565b6111f9565b34801561048757600080fd5b506102a0611218565b34801561049c57600080fd5b5060016102a0565b3480156104b057600080fd5b50610275611235565b3480156104c557600080fd5b5061025361124a565b3480156104da57600080fd5b506102536104e9366004613da6565b611478565b3480156104fa57600080fd5b506102a060075481565b34801561051057600080fd5b506102a0611751565b34801561052557600080fd5b506102a060035481565b34801561053b57600080fd5b5061025361054a366004614168565b61175d565b34801561055b57600080fd5b506102a061056a36600461418d565b8051602081830181018051600a8252928201919093012091525481565b34801561059357600080fd5b506102536118e3565b3480156105a857600080fd5b506102a060045481565b3480156105be57600080fd5b506102536105cd366004613dc8565b611903565b3480156105de57600080fd5b506102756105ed366004613df5565b6119ef565b3480156105fe57600080fd5b5061043b61060d3660046141d5565b611a25565b34801561061e57600080fd5b506102a060015481565b34801561063457600080fd5b50610253610643366004613da6565b611a5d565b34801561065457600080fd5b506102a0600081565b34801561066957600080fd5b5061068e604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516102819190614246565b3480156106a757600080fd5b506102536106b6366004613dc8565b611b0b565b3480156106c757600080fd5b506102a06106d6366004613cc6565b60096020526000908152604090205481565b3480156106f457600080fd5b506102a060055481565b34801561070a57600080fd5b50610253610719366004613da6565b611d88565b34801561072a57600080fd5b506102a0600080516020614c6d83398151915281565b34801561074c57600080fd5b5061025361075b366004613df5565b612124565b34801561076c57600080fd5b5061025361077b366004614259565b612140565b34801561078c57600080fd5b506102a061079b366004613da6565b612652565b3480156107ac57600080fd5b5061043b6107bb366004613dc8565b61267d565b3480156107cc57600080fd5b506102a0600381565b3480156107e157600080fd5b506102a0600080516020614c4d83398151915281565b34801561080357600080fd5b506102a0600080516020614cad83398151915281565b600080516020614cad83398151915261083181612a38565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061088557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060610897600b612a42565b905090565b6108a4612a4f565b6108ac612a77565b6108b4612aad565b6001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108ee57600080fd5b505af1158015610902573d6000803e3d6000fd5b5050505061090f81612b25565b61091761302a565b50565b600080516020614c6d83398151915261093281612a38565b60008381526008602052604090206109b6600b820161094f612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190614295565b8561303b565b5050600c81015460ff168015610a0657506001600982015460ff1660048111156109e2576109e2613e82565b1480610a0657506003600982015460ff166004811115610a0457610a04613e82565b145b8015610a285750600554610a1c82600b0161306b565b6001600160d01b031610155b15610b9157610a38600b856130b2565b5060098101805460ff191660021790556000610a52612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190614295565b9050600181118015610b4a5750610ac8612aad565b6001600160a01b031663c6b61e4c610ae16001846142c4565b6040518263ffffffff1660e01b8152600401610aff91815260200190565b600060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b449190810190614366565b60600151155b15610b6857604051630a5564fb60e41b815260040160405180910390fd5b84600080516020614c8d8339815191526002604051610b879190614403565b60405180910390a2505b50505050565b6000610885600b836130be565b600080610baf6130ca565b60009384526020525050604090206001015490565b600080516020614c4d833981519152610bdc81612a38565b600080546040805163916e1c5760e01b815290516001600160a01b039092169291839163916e1c579160048083019260209291908290030181865afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d9190614295565b9050845b848111610cfc576000818152600860205260408082209051630ab9444d60e21b815260048101849052602481018590529091906001600160a01b03861690632ae511349060440160e060405180830381865afa158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd99190614411565b9050610ced82600b018583600001516130ee565b50508260010192505050610c51565b505050505050565b610d0d82610ba4565b610d1681612a38565b610b9183836130fc565b6001600160a01b0381163314610d495760405163334bd91960e11b815260040160405180910390fd5b610d5382826131a4565b505050565b600080516020614cad833981519152610d7081612a38565b61091761321c565b600080516020614c6d833981519152610d9081612a38565b6000838152600860205260409020610e14600b8201610dad612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e9190614295565b85613273565b50506000610e2482600b0161306b565b6001600160d01b0316905060065481108015610e7a57506003600983015460ff166004811115610e5657610e56613e82565b1480610e7a57506002600983015460ff166004811115610e7857610e78613e82565b145b15610fe75760098201805460ff19166001179055610e99600b8661328e565b506000610ea4612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f059190614295565b9050600181118015610f9c5750610f1a612aad565b6001600160a01b031663c6b61e4c610f336001846142c4565b6040518263ffffffff1660e01b8152600401610f5191815260200190565b600060405180830381865afa158015610f6e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f969190810190614366565b60600151155b15610fba57604051630a5564fb60e41b815260040160405180910390fd5b85600080516020614c8d8339815191526001604051610fd99190614403565b60405180910390a250611046565b6005548110801561101057506002600983015460ff16600481111561100e5761100e613e82565b145b156110465760098201805460ff191660039081179091556040518691600080516020614c8d83398151915291610b879190614403565b5050505050565b611055613c14565b6001600160a01b0382166000908152600960205260409020546108859061267d565b600061108161329a565b805490915060ff600160401b82041615906001600160401b03166000811580156110a85750825b90506000826001600160401b031660011480156110c45750303b155b9050811580156110d2575080155b156110f05760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561111957845460ff60401b1916600160401b1785555b6111216132be565b6111296132be565b6111316132c6565b6111396132d6565b600080546001600160a01b0319166001600160a01b03881617815561115e90886130fc565b50611177600080516020614cad833981519152886130fc565b50611190600080516020614c4d833981519152886130fc565b506111a9600080516020614c6d833981519152876130fc565b5083156111f057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6112016132e6565b61120a8261338b565b6112148282613396565b5050565b6000611222613453565b50600080516020614c2d83398151915290565b60008061124061349c565b5460ff1692915050565b600080516020614c4d83398151915261126281612a38565b6000546040805163028f31f360e01b815290516001600160a01b0390921691829163028f31f39160048083019260209291908290030181865afa1580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d19190614295565b600281905550806001600160a01b03166372c9acdc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113399190614295565b600381905550806001600160a01b0316638e991ff36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a19190614295565b600481905550806001600160a01b031663cdf2003e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190614295565b600581905550806001600160a01b03166307e0cd176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114719190614295565b6006555050565b600080516020614cad83398151915261149081612a38565b662386f26fc100008310806114a457508183115b156114c257604051633494a40d60e21b815260040160405180910390fd5b600283905560038290556040518381527fcf130ebf0154d300b5d8c2c20f243f2e34a4dbbd54ddd70492f35f89f5c72e009060200160405180910390a16040518281527f597ef447da3fcf95d1df392ba918a66ae2de15f4b5f47371c336b4e99a57008f9060200160405180910390a160075460015b8181116110465760008181526008602052604090206004600982015460ff16600481111561156857611568613e82565b1461174857600061157b8260040161306b565b6001600160d01b0316905086811015611668576116048260040161159d612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe9190614295565b896130ee565b50506001820154600283015460038401546040516001600160a01b03938416938793600080516020614c0d8339815191529361165b939183169216908d9060058a019060068b019060078c019060088d0190614556565b60405180910390a3611746565b85811115611746576116e68260040161167f612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190614295565b886130ee565b50506001820154600283015460038401546040516001600160a01b03938416938793600080516020614c0d8339815191529361173d939183169216908c9060058a019060068b019060078c019060088d0190614556565b60405180910390a35b505b50600101611538565b6000610897600b6134c0565b600080516020614cad83398151915261177581612a38565b6000838152600860205260408120600c8101805460ff191685151517905590600982015460ff1660048111156117ad576117ad613e82565b14806117d157506004600982015460ff1660048111156117cf576117cf613e82565b145b156117ef57604051636e1ed6c560e11b815260040160405180910390fd5b837fe11c4b38855d86735092f8c7e790a86765bacd0fe47618b41eb0c5142aea69c884604051611823911515815260200190565b60405180910390a260055461183a82600b0161306b565b6001600160d01b031610610b9157821561189857611859600b856130b2565b5060098101805460ff191660029081179091556040518591600080516020614c8d8339815191529161188b9190614403565b60405180910390a2610b91565b6118a3600b8561328e565b5060098101805460ff191660019081179091556040518591600080516020614c8d833981519152916118d59190614403565b60405180910390a250505050565b600080516020614cad8339815191526118fb81612a38565b6109176134ca565b600080516020614cad83398151915261191b81612a38565b60005460408051633c621da160e21b8152905184926001600160a01b03169163f18876849160048083019260209291908290030181865afa158015611964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119889190614295565b1180611995575060065482115b156119b357604051633494a40d60e21b815260040160405180910390fd5b60048290556040518281527ff2a6752ea06dfdf93ef2d0ac5db269e4d58636cd56f160ed0c96e0a0a272362a9060200160405180910390a15050565b6000806119fa6130ca565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b611a2d613c14565b611a56600a8484604051611a429291906145d1565b90815260200160405180910390205461267d565b9392505050565b600080516020614cad833981519152611a7581612a38565b81831115611a9657604051633494a40d60e21b815260040160405180910390fd5b600683905560058290556040518381527f5486872ddb5ca216cd9cb1f6e2e232e468aa32e312fbccba2ffb5edc831cfb2c9060200160405180910390a16040518281527f97eca98512abc502b3bb1ef19702bf7eb53a988b87fd250138fbbfd1b62782c99060200160405180910390a1505050565b611b13612a4f565b611b1b612a77565b60008181526008602052604090206002015481906001600160a01b03163314611b5757604051633387d70760e01b815260040160405180910390fd5b611b5f612aad565b6001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b9957600080fd5b505af1158015611bad573d6000803e3d6000fd5b50505060008381526008602052604081209150600982015460ff166004811115611bd957611bd9613e82565b1480611bfd57506004600982015460ff166004811115611bfb57611bfb613e82565b145b15611c1b57604051636e1ed6c560e11b815260040160405180910390fd5b60098101805460ff19166004179055611c35600b8461328e565b506000611c40612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca19190614295565b9050600181118015611d385750611cb6612aad565b6001600160a01b031663c6b61e4c611ccf6001846142c4565b6040518263ffffffff1660e01b8152600401611ced91815260200190565b600060405180830381865afa158015611d0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d329190810190614366565b60600151155b15611d5657604051630a5564fb60e41b815260040160405180910390fd5b83600080516020614c8d8339815191526004604051611d759190614403565b60405180910390a250505061091761302a565b600080516020614c4d833981519152611da081612a38565b600080546040805163916e1c5760e01b815290516001600160a01b039092169291839163916e1c579160048083019260209291908290030181865afa158015611ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e119190614295565b9050845b848111610cfc5760405163ea83e47b60e01b8152600481018290526000906001600160a01b0385169063ea83e47b90602401600060405180830381865afa158015611e64573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e8c9190810190614640565b60008381526008602090815260409182902083518155908301516001820180546001600160a01b03199081166001600160a01b0393841617909155928401516002830180548516918316919091179055606084015160038301805490941691161790915560c0820151919250906005820190611f08908261482f565b5060e08201516006820190611f1d908261482f565b506101008201516007820190611f33908261482f565b506101208201516008820190611f49908261482f565b508161014001516004811115611f6157611f61613e82565b6004811115611f7257611f72613e82565b60098201805460ff19166001836004811115611f9057611f90613e82565b0217905550610160820151600a8201556101c0820151600c8201805460ff191691151591909117905560005b84811161206c57604051630ab9444d60e21b815260048101859052602481018290526000906001600160a01b03881690632ae511349060440160e060405180830381865afa158015612012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120369190614411565b905061204a836004018383606001516130ee565b505061205e83600b018383600001516130ee565b505081600101915050611fbc565b506020808301516001600160a01b03166000908152600990915260409081902084905560c083015190518491600a916120a591906148e8565b90815260405190819003602001902055600282610140015160048111156120ce576120ce613e82565b60048111156120df576120df613e82565b60048111156120f0576120f0613e82565b0361210257612100600b846130b2565b505b6007805490600061211283614904565b91905055508260010192505050611e15565b61212d82610ba4565b61213681612a38565b610b9183836131a4565b612148612a4f565b612150612a77565b60008281526008602052604090206002015482906001600160a01b0316331461218c57604051633387d70760e01b815260040160405180910390fd5b612194612aad565b6001600160a01b03166376bc98696040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156121ce57600080fd5b505af11580156121e2573d6000803e3d6000fd5b50600092506121fa9150506040840160208501613cc6565b6001600160a01b031614806122275750600061221c6060840160408501613cc6565b6001600160a01b0316145b156122455760405163e6c4247b60e01b815260040160405180910390fd5b6002548260600135108061225e57506003548260600135115b1561227c5760405163d1be20e560e01b815260040160405180910390fd5b60008381526008602090815260409091209061229a90840184613cc6565b60018201546001600160a01b039081169116146122ca57604051630cd0dd4360e11b815260040160405180910390fd5b6122da6040840160208501613cc6565b6002820180546001600160a01b0319166001600160a01b039290921691909117905561230c6060840160408501613cc6565b6003820180546001600160a01b0319166001600160a01b0392909216919091179055606083013561233f6004830161306b565b6001600160d01b0316146123ca576123c78160040161235c612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015612399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bd9190614295565b85606001356130ee565b50505b806005016040516123db9190614990565b6040519081900390206123f1608085018561499c565b6040516123ff9291906145d1565b60405180910390201461250057600a61241b608085018561499c565b6040516124299291906145d1565b908152602001604051809103902054600014158061248e575061248c612452608085018561499c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061351192505050565b155b156124ac5760405163430f13b360e01b815260040160405180910390fd5b6000600a826005016040516124c19190614990565b9081526040519081900360200190205583600a6124e1608086018661499c565b6040516124ef9291906145d1565b908152604051908190036020019020555b61250d608084018461499c565b600583019161251d9190836149e9565b5061252b60a084018461499c565b600683019161253b9190836149e9565b5061254960c084018461499c565b60078301916125599190836149e9565b5061256760e084018461499c565b60088301916125779190836149e9565b50836009600061258a6020870187613cc6565b6001600160a01b03168152602080820192909252604001600020919091556125b490840184613cc6565b6001600160a01b031684600080516020614c0d8339815191526125dd6040870160208801613cc6565b6125ed6060880160408901613cc6565b60608801356125ff60808a018a61499c565b61260c60a08c018c61499c565b61261960c08e018e61499c565b8e8060e00190612629919061499c565b6040516126409b9a99989796959493929190614acb565b60405180910390a3505061121461302a565b600082815260086020526040812061266d90600b018361356d565b6001600160d01b03169392505050565b612685613c14565b60008281526008602052604081209061269c612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fd9190614295565b604080516101c0810182528454815260018501546001600160a01b0390811660208301526002860154811692820192909252600385015490911660608201529091506080810161274f6004850161306b565b6001600160d01b031681526020016127846000841161276f57600061277a565b61277a6001856142c4565b600486019061356d565b6001600160d01b031681526020018360050180546127a1906144a5565b80601f01602080910402602001604051908101604052809291908181526020018280546127cd906144a5565b801561281a5780601f106127ef5761010080835404028352916020019161281a565b820191906000526020600020905b8154815290600101906020018083116127fd57829003601f168201915b50505050508152602001836006018054612833906144a5565b80601f016020809104026020016040519081016040528092919081815260200182805461285f906144a5565b80156128ac5780601f10612881576101008083540402835291602001916128ac565b820191906000526020600020905b81548152906001019060200180831161288f57829003601f168201915b505050505081526020018360070180546128c5906144a5565b80601f01602080910402602001604051908101604052809291908181526020018280546128f1906144a5565b801561293e5780601f106129135761010080835404028352916020019161293e565b820191906000526020600020905b81548152906001019060200180831161292157829003601f168201915b50505050508152602001836008018054612957906144a5565b80601f0160208091040260200160405190810160405280929190818152602001828054612983906144a5565b80156129d05780601f106129a5576101008083540402835291602001916129d0565b820191906000526020600020905b8154815290600101906020018083116129b357829003601f168201915b5050509183525050600984015460209091019060ff1660048111156129f7576129f7613e82565b815260200183600a01548152602001612a1284600b0161306b565b6001600160d01b03168152600c9093015460ff1615156020909301929092525092915050565b61091781336135b8565b60606000611a56836135f1565b612a57611235565b15612a755760405163d93c066560e01b815260040160405180910390fd5b565b6000612a8161364d565b805490915060011901612aa757604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60008060009054906101000a90046001600160a01b03166001600160a01b03166320930fa46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b01573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190614b4e565b6000612b376040830160208401613cc6565b6001600160a01b03161480612b6457506000612b596060830160408401613cc6565b6001600160a01b0316145b15612b825760405163e6c4247b60e01b815260040160405180910390fd5b60096000612b936020840184613cc6565b6001600160a01b0316815260208101919091526040016000205415612bcb57604051636e1ed6c560e11b815260040160405180910390fd5b600a612bda608083018361499c565b604051612be89291906145d1565b9081526020016040518091039020546000141580612c135750612c11612452608083018361499c565b155b15612c315760405163430f13b360e01b815260040160405180910390fd5b60025481606001351080612c4a57506003548160600135115b15612c685760405163d1be20e560e01b815260040160405180910390fd5b600454341015612c8b57604051630103be3b60e21b815260040160405180910390fd5b6000600760008154612c9c90614904565b91829055506000818152600860205260408120919250612cba612aad565b6001600160a01b031663916e1c576040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1b9190614295565b8383559050612d2d6020850185613cc6565b6001830180546001600160a01b0319166001600160a01b0392909216919091179055612d5f6040850160208601613cc6565b6002830180546001600160a01b0319166001600160a01b0392909216919091179055612d916060850160408601613cc6565b6003830180546001600160a01b0319166001600160a01b0392909216919091179055612ddb6004830182612dc6576000612dd1565b612dd16001846142c4565b86606001356130ee565b50612deb9050608085018561499c565b6005840191612dfb9190836149e9565b50612e0960a085018561499c565b6006840191612e199190836149e9565b50612e2760c085018561499c565b6007840191612e379190836149e9565b50612e4560e085018561499c565b6008840191612e559190836149e9565b5043600a8301556009808301805460ff1916600117905583906000612e7d6020880188613cc6565b6001600160a01b0316815260208101919091526040016000205582600a612ea7608087018761499c565b604051612eb59291906145d1565b9081526040516020918190038201902091909155612ed590850185613cc6565b6001600160a01b0316837fb7474aa65f72ae77dbf02c6bd0a0d85749e7101f97fc94d524af373e832dc06a612f106040880160208901613cc6565b612f206060890160408a01613cc6565b6060890135612f3260808b018b61499c565b612f3f60a08d018d61499c565b612f4c60c08f018f61499c565b8f8060e00190612f5c919061499c565b604051612f739b9a99989796959493929190614acb565b60405180910390a382600080516020614c8d8339815191526001604051612f9a9190614403565b60405180910390a26000546001600160a01b031663d4e90b973485612fc56040890160208a01613cc6565b6040516001600160e01b031960e086901b16815260048101929092526001600160a01b031660248201526044016000604051808303818588803b15801561300b57600080fd5b505af115801561301f573d6000803e3d6000fd5b505050505050505050565b600061303461364d565b6001905550565b60008061305e848461304c8861306b565b6130569190614b6b565b879190613671565b915091505b935093915050565b805460009080156130a957613093836130856001846142c4565b600091825260209091200190565b54600160301b90046001600160d01b0316611a56565b60009392505050565b6000611a56838361367f565b6000611a5683836136ce565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b60008061305e858585613671565b6000806131076130ca565b905061311384846119ef565b613193576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556131493390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610885565b6000915050610885565b5092915050565b6000806131af6130ca565b90506131bb84846119ef565b15613193576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610885565b6132246136f8565b600061322e61349c565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516132689190613de1565b60405180910390a150565b60008061305e84846132848861306b565b6130569190614b8b565b6000611a56838361371d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b612a75613806565b6132ce613806565b612a7561382b565b6132de613806565b612a75613833565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061336d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316613361600080516020614c2d833981519152546001600160a01b031690565b6001600160a01b031614155b15612a755760405163703e46dd60e11b815260040160405180910390fd5b600061121481612a38565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156133f0575060408051601f3d908101601f191682019092526133ed91810190614295565b60015b6134185781604051634c9c8ce360e01b815260040161340f9190613de1565b60405180910390fd5b600080516020614c2d833981519152811461344957604051632a87526960e21b81526004810182905260240161340f565b610d538383613850565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612a755760405163703e46dd60e11b815260040160405180910390fd5b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b6000610885825490565b6134d2612a4f565b60006134dc61349c565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861325b3390565b60008181805b82518110156135625782818151811061353257613532614bab565b6020910101516001600160f81b031916600160fd1b1461355a578161355681614904565b9250505b600101613517565b506003109392505050565b81546000908161357f858583856138a6565b905080156135ac57613596856130856001846142c4565b54600160301b90046001600160d01b03166135af565b60005b95945050505050565b6135c282826119ef565b6112145760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161340f565b60608160000180548060200260200160405190810160405280929190818152602001828054801561364157602002820191906000526020600020905b81548152602001906001019080831161362d575b50505050509050919050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b60008061305e858585613908565b60008181526001830160205260408120546136c657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610885565b506000610885565b60008260000182815481106136e5576136e5614bab565b9060005260206000200154905092915050565b613700611235565b612a7557604051638dfc202b60e01b815260040160405180910390fd5b600081815260018301602052604081205480156131935760006137416001836142c4565b8554909150600090613755906001906142c4565b90508082146137ba57600086600001828154811061377557613775614bab565b906000526020600020015490508087600001848154811061379857613798614bab565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806137cb576137cb614bc1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610885565b61380e613a82565b612a7557604051631afcd79f60e31b815260040160405180910390fd5b61302a613806565b61383b613806565b600061384561349c565b805460ff1916905550565b61385982613a9c565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561389e57610d538282613af8565b611214613b65565b60005b818310156139005760006138bd8484613b84565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff1611156138ec578092506138fa565b6138f7816001614bd7565b93505b506138a9565b509392505050565b825460009081908015613a27576000613926876130856001856142c4565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b03166020840152919250908716101561397a57604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff8088169116036139c6578461399d886130856001866142c4565b80546001600160d01b0392909216600160301b0265ffffffffffff909216919091179055613a17565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b6020015192508391506130639050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b029190931617920191909155905081613063565b6000613a8c61329a565b54600160401b900460ff16919050565b806001600160a01b03163b600003613ac95780604051634c9c8ce360e01b815260040161340f9190613de1565b600080516020614c2d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051613b1591906148e8565b600060405180830381855af49150503d8060008114613b50576040519150601f19603f3d011682016040523d82523d6000602084013e613b55565b606091505b50915091506135af858383613b9f565b3415612a755760405163b398979f60e01b815260040160405180910390fd5b6000613b936002848418614bea565b611a5690848416614bd7565b606082613bb457613baf82613beb565b611a56565b8151158015613bcb57506001600160a01b0384163b155b1561319d5783604051639996b31560e01b815260040161340f9190613de1565b805115613bfb5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b604051806101c001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160608152602001606081526020016060815260200160006004811115613c9457613c94613e82565b815260200160008152602001600081526020016000151581525090565b6001600160a01b038116811461091757600080fd5b600060208284031215613cd857600080fd5b8135611a5681613cb1565b600060208284031215613cf557600080fd5b81356001600160e01b031981168114611a5657600080fd5b6020808252825182820181905260009190848201906040850190845b81811015613d4557835183529284019291840191600101613d29565b50909695505050505050565b60006101008284031215613d6457600080fd5b50919050565b600060208284031215613d7c57600080fd5b81356001600160401b03811115613d9257600080fd5b613d9e84828501613d51565b949350505050565b60008060408385031215613db957600080fd5b50508035926020909101359150565b600060208284031215613dda57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215613e0857600080fd5b823591506020830135613e1a81613cb1565b809150509250929050565b6001600160a01b03169052565b60005b83811015613e4d578181015183820152602001613e35565b50506000910152565b60008151808452613e6e816020860160208601613e32565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60058110613eb657634e487b7160e01b600052602160045260246000fd5b9052565b602081528151602082015260006020830151613ed96040840182613e25565b506040830151613eec6060840182613e25565b506060830151613eff6080840182613e25565b50608083015160a083015260a083015160c083015260c08301516101c08060e0850152613f306101e0850183613e56565b915060e0850151601f19610100818786030181880152613f508584613e56565b945080880151925050610120818786030181880152613f6f8584613e56565b945080880151925050610140818786030181880152613f8e8584613e56565b94508088015192505050610160613fa781870183613e98565b860151610180868101919091528601516101a08087019190915290950151151593019290925250919050565b60008060408385031215613fe657600080fd5b8235613ff181613cb1565b91506020830135613e1a81613cb1565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561403957614039614001565b60405290565b6040516101e081016001600160401b038111828210171561403957614039614001565b604051601f8201601f191681016001600160401b038111828210171561408a5761408a614001565b604052919050565b60006001600160401b038211156140ab576140ab614001565b50601f01601f191660200190565b60006140cc6140c784614092565b614062565b90508281528383830111156140e057600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561410a57600080fd5b823561411581613cb1565b915060208301356001600160401b0381111561413057600080fd5b8301601f8101851361414157600080fd5b614150858235602084016140b9565b9150509250929050565b801515811461091757600080fd5b6000806040838503121561417b57600080fd5b823591506020830135613e1a8161415a565b60006020828403121561419f57600080fd5b81356001600160401b038111156141b557600080fd5b8201601f810184136141c657600080fd5b613d9e848235602084016140b9565b600080602083850312156141e857600080fd5b82356001600160401b03808211156141ff57600080fd5b818501915085601f83011261421357600080fd5b81358181111561422257600080fd5b86602082850101111561423457600080fd5b60209290920196919550909350505050565b602081526000611a566020830184613e56565b6000806040838503121561426c57600080fd5b8235915060208301356001600160401b0381111561428957600080fd5b61415085828601613d51565b6000602082840312156142a757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610885576108856142ae565b80516142e28161415a565b919050565b600082601f8301126142f857600080fd5b815160206001600160401b0382111561431357614313614001565b8160051b614322828201614062565b928352848101820192828101908785111561433c57600080fd5b83870192505b8483101561435b57825182529183019190830190614342565b979650505050505050565b60006020828403121561437857600080fd5b81516001600160401b038082111561438f57600080fd5b9083019060a082860312156143a357600080fd5b6143ab614017565b82518152602083015160208201526040830151604082015260608301516143d18161415a565b60608201526080830151828111156143e857600080fd5b6143f4878286016142e7565b60808301525095945050505050565b602081016108858284613e98565b600060e0828403121561442357600080fd5b60405160e081016001600160401b038111828210171561444557614445614001565b60405282518152602083015161445a8161415a565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015161448d8161415a565b60a082015260c0928301519281019290925250919050565b600181811c908216806144b957607f821691505b602082108103613d6457634e487b7160e01b600052602260045260246000fd5b600081546144e6816144a5565b808552602060018381168015614503576001811461451d5761454b565b60ff1985168884015283151560051b88018301955061454b565b866000528260002060005b858110156145435781548a8201860152908301908401614528565b890184019650505b505050505092915050565b6001600160a01b038881168252871660208201526040810186905260e060608201819052600090614589908301876144d9565b828103608084015261459b81876144d9565b905082810360a08401526145af81866144d9565b905082810360c08401526145c381856144d9565b9a9950505050505050505050565b8183823760009101908152919050565b80516142e281613cb1565b600082601f8301126145fd57600080fd5b815161460b6140c782614092565b81815284602083860101111561462057600080fd5b613d9e826020830160208701613e32565b8051600581106142e257600080fd5b60006020828403121561465257600080fd5b81516001600160401b038082111561466957600080fd5b908301906101e0828603121561467e57600080fd5b61468661403f565b82518152614696602084016145e1565b60208201526146a7604084016145e1565b60408201526146b8606084016145e1565b60608201526080830151608082015260a083015160a082015260c0830151828111156146e357600080fd5b6146ef878286016145ec565b60c08301525060e08301518281111561470757600080fd5b614713878286016145ec565b60e083015250610100808401518381111561472d57600080fd5b614739888287016145ec565b828401525050610120808401518381111561475357600080fd5b61475f888287016145ec565b828401525050610140614773818501614631565b90820152610160838101519082015261018080840151908201526101a080840151838111156147a157600080fd5b6147ad888287016142e7565b8284015250506101c091506147c38284016142d7565b91810191909152949350505050565b601f821115610d53576000816000526020600020601f850160051c810160208610156147fb5750805b601f850160051c820191505b81811015610cfc57828155600101614807565b600019600383901b1c191660019190911b1790565b81516001600160401b0381111561484857614848614001565b61485c8161485684546144a5565b846147d2565b602080601f83116001811461488b57600084156148795750858301515b614883858261481a565b865550610cfc565b600085815260208120601f198616915b828110156148ba5788860151825594840194600190910190840161489b565b50858210156148d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516148fa818460208701613e32565b9190910192915050565b600060018201614916576149166142ae565b5060010190565b6000815461492a816144a5565b60018281168015614942576001811461495757614986565b60ff1984168752821515830287019450614986565b8560005260208060002060005b8581101561497d5781548a820152908401908201614964565b50505082870194505b5050505092915050565b6000611a56828461491d565b6000808335601e198436030181126149b357600080fd5b8301803591506001600160401b038211156149cd57600080fd5b6020019150368190038213156149e257600080fd5b9250929050565b6001600160401b03831115614a0057614a00614001565b614a1483614a0e83546144a5565b836147d2565b6000601f841160018114614a425760008515614a305750838201355b614a3a868261481a565b845550611046565b600083815260209020601f19861690835b82811015614a735786850135825560209485019460019092019101614a53565b5086821015614a905760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038c811682528b166020820152604081018a905260e060608201819052600090614aff9083018a8c614aa2565b8281036080840152614b1281898b614aa2565b905082810360a0840152614b27818789614aa2565b905082810360c0840152614b3c818587614aa2565b9e9d5050505050505050505050505050565b600060208284031215614b6057600080fd5b8151611a5681613cb1565b6001600160d01b0381811683821601908082111561319d5761319d6142ae565b6001600160d01b0382811682821603908082111561319d5761319d6142ae565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b80820180821115610885576108856142ae565b600082614c0757634e487b7160e01b600052601260045260246000fd5b50049056fedfb704f30cb8b5a69562201718d3bdfd1299983f120f8ff3932b295bfa15aede360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b087a1532a7a87f7aacbb5e1d89fc13c95143d976fa27740467ab52d352a319ec6b77c6570970c38bcbef0f4075021f00b93c11bf5ecdb11f0a03db50dcbf584ad8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220118c4b2713edf9515e8e0eb6bbe3b86ebc36d3eed6444f3696d16724a7f09f7764736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "CheckpointUnorderedInsertion()": [
        {
          "details": "A value was attempted to be inserted on a past checkpoint."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deregisterDlp(uint256)": {
        "details": "Only owner can deregister, must be in valid status"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateDlp(uint256,(address,address,address,uint256,string,string,string,string))": {
        "details": "Only DLP owner can update"
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deregisterDlp(uint256)": {
        "notice": "Deregisters a DLP"
      },
      "dlps(uint256)": {
        "notice": "Gets DLP information including current stake and status"
      },
      "registerDlp((address,address,address,uint256,string,string,string,string))": {
        "notice": "Registers a new DLP with initial stake"
      },
      "updateDlp(uint256,(address,address,address,uint256,string,string,string,string))": {
        "notice": "Updates DLP information"
      },
      "updateDlpEligibilityThresholds(uint256,uint256)": {
        "notice": "Updates eligibility thresholds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16050,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "dlpRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDLPRoot)13218"
      },
      {
        "astId": 16053,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "eligibleDlpsLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16056,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "minDlpStakersPercentage",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16059,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "maxDlpStakersPercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16062,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "minDlpRegistrationStake",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 16065,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "dlpEligibilityThreshold",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 16068,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "dlpSubEligibilityThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 16071,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "dlpsCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 16076,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "_dlps",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Dlp)16136_storage)"
      },
      {
        "astId": 16081,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "dlpIds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16086,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "dlpNameToId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 16089,
        "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
        "label": "_eligibleDlpsList",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(UintSet)10298_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Checkpoint208)8782_storage)dyn_storage": {
        "base": "t_struct(Checkpoint208)8782_storage",
        "encoding": "dynamic_array",
        "label": "struct Checkpoints.Checkpoint208[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDLPRoot)13218": {
        "encoding": "inplace",
        "label": "contract IDLPRoot",
        "numberOfBytes": "20"
      },
      "t_enum(DlpStatus)16106": {
        "encoding": "inplace",
        "label": "enum IDLPRootCore.DlpStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Dlp)16136_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDLPRootCore.Dlp)",
        "numberOfBytes": "32",
        "value": "t_struct(Dlp)16136_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint208)8782_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Checkpoint208",
        "members": [
          {
            "astId": 8779,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8781,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "_value",
            "offset": 6,
            "slot": "0",
            "type": "t_uint208"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Dlp)16136_storage": {
        "encoding": "inplace",
        "label": "struct IDLPRootCore.Dlp",
        "members": [
          {
            "astId": 16108,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16110,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "dlpAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16112,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16114,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 16117,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "stakersPercentageCheckpoints",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Trace208)8777_storage"
          },
          {
            "astId": 16119,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 16121,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "iconUrl",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 16123,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "website",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 16125,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "metadata",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 16128,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(DlpStatus)16106"
          },
          {
            "astId": 16130,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "registrationBlockNumber",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 16133,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "stakeAmountCheckpoints",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(Trace208)8777_storage"
          },
          {
            "astId": 16135,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "isVerified",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Set)9826_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9821,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9825,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trace208)8777_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Trace208",
        "members": [
          {
            "astId": 8776,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "_checkpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint208)8782_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)10298_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 10297,
            "contract": "contracts/rootCore/DLPRootCoreImplementation.sol:DLPRootCoreImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9826_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}